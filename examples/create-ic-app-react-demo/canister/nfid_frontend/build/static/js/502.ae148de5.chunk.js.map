{"version":3,"file":"static/js/502.ae148de5.chunk.js","mappings":"yLAQA,MA2CA,EA3C+C,IAMxC,IAAD,oBAN0C,QAC9CA,EAAO,WACPC,EAAU,kBACVC,EAAiB,UACjBC,EAAS,SACTC,GACD,EACC,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,MACZ,OAAEC,EAAM,SAAEC,EAAQ,UAAEC,GAAcC,EAAAA,EAAAA,sBACtCT,EAAWU,QAAQC,SAEfC,EAAOR,EAAMG,GAEbM,GAAQC,EAAAA,EAAAA,UAAQ,KACpB,IAAKF,GAA0B,OAAjBX,QAAiB,IAAjBA,IAAAA,EAAmBc,MAAO,OAExC,MAAMA,EAAyB,OAAjBd,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBc,MAEjC,MAAO,CAAEA,QAAOC,UADEC,WAAWF,GAASH,GAAMM,QAAQ,GAC1B,GACzB,CAACN,EAAMX,IAEV,OACE,SAAC,IAAe,CACdkB,MAAM,mBACNC,gBAAiBrB,EACjBsB,YAA8B,OAAjBpB,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBqB,KAChCC,WAAgC,QAAtB,EAAEC,OAAY,OAALX,QAAK,IAALA,OAAK,EAALA,EAAOE,cAAM,QAAI,IACpCC,SAAiC,QAAzB,EAAEQ,OAAY,OAALX,QAAK,IAALA,OAAK,EAALA,EAAOG,iBAAS,QAAI,IACrCS,QAASjB,EACTD,SAAUD,EACVoB,UAAWxB,EACXyB,SAAUxB,EACVyB,OAAQ,CACN,CACEC,KAAuB,OAAjB5B,QAAiB,IAAjBA,GAAuB,QAAN,EAAjBA,EAAmB6B,YAAI,OAAM,QAAN,EAAvB,EAAyBC,YAAI,WAAZ,EAAjB,EAA+BC,QAAQ,GAAGC,IAChDd,MAAwB,OAAjBlB,QAAiB,IAAjBA,GAAuB,QAAN,EAAjBA,EAAmB6B,YAAI,OAAM,QAAN,EAAvB,EAAyBC,YAAI,WAAZ,EAAjB,EAA+BG,KACtCC,SAA2B,OAAjBlC,QAAiB,IAAjBA,GAAuB,QAAN,EAAjBA,EAAmB6B,YAAI,OAAgB,QAAhB,EAAvB,EAAyBM,sBAAc,WAAtB,EAAjB,EAAyCF,QAGvD,C","sources":["features/embed/components/sell.tsx"],"sourcesContent":["import { chainService } from \"packages/integration-ethereum/src/lib/decoder/chain-service\"\nimport { useMemo } from \"react\"\n\nimport { ApproverCmpProps } from \"frontend/features/embed/types\"\nimport { useExchangeRates } from \"frontend/features/fungable-token/eth/hooks/use-eth-exchange-rate\"\n\nimport { SendTransaction } from \"../ui/send-transaction\"\n\nconst MappedSell: React.FC<ApproverCmpProps> = ({\n  appMeta,\n  rpcMessage,\n  rpcMessageDecoded,\n  onConfirm,\n  onReject,\n}) => {\n  const { rates } = useExchangeRates()\n  const { symbol, currency, chainName } = chainService.getSymbolAndChainName(\n    rpcMessage.options.chainId,\n  )\n  const rate = rates[currency]\n\n  const price = useMemo(() => {\n    if (!rate || !rpcMessageDecoded?.total) return\n\n    const total = rpcMessageDecoded?.total\n    const totalUSD = (parseFloat(total) * rate).toFixed(2)\n    return { total, totalUSD }\n  }, [rate, rpcMessageDecoded])\n\n  return (\n    <SendTransaction\n      title=\"Sell collectible\"\n      applicationMeta={appMeta}\n      fromAddress={rpcMessageDecoded?.from}\n      totalToken={String(price?.total) ?? \"0\"}\n      totalUSD={String(price?.totalUSD) ?? \"0\"}\n      network={chainName}\n      currency={symbol}\n      onApprove={onConfirm}\n      onCancel={onReject}\n      assets={[\n        {\n          icon: rpcMessageDecoded?.data?.meta?.content[0].url,\n          title: rpcMessageDecoded?.data?.meta?.name,\n          subtitle: rpcMessageDecoded?.data?.collectionData?.name,\n        },\n      ]}\n    />\n  )\n}\n\nexport default MappedSell\n"],"names":["appMeta","rpcMessage","rpcMessageDecoded","onConfirm","onReject","rates","useExchangeRates","symbol","currency","chainName","chainService","options","chainId","rate","price","useMemo","total","totalUSD","parseFloat","toFixed","title","applicationMeta","fromAddress","from","totalToken","String","network","onApprove","onCancel","assets","icon","data","meta","content","url","name","subtitle","collectionData"],"sourceRoot":""}