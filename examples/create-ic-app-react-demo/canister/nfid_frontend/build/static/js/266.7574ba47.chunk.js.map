{"version":3,"file":"static/js/266.7574ba47.chunk.js","mappings":"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","sources":["apps/device/register-device-decider/index.tsx","ui/molecules/blurred-loader/index.tsx","ui/pages/register-device-decider/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\n\nimport { ScreenResponsive } from \"@nfid-frontend/ui\"\nimport { authState, im } from \"@nfid/integration\"\n\nimport { RecoverNFIDRoutesConstants } from \"frontend/apps/authentication/recover-nfid/routes\"\nimport { useAuthentication } from \"frontend/apps/authentication/use-authentication\"\nimport {\n  deviceInfo,\n  getBrowserName,\n  getIcon,\n  useDeviceInfo,\n} from \"frontend/integration/device\"\nimport { useAccount } from \"frontend/integration/identity-manager/account/hooks\"\nimport { useDevices } from \"frontend/integration/identity-manager/devices/hooks\"\nimport { AuthorizeRegisterDeciderScreen } from \"frontend/ui/pages/register-device-decider\"\nimport { useNFIDNavigate } from \"frontend/ui/utils/use-nfid-navigate\"\n\ninterface AppScreenRegisterDeviceDeciderProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  registerSuccessPath: string\n}\n\nexport const RouterRegisterDeviceDecider: React.FC<\n  AppScreenRegisterDeviceDeciderProps\n> = ({ registerSuccessPath }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const { recoverDevice, createSecurityDevice, hasSecurityKey } = useDevices()\n  const { recoverAccount, createAccount } = useAccount()\n  const { setShouldStoreLocalAccount } = useAuthentication()\n  const { generatePath } = useNFIDNavigate()\n  const { isAuthenticated } = useAuthentication()\n\n  const {\n    platform: { os: deviceName },\n    hasPlatformAuthenticator,\n  } = useDeviceInfo()\n  console.log(\">> \", { hasWebAuthn: hasPlatformAuthenticator })\n\n  const navigate = useNavigate()\n\n  const { state } = useLocation()\n  const userNumber = BigInt((state as { userNumber: string }).userNumber)\n  console.debug(\"RouterRegisterDeviceDecider\", {\n    hasSecurityKey,\n    hasWebAuthn: hasPlatformAuthenticator,\n  })\n\n  // In case the current device\n  // - does not support web authn platform authentication (!hasPlatformAuthenticator)\n  // - but has a security key registered (hasSecurityKey)\n  // then we don't want to show the decider and transition to profile\n  React.useEffect(() => {\n    if (!hasPlatformAuthenticator && hasSecurityKey) {\n      return navigate(generatePath(registerSuccessPath))\n    }\n  }, [\n    generatePath,\n    hasSecurityKey,\n    hasPlatformAuthenticator,\n    navigate,\n    registerSuccessPath,\n  ])\n\n  const handleRegister = React.useCallback(async () => {\n    setIsLoading(true)\n    setShouldStoreLocalAccount(true)\n\n    if (!userNumber) {\n      return console.error(`Missing userNumber: ${userNumber}`)\n    }\n\n    try {\n      await recoverAccount(BigInt(userNumber), true)\n    } catch (e) {\n      console.warn(\"account not found. Recreating\")\n      const account = { anchor: userNumber }\n      const accessPoint = {\n        icon: getIcon(deviceInfo),\n        device: deviceInfo.newDeviceName,\n        browser: deviceInfo.browser.name ?? \"Mobile\",\n        pubKey: Array.from(\n          new Uint8Array(\n            authState.get()?.delegationIdentity?.getPublicKey().toDer() ?? [],\n          ),\n        ),\n      }\n      console.debug(\"RouterRegisterDeviceDecider handleRegister\", {\n        account,\n        accessPoint,\n      })\n      await createAccount(account, accessPoint)\n\n      // attach the current identity as access point\n      const pub_key = authState\n        .get()\n        ?.delegationIdentity?.getPrincipal()\n        .toText()!\n      const createAccessPointResponse = await im\n        .create_access_point({\n          icon: \"laptop\",\n          device: deviceName,\n          browser: getBrowserName(),\n          pub_key,\n        })\n        .catch((e) => {\n          throw new Error(\n            `RouterRegisterDeviceDecider.handleRegister im.create_access_point: ${e.message}`,\n          )\n        })\n\n      if (createAccessPointResponse.status_code !== 200) {\n        console.error(\"failed to create access point\", {\n          error: createAccessPointResponse.error[0],\n        })\n      }\n\n      im.use_access_point([getBrowserName()]).catch((e) => {\n        throw new Error(\n          `useAuthentication.loginWithRecovery im.use_access_point: ${e.message}`,\n        )\n      })\n    }\n\n    try {\n      await recoverDevice(Number(userNumber))\n    } catch (e) {\n      console.error(e)\n    }\n\n    navigate(generatePath(registerSuccessPath))\n    setIsLoading(false)\n  }, [\n    createAccount,\n    deviceName,\n    generatePath,\n    navigate,\n    recoverAccount,\n    recoverDevice,\n    registerSuccessPath,\n    setShouldStoreLocalAccount,\n    userNumber,\n  ])\n\n  const handleRegisterSecurityKey = React.useCallback(async () => {\n    setIsLoading(true)\n    await createSecurityDevice()\n    navigate(generatePath(registerSuccessPath))\n    setIsLoading(false)\n  }, [createSecurityDevice, generatePath, navigate, registerSuccessPath])\n\n  const handleLogin = React.useCallback(async () => {\n    if (!userNumber)\n      throw new Error(\"userNumber is not defined. Not authorized.\")\n\n    setIsLoading(true)\n    setShouldStoreLocalAccount(false)\n\n    await recoverAccount(userNumber, false)\n\n    setIsLoading(false)\n    navigate(generatePath(registerSuccessPath))\n  }, [\n    generatePath,\n    navigate,\n    recoverAccount,\n    registerSuccessPath,\n    setShouldStoreLocalAccount,\n    userNumber,\n  ])\n\n  useEffect(() => {\n    if (!isAuthenticated)\n      navigate(\n        `${RecoverNFIDRoutesConstants.base}/${RecoverNFIDRoutesConstants.enterRecoveryPhrase}`,\n      )\n  }, [isAuthenticated, navigate])\n\n  return (\n    <ScreenResponsive>\n      <AuthorizeRegisterDeciderScreen\n        onLogin={handleLogin}\n        isLoading={isLoading}\n        isPlatformAuthenticatorAvailable={!!hasPlatformAuthenticator}\n        deviceName={deviceInfo.platform.device}\n        platformAuthenticatorName={deviceInfo.platform.authenticator}\n        onRegisterPlatformDevice={handleRegister}\n        onRegisterSecurityDevice={handleRegisterSecurityKey}\n      />\n    </ScreenResponsive>\n  )\n}\n\nexport default RouterRegisterDeviceDecider\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { Loader } from \"frontend/ui/atoms/loader\"\n\nimport { BlurOverlay } from \"../blur-overlay\"\n\ninterface BlurredLoaderProps {\n  isLoading?: boolean\n  loadingMessage?: string | boolean\n  children?: React.ReactNode\n  className?: string\n}\nexport const BlurredLoader: React.FC<BlurredLoaderProps> = ({\n  isLoading,\n  loadingMessage,\n  children,\n  className,\n}) => {\n  return (\n    <>\n      <div className={clsx(\"w-full h-full\", className)}>{children}</div>\n      {isLoading ? (\n        <BlurOverlay\n          id=\"loader\"\n          className=\"absolute top-0 bottom-0 left-0 z-20 w-full rounded-xl\"\n        >\n          <div className=\"flex flex-col items-center justify-center w-full h-full px-14\">\n            <Loader\n              isLoading={isLoading}\n              fullscreen={false}\n              imageClasses={\"w-[90px] mx-auto py-6 -mt-4 z-20\"}\n            />\n            {loadingMessage && (\n              <div className=\"z-20 mt-5 text-center\">{loadingMessage}</div>\n            )}\n          </div>\n        </BlurOverlay>\n      ) : null}\n    </>\n  )\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { SDKApplicationMeta } from \"@nfid-frontend/ui\"\n\nimport { ElementProps } from \"frontend/types/react\"\nimport { BlurredLoader } from \"frontend/ui/molecules/blurred-loader\"\n\ninterface AuthorizeRegisterDeciderProps extends ElementProps<HTMLDivElement> {\n  onLogin: () => Promise<void> | void\n  onRegisterPlatformDevice: () => Promise<void>\n  onRegisterSecurityDevice: () => Promise<void>\n  deviceName: string\n  platformAuthenticatorName: string\n  isLoading: boolean\n  isPlatformAuthenticatorAvailable: boolean\n  loadingMessage?: string\n}\n\nexport const AuthorizeRegisterDeciderScreen: React.FC<\n  AuthorizeRegisterDeciderProps\n> = ({\n  isLoading,\n  deviceName,\n  platformAuthenticatorName,\n  isPlatformAuthenticatorAvailable,\n  loadingMessage,\n  onLogin,\n  onRegisterPlatformDevice,\n  onRegisterSecurityDevice,\n}) => {\n  return (\n    <BlurredLoader isLoading={isLoading} loadingMessage={loadingMessage}>\n      <SDKApplicationMeta\n        title=\"Sign in faster on this device\"\n        subTitle={\n          isPlatformAuthenticatorAvailable\n            ? `Trust this ${deviceName}? You can quickly and securely sign in next time using this device's ${platformAuthenticatorName}.`\n            : \"You can quickly and securely sign in next time with a security key if you register one now.\"\n        }\n      />\n      <div className=\"flex flex-col w-full space-y-1 mt-7\">\n        {isPlatformAuthenticatorAvailable ? (\n          <>\n            <DeviceRaw\n              id=\"trust-this-device\"\n              title={\"Trust this device\"}\n              subtitle={`Use ${platformAuthenticatorName} to continue`}\n              handler={onRegisterPlatformDevice}\n            />\n            <DeviceRaw\n              // FIXME: in e2e headless mode, we're not correctly detecting isWebAuthNAvailable\n              // that's why we need to handle this button similar for now\n              id=\"just-log-me-in\"\n              title={\"Don’t trust this device\"}\n              subtitle={\"This device is public or someone else’s\"}\n              handler={onLogin}\n            />\n          </>\n        ) : (\n          <>\n            <DeviceRaw\n              id=\"register-my-security-key\"\n              title={\"Register my security key\"}\n              subtitle={\"Sign in faster with your security key\"}\n              handler={onRegisterSecurityDevice}\n            />\n            <DeviceRaw\n              id=\"just-log-me-in\"\n              title={\"Just log me in\"}\n              subtitle={\"I don’t want to register a security key now\"}\n              handler={onLogin}\n            />\n          </>\n        )}\n      </div>\n    </BlurredLoader>\n  )\n}\n\ninterface DeviceRawProps {\n  id: string\n  title: string\n  subtitle: string\n  handler: () => Promise<void> | void\n}\n\nexport const DeviceRaw: React.FC<DeviceRawProps> = ({\n  title,\n  subtitle,\n  handler,\n  id,\n}) => {\n  return (\n    <div\n      id={id}\n      className={clsx(\n        \"w-full py-[10px] px-4 border border-primaryButtonColor/30 rounded-md\",\n        \"hover:bg-primaryButtonColor/10 hover:border-primaryButtonColor/50 cursor-pointer transition-all\",\n      )}\n      onClick={handler}\n    >\n      <p className=\"text-sm\">{title}</p>\n      <p className=\"mt-0.5 text-xs text-secondary\">{subtitle}</p>\n    </div>\n  )\n}\n"],"names":["RouterRegisterDeviceDecider","registerSuccessPath","isLoading","setIsLoading","useState","recoverDevice","createSecurityDevice","hasSecurityKey","useDevices","recoverAccount","createAccount","useAccount","setShouldStoreLocalAccount","useAuthentication","generatePath","useNFIDNavigate","isAuthenticated","platform","os","deviceName","hasPlatformAuthenticator","useDeviceInfo","console","log","hasWebAuthn","navigate","useNavigate","state","useLocation","userNumber","BigInt","debug","React","handleRegister","async","error","e","warn","account","anchor","accessPoint","icon","getIcon","deviceInfo","device","browser","pubKey","Array","from","Uint8Array","authState","delegationIdentity","getPublicKey","toDer","pub_key","getPrincipal","toText","createAccessPointResponse","im","getBrowserName","catch","Error","message","status_code","Number","handleRegisterSecurityKey","handleLogin","useEffect","RecoverNFIDRoutesConstants","onLogin","isPlatformAuthenticatorAvailable","platformAuthenticatorName","onRegisterPlatformDevice","onRegisterSecurityDevice","BlurredLoader","loadingMessage","children","className","clsx","B","id","fullscreen","imageClasses","AuthorizeRegisterDeciderScreen","title","subTitle","DeviceRaw","subtitle","handler","onClick"],"sourceRoot":""}