{"version":3,"file":"static/js/812.7256e9d2.chunk.js","mappings":"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","sources":["assets/dfinity.svg","features/fungable-token/dip-20/hooks/use-all-token-meta.ts","features/fungable-token/erc-20/hooks/use-erc-20-polygon.ts","features/fungable-token/erc-20/hooks/use-erc-20.ts","features/fungable-token/eth/get-eth-balance.ts","../../../packages/client-db/src/lib/addresses/constants.ts","../../../packages/client-db/src/lib/addresses/repo.ts","features/fungable-token/eth/get-eth-address.ts","features/fungable-token/eth/hooks/use-eth-address.ts","features/fungable-token/fetch-balances.ts","features/fungable-token/icp/hooks/use-user-balances.ts","features/vaults/hooks/use-vault-delegation.ts","integration/identity-manager/queries.ts","apps/identity-manager/profile/applications/utils/index.ts","integration/internet-identity/queries.ts","integration/wallet/hooks/use-all-wallets.ts","features/vaults/hooks/use-vaults-wallets-balances.ts","features/fungable-token/btc/hooks/use-btc-address.ts","ui/utils/index.ts","ui/utils/sorting.ts","../../../packages/integration/src/lib/token/types.ts"],"sourcesContent":["var _path, _path2, _path3, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgDfinity(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"-1 -1 107.42470599999999 54.6597\",\n    width: 103.42,\n    height: 50.66,\n    className: \"inline w-8 h-8 ml-1\",\n    \"data-v-45c16e28\": \"\",\n    \"data-v-5e337368\": \"\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"defs\", {\n    \"data-v-45c16e28\": \"\"\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.62 9.14C56.48 11.99 53.72 15.07 51.71 17.53C51.71 17.53 54.95 21.18 58.49 25.09C60.41 22.72 63.17 19.51 66.36 16.61C72.26 11.2 76.1 10.11 78.33 10.11C86.64 10.11 93.37 16.92 93.37 25.35C93.37 33.7 86.64 40.51 78.33 40.6C77.94 40.6 77.46 40.55 76.89 40.42C79.29 41.52 81.92 42.31 84.37 42.31C99.58 42.31 102.55 32.03 102.72 31.28C103.16 29.39 103.42 27.42 103.42 25.4C103.38 11.38 92.15 0 78.33 0C72.56 0 66.27 3.08 59.62 9.14Z\",\n    id: \"a2oTCciHwU\",\n    \"data-v-45c16e28\": \"\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradientc2rIvyDhN\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 65.17,\n    y1: 3.67,\n    x2: 99.9,\n    y2: 39.44,\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"21%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(241, 90, 36)\",\n      stopOpacity: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"68.41000000000001%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(251, 176, 59)\",\n      stopOpacity: 1\n    }\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.8 41.52C46.95 38.66 49.7 35.59 51.71 33.13C51.71 33.13 48.48 29.48 44.94 25.57C43.01 27.94 40.26 31.15 37.07 34.05C31.17 39.41 27.28 40.55 25.09 40.55C16.79 40.55 10.05 33.74 10.05 25.31C10.05 16.96 16.79 10.15 25.09 10.06C25.48 10.06 25.97 10.11 26.53 10.24C24.13 9.14 21.51 8.35 19.06 8.35C3.85 8.35 0.87 18.63 0.7 19.38C0.26 21.27 0 23.24 0 25.26C0 39.28 11.23 50.66 25.09 50.66C30.86 50.66 37.16 47.58 43.8 41.52Z\",\n    id: \"aFWcwFIax\",\n    \"data-v-45c16e28\": \"\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradientaIMror5Zz\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 38.22,\n    y1: 46.97,\n    x2: 3.5,\n    y2: 11.2,\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"21%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(237, 30, 121)\",\n      stopOpacity: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"89.29%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(82, 39, 133)\",\n      stopOpacity: 1\n    }\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.1 8.57C5.24 8.23 1.16 18.1 0.81 19.37C3.47 8.3 13.37 0.04 25.14 0C34.73 0 44.43 9.21 51.59 17.53C51.6 17.51 51.61 17.5 51.62 17.49C51.62 17.49 54.86 21.13 58.4 25.04C58.4 25.04 62.42 29.7 66.71 33.79C68.37 35.37 76.45 41.74 84.23 41.96C98.49 42.36 102.42 31.94 102.64 31.15C100.02 42.27 90.09 50.57 78.29 50.62C68.69 50.62 58.99 41.4 51.8 33.08C51.78 33.1 51.77 33.11 51.76 33.13C51.76 33.13 48.52 29.48 44.98 25.57C44.98 25.57 40.96 20.91 36.68 16.83C35.01 15.25 26.88 8.79 19.1 8.57ZM0.81 19.37C0.8 19.4 0.79 19.43 0.79 19.46C0.79 19.44 0.8 19.41 0.81 19.37Z\",\n    id: \"e1RZG6bOc\",\n    \"data-v-45c16e28\": \"\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#a2oTCciHwU\",\n    opacity: 1,\n    fill: \"url(#gradientc2rIvyDhN)\",\n    \"data-v-45c16e28\": \"\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#a2oTCciHwU\",\n    opacity: 1,\n    fillOpacity: 0,\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    strokeOpacity: 0,\n    \"data-v-45c16e28\": \"\"\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#aFWcwFIax\",\n    opacity: 1,\n    fill: \"url(#gradientaIMror5Zz)\",\n    \"data-v-45c16e28\": \"\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#aFWcwFIax\",\n    opacity: 1,\n    fillOpacity: 0,\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    strokeOpacity: 0,\n    \"data-v-45c16e28\": \"\"\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#e1RZG6bOc\",\n    opacity: 1,\n    fill: \"#29abe2\",\n    fillOpacity: 1,\n    \"data-v-45c16e28\": \"\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#e1RZG6bOc\",\n    opacity: 1,\n    fillOpacity: 0,\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    strokeOpacity: 0,\n    \"data-v-45c16e28\": \"\"\n  }))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgDfinity);\nexport default __webpack_public_path__ + \"static/media/dfinity.583ab84ba16070ca501453d1e291dff4.svg\";\nexport { ForwardRef as ReactComponent };","import useSWR from \"swr\"\n\nimport { getAllToken } from \"@nfid/integration/token/dip-20\"\n\nexport const useAllDip20Token = () => {\n  const { data: token, isValidating } = useSWR(\"dip20AllToken\", getAllToken, {\n    dedupingInterval: 60_000 * 60,\n    focusThrottleInterval: 60_000 * 60,\n  })\n\n  console.debug(\"useAllDip20Token\", { token })\n\n  return { token, isValidating }\n}\n","import { getErc20Tokens } from \"src/features/fungable-token/erc-20/get-erc-20-polygon\"\nimport useSWR from \"swr\"\n\nexport const useErc20Polygon = () => {\n  const { data: erc20, ...rest } = useSWR(\"erc20Polygon\", getErc20Tokens)\n\n  return { erc20, ...rest }\n}\n","import { getErc20Tokens } from \"src/features/fungable-token/erc-20/get-erc-20\"\nimport useSWR from \"swr\"\n\nexport const useErc20 = () => {\n  const { data: erc20, ...rest } = useSWR(\"erc20\", getErc20Tokens)\n\n  return { erc20, ...rest }\n}\n","import { ChainBalance } from \"packages/integration/src/lib/asset/types\"\nimport {\n  AccountBalance,\n  AppBalance,\n  TokenBalanceSheet,\n} from \"packages/integration/src/lib/asset/types\"\n\nimport { IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumAsset, loadProfileFromLocalStorage } from \"@nfid/integration\"\nimport { E8S } from \"@nfid/integration/token/icp\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\nimport { fetchProfile } from \"frontend/integration/identity-manager\"\n\nexport const getEthBalance = async (): Promise<TokenBalanceSheet> => {\n  const hostname = \"nfid.one\"\n  const accountId = \"0\"\n  const profile = loadProfileFromLocalStorage() ?? (await fetchProfile())\n  const delegation = await getWalletDelegation(\n    profile?.anchor,\n    hostname,\n    accountId,\n  )\n  const balance = await ethereumAsset.getBalance(undefined, delegation)\n  const address = await ethereumAsset.getAddress(delegation)\n  const principal = (await getWalletDelegation(profile.anchor))\n    .getPrincipal()\n    .toText()\n\n  return computeSheetForRootAccount(balance, address, principal)\n}\n\n//sc-6513\nexport const computeSheetForRootAccount = async (\n  balance: ChainBalance,\n  address: string | undefined,\n  principalId: string,\n): Promise<TokenBalanceSheet> => {\n  const tokenBalance = BigInt(Number(balance.balance?.toFixed(8) ?? 0) * E8S)\n  const usdBalance = \"$\" + (balance.balanceinUsd?.toFixed(2) ?? \"0.00\")\n  const rootAccountBalance: AccountBalance = {\n    accountName: \"account 1\",\n    address: address ?? \"\",\n    principalId,\n    tokenBalance,\n    usdBalance,\n  }\n\n  const appBalance: AppBalance = {\n    accounts: [rootAccountBalance],\n    appName: \"NFID\",\n    tokenBalance,\n  }\n\n  return {\n    applications: {\n      NFID: appBalance,\n    },\n    icon: IconPngEthereum,\n    label: \"Ethereum\",\n    token: TokenStandards.ETH,\n    tokenBalance,\n    usdBalance,\n    blockchain: \"Ethereum\",\n  }\n}\n","export const STORAGE_KEY = \"nfid_address_cache\"\n","import { getScope } from \"@nfid/integration\"\n\nimport { STORAGE_KEY } from \"./constants\"\nimport { CachedAddresses, NetworkKey } from \"./types\"\n\nconst loadAddressCache = (): CachedAddresses => {\n  const cache = localStorage.getItem(STORAGE_KEY)\n  const parsedCache = cache ? JSON.parse(cache) : {}\n  return parsedCache\n}\n\ntype KeyArgs = {\n  anchor: bigint\n  accountId: string\n  hostname: string\n}\n\ntype NetworkArgs = {\n  network: NetworkKey\n}\n\ntype ReadAddressArg = KeyArgs & NetworkArgs\n\ntype CreateAddressArg = KeyArgs &\n  NetworkArgs & {\n    address: string\n  }\n\nexport const getKey = ({ hostname, accountId, anchor }: KeyArgs) => {\n  const scope = getScope(hostname, accountId)\n  const key = `${anchor}:${scope}`\n  return key\n}\n\nconst getEntity = (key: string): { [key: string]: string } => {\n  const cache = loadAddressCache()\n  return typeof cache[key] === \"object\" ? cache[key] : {}\n}\n\nexport const storeAddressInLocalCache = ({\n  hostname,\n  anchor,\n  accountId,\n  address,\n  network,\n}: CreateAddressArg) => {\n  const cache = loadAddressCache()\n  const key = getKey({ hostname, anchor, accountId })\n  const existing = getEntity(key)\n  localStorage.setItem(\n    STORAGE_KEY,\n    JSON.stringify({ ...cache, [key]: { ...existing, [network]: address } }),\n  )\n}\n\nexport const readAddressFromLocalCache = ({\n  accountId,\n  anchor,\n  hostname,\n  network,\n}: ReadAddressArg): string | undefined => {\n  const key = getKey({ hostname, accountId, anchor })\n  const entity = getEntity(key)\n  return entity[network]\n}\n","import {\n  storeAddressInLocalCache,\n  readAddressFromLocalCache,\n} from \"@nfid/client-db\"\nimport {\n  replaceActorIdentity,\n  ecdsaSigner,\n  ethereumAsset,\n} from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\n\nexport const getEthAddress = async (anchor: number) => {\n  const hostname = \"nfid.one\"\n  const accountId = \"0\"\n\n  const cachedAddress = readAddressFromLocalCache({\n    accountId: accountId,\n    hostname: hostname,\n    anchor: BigInt(anchor),\n    network: \"ETH\",\n  })\n\n  if (cachedAddress) return cachedAddress\n\n  const identity = await getWalletDelegation(anchor, hostname, accountId)\n  replaceActorIdentity(ecdsaSigner, identity)\n\n  const address = await ethereumAsset.getAddress(identity)\n\n  !cachedAddress &&\n    storeAddressInLocalCache({\n      address,\n      accountId,\n      hostname,\n      anchor: BigInt(anchor),\n      network: \"ETH\",\n    })\n\n  return address\n}\n","import useSWR from \"swr\"\n\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\n\nimport { getEthAddress } from \"../get-eth-address\"\n\nexport const useEthAddress = () => {\n  const { profile } = useProfile()\n  const { data: address, ...rest } = useSWR(\n    profile?.anchor ? [profile.anchor] : null,\n    ([anchor]) => getEthAddress(anchor),\n  )\n\n  return { address, ...rest }\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { fromHexString, principalToAddress } from \"ictool\"\nimport { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { getAccounts } from \"src/features/fungable-token/btc/get-btc\"\nimport { getAccountsMatic } from \"src/features/fungable-token/matic/get-matic\"\n\nimport { Account, Balance, PrincipalAccount, Wallet } from \"@nfid/integration\"\nimport { getBalance as getICPBalance } from \"@nfid/integration\"\nimport { getDIP20Balance, TokenMetadata } from \"@nfid/integration/token/dip-20\"\n\nimport { getEthBalance } from \"./eth/get-eth-balance\"\n\ntype FetchBalanceArgs = {\n  principals: PrincipalAccount[]\n  dip20Token: TokenMetadata[]\n  erc20: TokenBalanceSheet[]\n  erc20Polygon: TokenBalanceSheet[]\n}\n\nexport type Token = string\n\nexport type TokenBalance = {\n  [token: Token]: Balance\n}\n\nexport type AccountBalance = {\n  principal: Principal\n  principalId: string\n  account: Account\n  balance: TokenBalance\n  address?: string\n  vaultId?: bigint\n  vaultName?: string\n}\n\nexport async function fetchBalances({\n  principals,\n  dip20Token,\n  erc20,\n  erc20Polygon,\n}: FetchBalanceArgs): Promise<AccountBalance[]> {\n  return await Promise.all(\n    principals.map(async ({ principal, account }) => {\n      const token = await Promise.all<TokenBalance>([\n        // mapping over this static list only to keep the same shape as the dip20Token\n        ...[\"ICP\"].map(async (token) => ({\n          [token]: await getICPBalance(principalToAddress(principal)),\n        })),\n        ...[\"ETH\"].map(async (token) => ({\n          [token]: (await getEthBalance()).tokenBalance,\n        })),\n        ...[\"BTC\"].map(async (token) => ({\n          [token]: (await getAccounts()).tokenBalance,\n        })),\n        ...[\"MATIC\"].map(async (token) => ({\n          [token]: (await getAccountsMatic()).tokenBalance,\n        })),\n        ...dip20Token.map(async ({ symbol: token, canisterId }) => ({\n          [token]: await getDIP20Balance({\n            canisterId,\n            principalId: principal.toText(),\n          }),\n        })),\n        ...erc20.map(async (token) => ({\n          [token.token]: token.tokenBalance,\n        })),\n        ...erc20Polygon.map(async (token) => ({\n          [token.token]: token.tokenBalance,\n        })),\n      ])\n\n      return {\n        principal,\n        principalId: principal.toText(),\n        account,\n        // pulling only token key value pairs and drop array specific\n        // properties from the result to keep clean return interface\n        balance: token.reduce((acc, cur) => ({ ...acc, ...cur }), {}),\n      }\n    }),\n  )\n}\n\nexport async function fetchVaultsWalletsBalances(\n  wallets: Wallet[],\n): Promise<AccountBalance[]> {\n  return await Promise.all(\n    wallets.map(async (wallet) => {\n      const principal = Principal.fromText(VAULT_CANISTER_ID)\n\n      const address = principalToAddress(principal, fromHexString(wallet.uid))\n      const balance = await getICPBalance(address)\n\n      return {\n        principal: principal,\n        account: {\n          domain: \"nfid.vaults\",\n          label: wallet.name ?? \"\",\n          accountId: wallet.uid,\n        },\n        principalId: principal.toText(),\n        address: address,\n        balance: { ICP: balance },\n        vaultId: wallet?.vaultId,\n        vaultName: wallet?.vaultName,\n      }\n    }),\n  )\n}\n\nexport async function fetchVaultWalletsBalances(\n  wallets: Wallet[],\n): Promise<Wallet[]> {\n  return await Promise.all(\n    wallets.map(async (wallet) => {\n      const principal = Principal.fromText(VAULT_CANISTER_ID)\n      const balance = await getICPBalance(\n        principalToAddress(principal, fromHexString(wallet.uid)),\n      )\n\n      return {\n        ...wallet,\n        address: principalToAddress(principal, fromHexString(wallet.uid)),\n        balance: { ICP: balance },\n      }\n    }),\n  )\n}\n","import { useErc20 } from \"src/features/fungable-token/erc-20/hooks/use-erc-20\"\nimport { useErc20Polygon } from \"src/features/fungable-token/erc-20/hooks/use-erc-20-polygon\"\nimport useSWR from \"swr\"\n\nimport { fetchBalances } from \"frontend/features/fungable-token/fetch-balances\"\nimport { useAllPrincipals } from \"frontend/integration/internet-identity/queries\"\n\nimport { useAllDip20Token } from \"../../dip-20/hooks/use-all-token-meta\"\n\nexport const useUserBalances = () => {\n  const { principals } = useAllPrincipals()\n  const { token: dip20Token } = useAllDip20Token()\n  const { erc20 } = useErc20()\n  const { erc20: erc20Polygon } = useErc20Polygon()\n  const {\n    data: balances,\n    isValidating: isLoading,\n    mutate: refreshBalances,\n  } = useSWR(\n    dip20Token && principals && erc20 && erc20Polygon\n      ? [principals, dip20Token, erc20, erc20Polygon, `AllBalanceRaw`]\n      : null,\n    async ([principals, dip20Token]) => {\n      console.debug(\"AllBalanceRaw\", { principals, dip20Token, erc20 })\n      return await fetchBalances({\n        principals,\n        dip20Token,\n        erc20: erc20 ? erc20 : [],\n        erc20Polygon: erc20Polygon ? erc20Polygon : [],\n      })\n    },\n    { dedupingInterval: 30_000, refreshInterval: 60_000 },\n  )\n\n  return { balances: balances, isLoading, refreshBalances }\n}\n","import useSWR from \"swr\"\n\nimport { WALLET_SESSION_TTL_1_MIN_IN_MS } from \"@nfid/config\"\nimport { replaceActorIdentity, vault } from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\n\nexport const useVaultDelegation = (\n  userNumber?: number,\n  hostName?: string,\n  personaId?: string,\n) => {\n  return useSWR(\n    userNumber ? [userNumber, hostName, personaId] : null,\n    ([userNumber, hostName, personaId]) =>\n      getWalletDelegation(userNumber, hostName, personaId),\n    {\n      refreshInterval: WALLET_SESSION_TTL_1_MIN_IN_MS,\n      onSuccess: async (data) => {\n        if (data) await replaceActorIdentity(vault, data)\n        return data\n      },\n    },\n  )\n}\n","import React from \"react\"\nimport useSWR from \"swr\"\n\nimport { Application } from \"@nfid/integration\"\n\nimport { mapApplicationAccounts } from \"frontend/apps/identity-manager/profile/applications/utils\"\n\nimport { fetchAccounts, fetchApplications, fetchProfile } from \".\"\n\nexport function useAccounts() {\n  const {\n    data: accounts,\n    isValidating: isLoading,\n    error,\n  } = useSWR(`accounts`, fetchAccounts)\n  return { accounts, isLoading, error }\n}\n\nexport function useProfile() {\n  const {\n    data,\n    error,\n    mutate: refreshProfile,\n  } = useSWR(\"account/fetch\", fetchProfile, {\n    dedupingInterval: 60_000,\n    focusThrottleInterval: 60_000,\n  })\n  return {\n    isLoading: !data && !error,\n    refreshProfile,\n    profile: data,\n  }\n}\n\nexport function useApplicationsMeta(\n  predicate?: (application: Application) => boolean,\n) {\n  const {\n    data,\n    error,\n    mutate: refreshApplicationMeta,\n  } = useSWR(\n    [\"applications/meta\", predicate],\n    ([, predicate]) => fetchApplications(predicate),\n    {\n      dedupingInterval: 5 * 60_000,\n      focusThrottleInterval: 5 * 60_000,\n    },\n  )\n\n  return {\n    isLoading: !data && !error,\n    refreshApplicationMeta,\n    applicationsMeta: data,\n  }\n}\n\nexport const useApplicationAccounts = () => {\n  const { isLoading: isLoadingAppMeta, applicationsMeta } =\n    useApplicationsMeta()\n  const { isLoading: isLoadingProfile, profile } = useProfile()\n\n  const applicationAccounts = React.useMemo(\n    () =>\n      mapApplicationAccounts(profile?.accounts || [], applicationsMeta || []),\n    [profile?.accounts, applicationsMeta],\n  )\n\n  return {\n    isLoading: isLoadingAppMeta || isLoadingProfile,\n    applicationAccounts,\n  }\n}\n","import { Account, Application } from \"@nfid/integration\"\n\nimport { rmProto } from \"frontend/integration/identity-manager\"\nimport { getUrl } from \"frontend/ui/utils\"\n\nexport interface ApplicationAccount {\n  applicationName: string\n  accountsCount: number\n  derivationOrigin: string\n  aliasDomains: string[]\n  icon?: string\n}\n\nexport const mapApplicationAccounts = (\n  accounts: Account[],\n  applicationsMeta: Application[],\n): ApplicationAccount[] => {\n  const personasByHostname = accounts.reduce<{\n    [applicationName: string]: Array<\n      Account & { applicationName: string; icon?: string }\n    >\n  }>((acc, account) => {\n    const applicationMeta = applicationsMeta?.find(({ domain }) => {\n      return rmProto(domain) === rmProto(account.domain)\n    })\n\n    const applicationDomain = applicationMeta?.domain\n      ? getUrl(applicationMeta.domain).host\n      : getUrl(account.domain).host\n\n    const accounts = acc[applicationDomain] || []\n\n    acc[applicationDomain] = [\n      ...accounts,\n      {\n        ...account,\n        applicationName: applicationMeta?.name || applicationDomain,\n        alias: applicationMeta?.alias,\n        icon: applicationMeta?.icon,\n      },\n    ]\n\n    return acc\n  }, {})\n\n  const personaByHostnameArray = Object.entries(personasByHostname)\n    .map(([_, accounts]) => {\n      return {\n        applicationName: accounts[0].applicationName,\n        accountsCount: accounts.length,\n        derivationOrigin: accounts[0].domain,\n        icon: accounts[0].icon,\n        aliasDomains: (accounts[0].alias || []).map((a) => getUrl(a).host),\n      }\n    })\n    .sort(\n      (\n        { applicationName: applicationNameA },\n        { applicationName: applicationNameB },\n      ) => (applicationNameA < applicationNameB ? 1 : -1),\n    )\n\n  return personaByHostnameArray\n}\n","import React from \"react\"\nimport useSWRImmutable from \"swr/immutable\"\n\nimport { extendWithFixedAccounts, fetchPrincipals } from \"@nfid/integration\"\n\nimport {\n  useAccounts,\n  useApplicationsMeta,\n  useProfile,\n} from \"frontend/integration/identity-manager/queries\"\n\n/**\n * React hook to retrieve user principals.\n */\nexport const useAllPrincipals = () => {\n  const { profile } = useProfile()\n  const { accounts } = useAccounts()\n  const { applicationsMeta } = useApplicationsMeta()\n\n  const allAccounts = React.useMemo(() => {\n    return extendWithFixedAccounts(accounts, applicationsMeta)\n  }, [accounts, applicationsMeta])\n\n  const { data: principals } = useSWRImmutable(\n    profile?.anchor && allAccounts\n      ? [BigInt(profile.anchor), allAccounts]\n      : null,\n    ([anchor, allAccounts]) => fetchPrincipals(anchor, allAccounts),\n    { dedupingInterval: 60_000, refreshInterval: 60_000 },\n  )\n\n  console.debug(\"useAllPrincipals\", { principals })\n\n  return { principals }\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport React from \"react\"\nimport { useBtcAddress } from \"src/features/fungable-token/btc/hooks/use-btc-address\"\n\nimport { getWalletName } from \"@nfid/integration\"\n\nimport { useEthAddress } from \"frontend/features/fungable-token/eth/hooks/use-eth-address\"\nimport { TokenBalance } from \"frontend/features/fungable-token/fetch-balances\"\nimport { useUserBalances } from \"frontend/features/fungable-token/icp/hooks/use-user-balances\"\nimport { useAllVaultsWallets } from \"frontend/features/vaults/hooks/use-vaults-wallets-balances\"\nimport { useApplicationsMeta } from \"frontend/integration/identity-manager/queries\"\nimport { sortAlphabetic, keepStaticOrder } from \"frontend/ui/utils/sorting\"\n\nexport type Wallet = {\n  principal: Principal\n  principalId: string\n  balance: TokenBalance\n  label: string\n  accountId: string\n  domain: string\n  isVaultWallet?: boolean\n  address?: string\n  vaultId?: bigint\n  vaultName?: string\n  ethAddress?: string\n  btcAddress?: string\n}\n\nexport const useAllWallets = () => {\n  const { balances, isLoading } = useUserBalances()\n  const { balances: vaultsBalances, isLoading: isAllWalletsLoading } =\n    useAllVaultsWallets()\n  const { address } = useEthAddress()\n  const { btcAddress } = useBtcAddress()\n\n  const applications = useApplicationsMeta()\n\n  const wallets = React.useMemo(() => {\n    if (!balances || !vaultsBalances) return []\n\n    const wallets = balances\n      ?.map(({ principal, account, ...rest }) => ({\n        label: getWalletName(\n          applications.applicationsMeta ?? [],\n          account.domain,\n          account.accountId,\n        ),\n        accountId: account.accountId,\n        domain: account.domain,\n        principal,\n        address: principalToAddress(principal),\n        ethAddress: address,\n        btcAddress: btcAddress,\n        ...rest,\n      }))\n      .sort(sortAlphabetic(({ label }) => label ?? \"\"))\n      .concat(\n        vaultsBalances?.map(({ principal, account, address, ...rest }) => ({\n          label: account.label,\n          accountId: account.accountId,\n          domain: account.domain,\n          principal,\n          address: address ?? account.accountId,\n          isVaultWallet: true,\n          ethAddress: address,\n          btcAddress: btcAddress,\n          ...rest,\n        })) ?? [],\n      )\n    return keepStaticOrder<Wallet>(\n      ({ label }) => label ?? \"\",\n      [\"NFID\", \"NNS\"],\n    )(wallets || [])\n  }, [\n    address,\n    applications.applicationsMeta,\n    balances,\n    vaultsBalances,\n    btcAddress,\n  ])\n\n  return { wallets, isLoading: isLoading || isAllWalletsLoading }\n}\n","import useSWR from \"swr\"\n\nimport { getVaults, getWallets, ObjectState } from \"@nfid/integration\"\n\nimport { fetchVaultsWalletsBalances } from \"frontend/features/fungable-token/fetch-balances\"\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\n\nimport { useVaultDelegation } from \"./use-vault-delegation\"\n\nexport const useAllVaultsWallets = () => {\n  const { profile } = useProfile()\n  const { data: vaultDelegation } = useVaultDelegation(profile?.anchor)\n\n  const { data: allVaultsWallets, isLoading: isAllWalletsLoading } = useSWR(\n    vaultDelegation ? \"allVaultsWallets\" : null,\n    async () => {\n      const vaults = await getVaults()\n\n      const promisesArray = vaults?.map(async (vault) => {\n        const result = await getWallets(vault.id)\n        return result.map((wallet) => ({\n          ...wallet,\n          vaultId: vault.id,\n          vaultName: vault.name,\n        }))\n      })\n\n      return (await Promise.all(promisesArray))\n        .flat(1)\n        .filter((wallet) => wallet.state !== ObjectState.ARCHIVED)\n    },\n  )\n\n  const { data: balances, isValidating: isBalancesLoading } = useSWR(\n    allVaultsWallets ? [allVaultsWallets, `allVaultsWalletsBalances`] : null,\n    async ([allVaultsWallets]) => {\n      console.debug(\"allVaultsWalletsBalances\", { allVaultsWallets })\n      return await fetchVaultsWalletsBalances(allVaultsWallets)\n    },\n    { dedupingInterval: 30_000, refreshInterval: 60_000 },\n  )\n\n  return {\n    balances,\n    isLoading: isAllWalletsLoading || isBalancesLoading,\n  }\n}\n","import { getBtcAddress } from \"src/features/fungable-token/btc/get-btc\"\nimport useSWRImmutable from \"swr/immutable\"\n\nexport const useBtcAddress = () => {\n  const { data: btcAddress, ...rest } = useSWRImmutable(\n    \"btcAddress\",\n    getBtcAddress,\n  )\n\n  return { btcAddress, ...rest }\n}\n","import bowser from \"bowser\"\n\n// TODO: refactor to bowser plugin\nexport const getBrowser = () => {\n  const agent = window.navigator.userAgent.toLowerCase()\n  switch (true) {\n    case agent.indexOf(\"edge\") > -1:\n      return \"Edge\"\n    case agent.indexOf(\"opr\") > -1 && !!(window as any).opr:\n      return \"Opera\"\n    case agent.indexOf(\"chrome\") > -1 && !!(window as any).chrome:\n      return \"Chrome\"\n    case agent.indexOf(\"trident\") > -1:\n      return \"IE\"\n    case agent.indexOf(\"firefox\") > -1:\n      return \"Firefox\"\n    case agent.indexOf(\"safari\") > -1:\n      return \"Safari\"\n    default:\n      return \"Other\"\n  }\n}\n\nexport const getBrowserVersion = () => {\n  const browser = bowser.getParser(window.navigator.userAgent)\n\n  return browser.getBrowser().version\n}\n\nexport const getBrowserName = () => {\n  const browser = bowser.getParser(window.navigator.userAgent)\n\n  return browser.getBrowser().name\n}\n\nexport const isOdd = (num: number) => num % 2 === 1\n\nexport const getUrl = (url: string) => {\n  if (!/^(http|https):\\/\\//.test(url)) {\n    url = `${window.location.protocol}//${url}`\n  }\n\n  return new URL(url)\n}\n\n/**\n * Turn Hello World! into hello-world\n *\n * @export\n * @param {string} str\n */\nexport function slugify(str: string) {\n  return str\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, \"\")\n    .replace(/[\\s_-]+/g, \"-\")\n    .replace(/^-+|-+$/g, \"\")\n}\n","/**\n * sort alphabetically\n *\n * @param accessor - extract the value to sort by\n */\nexport const sortAlphabetic =\n  <T>(accessor: (item: T) => string) =>\n  (a: T, b: T) =>\n    accessor(a).localeCompare(accessor(b), \"en\", { sensitivity: \"base\" })\n\n/**\n * keep the order of predefined static items\n *\n * @param accessor - extract the value to sort by\n * @param staticOrder - the order of the items that should be kept static\n */\nexport const keepStaticOrder =\n  <T>(accessor: (item: T) => string, staticOrder: string[]) =>\n  (items: T[]) => {\n    const start = staticOrder\n      .map((comparator) =>\n        items.find((item) => accessor(item).includes(comparator)),\n      )\n      .filter((item: T | undefined): item is T => Boolean(item))\n    return [\n      ...start,\n      ...items.filter(\n        (item) => !start.find((i) => accessor(i) === accessor(item)),\n      ),\n    ]\n  }\n","export enum TokenStandards {\n  \"ICP\" = \"ICP\",\n  \"DIP20\" = \"DIP20\",\n  \"ETH\" = \"ETH\",\n  \"MATIC\" = \"MATIC\",\n  \"BTC\" = \"BTC\",\n  \"ERC20_ETHEREUM\" = \"ERC20_ETHEREUM\",\n  \"ERC20_POLYGON\" = \"ERC20_POLYGON\",\n}\n"],"names":["useAllDip20Token","data","token","isValidating","useSWR","getAllToken","dedupingInterval","focusThrottleInterval","console","debug","useErc20Polygon","erc20","rest","getErc20Tokens","useErc20","getEthBalance","async","profile","loadProfileFromLocalStorage","fetchProfile","delegation","getWalletDelegation","anchor","balance","ethereumAsset","undefined","address","principal","getPrincipal","toText","computeSheetForRootAccount","principalId","tokenBalance","BigInt","Number","toFixed","E8S","usdBalance","balanceinUsd","applications","NFID","accounts","accountName","appName","icon","IconPngEthereum","label","TokenStandards","blockchain","STORAGE_KEY","loadAddressCache","cache","localStorage","getItem","JSON","parse","getKey","hostname","accountId","getScope","getEntity","key","getEthAddress","cachedAddress","network","readAddressFromLocalCache","identity","replaceActorIdentity","ecdsaSigner","existing","setItem","stringify","storeAddressInLocalCache","useEthAddress","useProfile","fetchBalances","principals","dip20Token","erc20Polygon","Promise","all","map","account","getICPBalance","principalToAddress","getAccounts","getAccountsMatic","symbol","canisterId","getDIP20Balance","reduce","acc","cur","fetchVaultsWalletsBalances","wallets","Principal","VAULT_CANISTER_ID","fromHexString","wallet","uid","domain","name","ICP","vaultId","vaultName","fetchVaultWalletsBalances","useUserBalances","useAllPrincipals","balances","isLoading","mutate","refreshBalances","refreshInterval","useVaultDelegation","userNumber","hostName","personaId","WALLET_SESSION_TTL_1_MIN_IN_MS","onSuccess","vault","useAccounts","error","fetchAccounts","refreshProfile","useApplicationsMeta","predicate","refreshApplicationMeta","fetchApplications","applicationsMeta","useApplicationAccounts","isLoadingAppMeta","isLoadingProfile","applicationAccounts","React","personasByHostname","applicationMeta","find","rmProto","applicationDomain","getUrl","host","applicationName","alias","personaByHostnameArray","Object","entries","_","accountsCount","length","derivationOrigin","aliasDomains","a","sort","applicationNameA","applicationNameB","mapApplicationAccounts","allAccounts","extendWithFixedAccounts","useSWRImmutable","fetchPrincipals","useAllWallets","vaultsBalances","isAllWalletsLoading","vaultDelegation","allVaultsWallets","vaults","getVaults","promisesArray","getWallets","id","flat","filter","state","ObjectState","isBalancesLoading","useAllVaultsWallets","btcAddress","getBtcAddress","useBtcAddress","getWalletName","ethAddress","sortAlphabetic","concat","isVaultWallet","keepStaticOrder","getBrowserName","bowser","window","navigator","userAgent","getBrowser","url","test","location","protocol","URL","accessor","b","localeCompare","sensitivity","staticOrder","items","start","comparator","item","includes","Boolean","i"],"sourceRoot":""}