{"version":3,"file":"static/js/54.557734f5.chunk.js","mappings":"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","sources":["features/vaults/action-bar/index.tsx","features/vaults/hooks/use-vault-delegation.ts","features/vaults/hooks/use-vault-member.ts","features/vaults/services.ts","features/vaults/vaults-list-page/address-bar/index.tsx","features/vaults/vaults-list-page/modal-add-vault/index.tsx","features/vaults/vaults-list-page/table/table-header.tsx","features/vaults/vaults-list-page/table/table-row.tsx","features/vaults/vaults-list-page/table/index.tsx","features/vaults/vaults-list-page/index.tsx","../../../node_modules/date-fns/esm/isAfter/index.js","../../../node_modules/date-fns/esm/isBefore/index.js","../../../packages/utils/src/lib/date.ts"],"sourcesContent":["import clsx from \"clsx\"\nimport React, { ChangeEvent } from \"react\"\n\nimport { IconCmpSearch, Input } from \"@nfid-frontend/ui\"\n\nexport interface VaultActionBarProps {\n  actionButtons: JSX.Element\n  onInputChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  onInputType?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const VaultActionBar: React.FC<VaultActionBarProps> = ({\n  actionButtons,\n  onInputChange,\n  onInputType,\n}) => {\n  return (\n    <div\n      className={clsx(\n        \"flex items-center justify-between\",\n        \"bg-gray-50 p-5 rounded-t-xl sm:rounded-b-md\",\n      )}\n    >\n      <Input\n        placeholder=\"Search\"\n        icon={<IconCmpSearch className=\"w-4\" />}\n        onChange={onInputChange}\n        onKeyDown={onInputType}\n        className=\"sm:w-[350px]\"\n      />\n      {actionButtons}\n    </div>\n  )\n}\n","import useSWR from \"swr\"\n\nimport { WALLET_SESSION_TTL_1_MIN_IN_MS } from \"@nfid/config\"\nimport { replaceActorIdentity, vault } from \"@nfid/integration\"\n\nimport { getWalletDelegationAdapter } from \"frontend/integration/adapters/delegations\"\n\nexport const useVaultDelegation = () => {\n  return useSWR(\"vaultDelegation\", () => getWalletDelegationAdapter(), {\n    refreshInterval: WALLET_SESSION_TTL_1_MIN_IN_MS,\n    onSuccess: async (data) => {\n      if (data) await replaceActorIdentity(vault, data)\n      return data\n    },\n  })\n}\n","import { SignIdentity } from \"@dfinity/agent\"\nimport { principalToAddress } from \"ictool\"\nimport { useMemo } from \"react\"\n\nimport { useVaultDelegation } from \"./use-vault-delegation\"\n\nexport const useVaultMember = () => {\n  const {\n    data: UserIIDelegation,\n    isLoading,\n    isValidating,\n  } = useVaultDelegation()\n\n  const userAddress = useMemo(() => {\n    if (!UserIIDelegation) return \"\"\n\n    return principalToAddress(\n      UserIIDelegation.getPrincipal(),\n      Array(32).fill(1),\n    )\n  }, [UserIIDelegation])\n\n  return {\n    address: userAddress,\n    identity: UserIIDelegation as SignIdentity,\n    isLoading: isValidating,\n    isReady: !isLoading,\n  }\n}\n","import { getVaults, replaceActorIdentity, vault } from \"@nfid/integration\"\n\nimport { getWalletDelegationAdapter } from \"frontend/integration/adapters/delegations\"\n\n/**\n * @params vaultId: string\n * @returns vault by id\n */\nexport const getVaultById = async (id: string) => {\n  const vaults = await getVaults()\n\n  return vaults.find((vault) => vault.id === BigInt(id))\n}\n\nexport const getAllVaults = async () => {\n  const delegation = await getWalletDelegationAdapter()\n  await replaceActorIdentity(vault, delegation)\n  return await getVaults()\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { Copy, Loader } from \"@nfid-frontend/ui\"\n\nimport { CenterEllipsis } from \"frontend/ui/atoms/center-ellipsis\"\n\nimport { useVaultMember } from \"../../hooks/use-vault-member\"\n\nexport interface VaultAddressBarProps {}\n\nexport const VaultAddressBar: React.FC<VaultAddressBarProps> = () => {\n  const { address } = useVaultMember()\n\n  return (\n    <div\n      className={clsx(\n        \"p-[1.5px] bg-red-100 rounded-[13px] bg-gradient-to-r\",\n        \"from-teal-300 via-blue to-purple\",\n      )}\n    >\n      <div\n        className={clsx(\n          \"p-5 flex items-center justify-between\",\n          \"bg-white rounded-xl flex-wrap\",\n          \"sm:space-x-16 sm:px-[30px] sm:flex-nowrap\",\n        )}\n      >\n        <div>\n          <p className=\"font-semibold\">NFID vault address</p>\n          <p className=\"mt-1 text-sm\">\n            Share this identifier with vault administrators to add you as an\n            approver for vault transactions.\n          </p>\n        </div>\n        <div\n          className={clsx(\n            \"flex items-center justify-center bg-gray-100\",\n            \"space-x-6 py-3 px-4 rounded-md font-bold text-sm\",\n            \"mt-3 sm:mt-0\",\n          )}\n        >\n          {address ? (\n            <>\n              <CenterEllipsis\n                value={address ?? \"\"}\n                leadingChars={20}\n                trailingChars={3}\n              />\n              <Copy className=\"text-secondary\" value={address ?? \"\"} />\n            </>\n          ) : (\n            <Loader\n              imageClasses=\"h-5 w-5\"\n              fullscreen={false}\n              isLoading={true}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import clsx from \"clsx\"\nimport { useState } from \"react\"\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nimport {\n  IconCmpPlus,\n  Input,\n  ModalAdvanced,\n  TextArea,\n  vaultRules,\n} from \"@nfid-frontend/ui\"\nimport { registerVault, vaultsTracking } from \"@nfid/integration\"\n\ninterface VaultCreateForm {\n  vaultName: string\n  description: string\n}\n\ninterface IVaultModalCreate {\n  refetchVaults: () => void\n}\n\nexport const VaultModalCreate = ({ refetchVaults }: IVaultModalCreate) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { register, handleSubmit, formState } = useForm({\n    defaultValues: {\n      vaultName: \"\",\n      description: \"\",\n    },\n  })\n\n  React.useEffect(() => {\n    if (isModalOpen) {\n      vaultsTracking.vaultsModalOpened()\n    }\n  }, [isModalOpen])\n\n  const onVaultCreate = async ({ description, vaultName }: VaultCreateForm) => {\n    setIsLoading(true)\n    await registerVault(vaultName, description)\n    setIsLoading(false)\n    refetchVaults()\n    setIsModalOpen(false)\n    vaultsTracking.vaultCreaded()\n  }\n\n  return (\n    <ModalAdvanced\n      large\n      title={\"Add vault\"}\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", text: \"Cancel\" }}\n      primaryButton={{\n        type: \"primary\",\n        onClick: handleSubmit(onVaultCreate),\n        text: \"Create\",\n        id: \"create-vault-button\",\n      }}\n      trigger={\n        <div\n          className={clsx(\n            \"flex items-center space-x-2 font-bold text-blue-600 cursor-pointer\",\n            \"hover:opacity-50 transition-opacity\",\n          )}\n          id=\"create-vault-trigger\"\n        >\n          <IconCmpPlus className=\"w-4\" />\n          <span className=\"hidden text-sm sm:block\">Add vault</span>\n        </div>\n      }\n    >\n      <Input\n        placeholder=\"Vault name\"\n        labelText=\"Enter vault name\"\n        errorText={formState.errors.vaultName?.message}\n        {...register(\"vaultName\", {\n          required: vaultRules.errorMessages.required,\n          minLength: {\n            value: vaultRules.minLength,\n            message: vaultRules.errorMessages.length,\n          },\n        })}\n      />\n      <TextArea\n        className=\"mt-3\"\n        labelText=\"Description (optional)\"\n        placeholder=\"Differentiate the purpose of this vault from your others with an optional description about its function.\"\n        rows={4}\n        {...register(\"description\")}\n      />\n    </ModalAdvanced>\n  )\n}\n","import { TableCell, TableRow } from \"@nfid-frontend/ui\"\n\nexport const VaultsTableHeader = () => {\n  return (\n    <TableRow header>\n      <TableCell isLeft className=\"w-auto\">\n        Name\n      </TableCell>\n      <TableCell centered className=\"w-32\">\n        Wallets\n      </TableCell>\n      <TableCell centered className=\"w-32\">\n        Members\n      </TableCell>\n      <TableCell className=\"w-56\">Last activity</TableCell>\n      <TableCell isRight className=\"w-10\" />\n    </TableRow>\n  )\n}\n","import React from \"react\"\nimport { useNavigate } from \"react-router-dom\"\n\nimport { IconCmpArrowRight, TableCell, TableRow } from \"@nfid-frontend/ui\"\n\nexport interface VaultsTableRowProps {\n  name: string\n  walletsQuantity: number\n  membersQuantity: number\n  lastActivity: string\n  id: string\n}\n\nexport const VaultsTableRow: React.FC<VaultsTableRowProps> = ({\n  name,\n  walletsQuantity,\n  membersQuantity,\n  lastActivity,\n  id,\n}: VaultsTableRowProps) => {\n  const navigate = useNavigate()\n\n  return (\n    <TableRow onClick={() => navigate(`${id}`)} id={`vault_${name}`}>\n      <TableCell isLeft>{name}</TableCell>\n      <TableCell centered>{walletsQuantity}</TableCell>\n      <TableCell centered>{membersQuantity}</TableCell>\n      <TableCell>{lastActivity}</TableCell>\n      <TableCell isRight>\n        <IconCmpArrowRight className=\"ml-auto text-secondary\" />\n      </TableCell>\n    </TableRow>\n  )\n}\n","import { format } from \"date-fns\"\nimport React, { useMemo } from \"react\"\n\nimport { Table } from \"@nfid-frontend/ui\"\nimport { bigIntMillisecondsToSeconds } from \"@nfid-frontend/utils\"\nimport { Vault } from \"@nfid/integration\"\n\nimport { VaultsTableHeader } from \"./table-header\"\nimport { VaultsTableRow, VaultsTableRowProps } from \"./table-row\"\n\nexport interface VaultsTableProps {\n  vaults: Vault[]\n}\n\nexport const VaultsTable: React.FC<VaultsTableProps> = ({ vaults }) => {\n  const vaultsToRowsOptions: VaultsTableRowProps[] = useMemo(() => {\n    return vaults.map((vault) => ({\n      id: String(vault.id),\n      name: vault.name,\n      walletsQuantity: vault.wallets.length,\n      membersQuantity: vault.members.length,\n      lastActivity: format(\n        new Date(bigIntMillisecondsToSeconds(vault.modifiedDate)),\n        \"MMM dd, yyyy - hh:mm:ss aaa\",\n      ),\n    }))\n  }, [vaults])\n\n  return (\n    <Table tableHeader={<VaultsTableHeader />}>\n      {vaultsToRowsOptions.map((vault) => (\n        <VaultsTableRow {...vault} key={`vault_${vault.id}`} />\n      ))}\n    </Table>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\nimport useSWR from \"swr\"\n\nimport { EmptyCard, IconCmpVault, Loader } from \"@nfid-frontend/ui\"\nimport { vaultsTracking } from \"@nfid/integration\"\n\nimport ProfileTemplate from \"frontend/ui/templates/profile-template/Template\"\n\nimport { VaultActionBar } from \"../action-bar\"\nimport { useVaultMember } from \"../hooks/use-vault-member\"\nimport { getAllVaults } from \"../services\"\nimport { VaultAddressBar } from \"./address-bar\"\nimport { VaultModalCreate } from \"./modal-add-vault\"\nimport { VaultsTable } from \"./table\"\n\nexport interface VaultsListPageProps {}\n\nexport const VaultsListPage: React.FC<VaultsListPageProps> = () => {\n  const [searchFilter, setSearchFilter] = useState(\"\")\n  const { isReady } = useVaultMember()\n\n  const {\n    data: vaults,\n    mutate,\n    isLoading,\n    isValidating,\n  } = useSWR([isReady ? \"vaults\" : null], getAllVaults)\n\n  const filteredVaults = useMemo(() => {\n    if (!vaults) return []\n    return vaults.filter((vault) => vault.name.includes(searchFilter))\n  }, [searchFilter, vaults])\n\n  React.useEffect(() => {\n    if (!isLoading) {\n      console.debug(\"VaultsListPage\", { vaults, isLoading })\n      vaultsTracking.vaultsLoaded(vaults?.length || 0)\n    }\n  }, [vaults, isLoading])\n\n  const onFilterChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchFilter(e.target.value)\n    },\n    [],\n  )\n\n  return (\n    <ProfileTemplate pageTitle=\"Vaults\">\n      <VaultAddressBar />\n      <div className=\"border border-gray-200 rounded-xl mt-[30px]\">\n        <VaultActionBar\n          onInputChange={onFilterChange}\n          actionButtons={<VaultModalCreate refetchVaults={() => mutate()} />}\n        />\n        <div className=\"w-full px-5 overflow-x-auto\">\n          <VaultsTable vaults={filteredVaults} />\n          {!filteredVaults.length && !isLoading && !isValidating && (\n            <EmptyCard\n              className=\"h-64\"\n              icon={<IconCmpVault />}\n              description=\"Create flexible policies and multi-approver workflows to ensure control over transactions and transfers.\"\n            />\n          )}\n          <Loader\n            isLoading={isLoading || isValidating}\n            fullscreen={false}\n            imageClasses=\"w-16 mx-auto my-4\"\n          />\n        </div>\n      </div>\n    </ProfileTemplate>\n  )\n}\nexport default VaultsListPage\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import { isAfter, isBefore } from \"date-fns\"\nimport { compareDesc, parse } from \"date-fns\"\n\nexport const bigIntMillisecondsToSeconds = (date: bigint) => {\n  return Math.floor(Number(date / BigInt(10 ** 6)))\n}\n\n/**\n * Check if date is between to other dates\n * @param date Date\n * @param from Date\n * @param to Date\n * @returns boolean\n */\nexport const isDateBetween = (date: Date, from?: Date, to?: Date) => {\n  if (from && !to) return isAfter(date, from)\n  else if (!from && to) return isBefore(date, to)\n  else if (from && to) return isAfter(date, from) && isBefore(date, to)\n  return true\n}\n\nexport const sortByDate = <T extends { date: Date | string }>(\n  arr: T[],\n  dateFormat?: string,\n): T[] => {\n  return arr.sort((a, b) => {\n    const dateA = dateFormat\n      ? parse(a.date as string, dateFormat, new Date())\n      : (a.date as Date)\n    const dateB = dateFormat\n      ? parse(b.date as string, dateFormat, new Date())\n      : (b.date as Date)\n    return compareDesc(dateA, dateB)\n  })\n}\n"],"names":["VaultActionBar","actionButtons","onInputChange","onInputType","className","clsx","placeholder","icon","onChange","onKeyDown","useVaultDelegation","useSWR","getWalletDelegationAdapter","refreshInterval","WALLET_SESSION_TTL_1_MIN_IN_MS","onSuccess","async","data","replaceActorIdentity","vault","useVaultMember","UserIIDelegation","isLoading","isValidating","address","useMemo","principalToAddress","getPrincipal","Array","fill","identity","isReady","getVaultById","getVaults","find","id","BigInt","getAllVaults","delegation","VaultAddressBar","value","leadingChars","trailingChars","imageClasses","fullscreen","VaultModalCreate","refetchVaults","setIsLoading","useState","isModalOpen","setIsModalOpen","register","handleSubmit","formState","useForm","defaultValues","vaultName","description","React","vaultsTracking","large","title","isModalOpenChange","secondaryButton","type","text","primaryButton","onClick","registerVault","trigger","labelText","errorText","errors","message","required","vaultRules","minLength","rows","VaultsTableHeader","header","isLeft","centered","isRight","VaultsTableRow","name","walletsQuantity","membersQuantity","lastActivity","navigate","useNavigate","VaultsTable","vaults","vaultsToRowsOptions","map","String","wallets","length","members","format","Date","bigIntMillisecondsToSeconds","modifiedDate","tableHeader","key","VaultsListPage","searchFilter","setSearchFilter","mutate","filteredVaults","filter","includes","console","debug","onFilterChange","useCallback","e","target","pageTitle","isAfter","dirtyDate","dirtyDateToCompare","requiredArgs","arguments","date","toDate","dateToCompare","getTime","isBefore","Math","floor","Number","isDateBetween","from","to"],"sourceRoot":""}