{"version":3,"file":"static/js/359.71fce7c5.chunk.js","mappings":"0SAoBO,MAAMA,EAA0C,IAOhD,IAAD,MAPkD,UACtDC,EAAS,OACTC,EAAM,iBACNC,EAAgB,UAChBC,EAAS,UACTC,EAAS,cACTC,GACD,EACC,MAAM,SACJC,EACAC,WAAW,OAAEC,GAAQ,SACrBC,EAAQ,aACRC,IACEC,EAAAA,EAAAA,IAAoC,CACtCC,KAAM,QAYR,OATAC,EAAAA,WAAgB,KACVR,GACFI,EAAS,iBAAkB,CACzBK,KAAM,SACNC,QAASV,GAEb,GACC,CAACA,EAAeI,KAGjB,SAACO,EAAA,EAAS,CAACC,WAAS,EAACC,UAAQ,YAC3B,iBAAMlB,WAAWmB,EAAAA,EAAAA,GAAK,eAAe,UACnC,gBAAKnB,WAAWmB,EAAAA,EAAAA,GAAKC,EAAAA,GAAmB,UACtC,gBAAKpB,UAAU,2BAA0B,UACvC,gBAAKA,UAAU,yDAAwD,UACrE,gBAAKA,WAAWmB,EAAAA,EAAAA,GAAK,GAAInB,GAAW,UAClC,4BACE,SAAC,EAAAqB,GAAE,CAACrB,UAAU,OAAM,2BAEpB,gBAAKA,WAAWmB,EAAAA,EAAAA,GAAK,QAAQ,0DAI7B,SAAC,KAAQ,CACPG,KAAM,EACNC,UAAiB,OAANf,QAAM,IAANA,GAAsB,QAAhB,EAANA,EAAQgB,sBAAc,WAAhB,EAAN,EAAwBT,WAC/BT,EAAS,iBAAkB,CAC7BmB,SAAU,CACRC,OAAO,EACPX,QAAS,0CAIf,4BACE,kBACED,KAAK,WACLa,GAAG,sBACH3B,UAAU,UACV4B,SAAU3B,EACV4B,QAAS3B,KAEX,kBAAO4B,QAAQ,sBAAsB9B,UAAU,OAAM,4JAOvD,SAAC,IAAM,CACL+B,SAAO,EACPC,OAAK,EACLhC,UAAU,OACV2B,GAAG,kBACHM,QAASvB,EAAaP,GACtB+B,UAAWhC,EAAiB,sBAK9B,SAAC,IAAM,CAACE,UAAWA,kBAOrB,E,yBCvFT,MAAM+B,EAET,IAA6D,IAA5D,0BAAEC,EAAyB,wBAAEC,GAAyB,EACzD,MAAOhC,EAAeiC,IAAoBC,EAAAA,EAAAA,UAAc,OACjDrC,EAAkBsC,GAA0B3B,EAAAA,YAChD4B,IAAWA,KACVJ,IAEE,eAAEK,IAAmBC,EAAAA,EAAAA,MAErB,SAAEC,IAAaC,EAAAA,EAAAA,MACf,kBAAEC,EAAiB,UAAE1C,IAAc2C,EAAAA,EAAAA,KAEnC5C,EAAYU,EAAAA,aAChBmC,UAA8B,IAAD,EAC3B,MAAMxB,EAAiByB,EAAKzB,eAAe0B,OAErCC,EAAmB3B,EAAe4B,MAAM,KAAK,GAC7CC,GAAaC,EAAAA,EAAAA,GAAgBH,GAC7BI,EAAa/B,EAAe4B,MAAO,GAAEC,MAAe,GAE1D,IAAKA,EACH,OAAOf,EAAiB,4CAE1B,IAAIkB,EAAS,KAEb,IACElB,EAAiB,IACjBkB,QAAeV,EAAkBS,EAAYF,SACvCX,GAMR,CALE,MAAOe,GAEP,OADAC,QAAQC,MAAMF,GACPnB,EACL,wFAEJ,CAEA,GAAoB,QAAV,QAAN,EAAAkB,SAAM,aAAN,EAAQI,KACV,OAAOtB,EACL,yFAIJuB,EAAAA,GAAe,CAAElC,GAAI0B,EAAWS,aAChClB,EAASR,EAA2B,CAAEK,MAAO,CAAEY,eAAe,GAEhE,CAACP,EAAmBF,EAAUF,EAAgBN,IAGhD,OACE,SAACrC,EAAW,CACVI,UAAWA,EACXF,OAAQuC,EACRtC,iBAAkBA,EAClBG,cAAeA,EACfD,UAAWA,GACX,EAIN,G","sources":["ui/pages/recover-nfid/index.tsx","apps/authentication/recover-nfid/index.tsx"],"sourcesContent":["import clsx from \"clsx\"\nimport React from \"react\"\nimport { FieldValues, useForm } from \"react-hook-form\"\n\nimport { TextArea } from \"@nfid-frontend/ui\"\n\nimport { Button } from \"frontend/ui/atoms/button\"\nimport { CONTAINER_CLASSES } from \"frontend/ui/atoms/container\"\nimport { Loader } from \"frontend/ui/atoms/loader\"\nimport { H2 } from \"frontend/ui/atoms/typography\"\nimport { AppScreen } from \"frontend/ui/templates/app-screen/AppScreen\"\n\ninterface RecoverNFIDProps extends React.HTMLAttributes<HTMLDivElement> {\n  onRecover: (data: FieldValues) => {}\n  toggle: () => void\n  isVerifiedDomain?: boolean\n  isLoading: boolean\n  responseError?: any\n}\n\nexport const RecoverNFID: React.FC<RecoverNFIDProps> = ({\n  className,\n  toggle,\n  isVerifiedDomain,\n  onRecover,\n  isLoading,\n  responseError,\n}) => {\n  const {\n    register,\n    formState: { errors },\n    setError,\n    handleSubmit,\n  } = useForm<{ recoveryPhrase: string }>({\n    mode: \"all\",\n  })\n\n  React.useEffect(() => {\n    if (responseError) {\n      setError(\"recoveryPhrase\", {\n        type: \"manual\",\n        message: responseError,\n      })\n    }\n  }, [responseError, setError])\n\n  return (\n    <AppScreen isFocused showLogo>\n      <main className={clsx(\"flex flex-1\")}>\n        <div className={clsx(CONTAINER_CLASSES)}>\n          <div className=\"grid h-full grid-cols-12\">\n            <div className=\"flex flex-col col-span-12 md:col-span-11 lg:col-span-7\">\n              <div className={clsx(\"\", className)}>\n                <div>\n                  <H2 className=\"mb-4\">Recover NFID</H2>\n\n                  <div className={clsx(\"mb-6\")}>\n                    Paste your recovery phrase here to proceed:\n                  </div>\n\n                  <TextArea\n                    rows={6}\n                    errorText={errors?.recoveryPhrase?.message}\n                    {...register(\"recoveryPhrase\", {\n                      required: {\n                        value: true,\n                        message: \"Please enter your Recovery Phrase\",\n                      },\n                    })}\n                  />\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      id=\"has-verified-domain\"\n                      className=\"rounded\"\n                      onChange={toggle}\n                      checked={isVerifiedDomain}\n                    />\n                    <label htmlFor=\"has-verified-domain\" className=\"ml-2\">\n                      I got to this screen by first going to https://nfid.one,\n                      being redirected to this landing page, and following the\n                      link to recover my NFID.\n                    </label>\n                  </div>\n\n                  <Button\n                    primary\n                    large\n                    className=\"my-4\"\n                    id=\"recovery-button\"\n                    onClick={handleSubmit(onRecover)}\n                    disabled={!isVerifiedDomain}\n                  >\n                    Recover\n                  </Button>\n\n                  <Loader isLoading={isLoading} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </AppScreen>\n  )\n}\n","import * as Sentry from \"@sentry/browser\"\nimport React, { useState } from \"react\"\nimport { FieldValues } from \"react-hook-form\"\n\nimport { useAccount } from \"frontend/integration/identity-manager/account/hooks\"\nimport { parseUserNumber } from \"frontend/integration/internet-identity/userNumber\"\nimport { RecoverNFID } from \"frontend/ui/pages/recover-nfid\"\nimport { useNFIDNavigate } from \"frontend/ui/utils/use-nfid-navigate\"\n\nimport { useAuthentication } from \"../use-authentication\"\n\ninterface RestoreAccessPointRecoveryPhraseProps {\n  registerDeviceDeciderPath: string\n  isVerifiedDomainDefault?: boolean\n}\n\nexport const AppScreenRecoverNFID: React.FC<\n  RestoreAccessPointRecoveryPhraseProps\n> = ({ registerDeviceDeciderPath, isVerifiedDomainDefault }) => {\n  const [responseError, setResponseError] = useState<any>(null)\n  const [isVerifiedDomain, toggleIsVerifiedDomain] = React.useReducer(\n    (state) => !state,\n    !!isVerifiedDomainDefault,\n  )\n  const { refreshProfile } = useAccount()\n\n  const { navigate } = useNFIDNavigate()\n  const { loginWithRecovery, isLoading } = useAuthentication()\n\n  const onRecover = React.useCallback(\n    async (data: FieldValues) => {\n      const recoveryPhrase = data.recoveryPhrase.trim()\n\n      const stringUserNumber = recoveryPhrase.split(\" \")[0]\n      const userNumber = parseUserNumber(stringUserNumber)\n      const seedPhrase = recoveryPhrase.split(`${userNumber} `)[1]\n\n      if (!userNumber) {\n        return setResponseError(\"Invalid Recovery Phrase (missing Anchor)\")\n      }\n      let result = null\n\n      try {\n        setResponseError(\"\")\n        result = await loginWithRecovery(seedPhrase, userNumber)\n        await refreshProfile()\n      } catch (e) {\n        console.error(e)\n        return setResponseError(\n          \"We cannot restore your NFID with this recovery phrase. Please check it and try again.\",\n        )\n      }\n\n      if (result?.tag !== \"ok\") {\n        return setResponseError(\n          \"We cannot restore your NFID with this recovery phrase. Please check it and try again.\",\n        )\n      }\n\n      Sentry.setUser({ id: userNumber.toString() })\n      navigate(registerDeviceDeciderPath, { state: { userNumber } })\n    },\n    [loginWithRecovery, navigate, refreshProfile, registerDeviceDeciderPath],\n  )\n\n  return (\n    <RecoverNFID\n      onRecover={onRecover}\n      toggle={toggleIsVerifiedDomain}\n      isVerifiedDomain={isVerifiedDomain}\n      responseError={responseError}\n      isLoading={isLoading}\n    />\n  )\n}\n\nexport default AppScreenRecoverNFID\n"],"names":["RecoverNFID","className","toggle","isVerifiedDomain","onRecover","isLoading","responseError","register","formState","errors","setError","handleSubmit","useForm","mode","React","type","message","AppScreen","isFocused","showLogo","clsx","CONTAINER_CLASSES","H2","rows","errorText","recoveryPhrase","required","value","id","onChange","checked","htmlFor","primary","large","onClick","disabled","AppScreenRecoverNFID","registerDeviceDeciderPath","isVerifiedDomainDefault","setResponseError","useState","toggleIsVerifiedDomain","state","refreshProfile","useAccount","navigate","useNFIDNavigate","loginWithRecovery","useAuthentication","async","data","trim","stringUserNumber","split","userNumber","parseUserNumber","seedPhrase","result","e","console","error","tag","Sentry","toString"],"sourceRoot":""}