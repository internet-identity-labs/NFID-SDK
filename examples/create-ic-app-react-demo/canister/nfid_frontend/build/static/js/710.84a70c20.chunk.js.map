{"version":3,"file":"static/js/710.84a70c20.chunk.js","mappings":"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","sources":["ui/pages/request-accounts/nfid.svg","ui/pages/request-accounts/index.tsx","apps/identity-manager/request-accounts/index.tsx","state/machines/wallet/request-accounts.ts","coordination/wallet/request-accounts.tsx","features/fungable-token/dip-20/hooks/use-all-token-meta.ts","features/fungable-token/fetch-balances.ts","features/fungable-token/icp/hooks/use-user-balances.ts","features/vaults/hooks/use-vault-delegation.ts","integration/adapters/delegations.ts","integration/facade/wallet.ts","integration/internet-identity/queries.ts","integration/wallet/hooks/use-all-wallets.ts","features/vaults/hooks/use-vaults-wallets-balances.ts","ui/utils/sorting.ts","ui/utils/use-timer.ts","../../../packages/integration/src/lib/token/dip-20/actor.ts","../../../packages/integration/src/lib/token/dip-20/get-metadata.ts","../../../packages/integration/src/lib/token/dip-20/get-all-token.ts","../../../packages/integration/src/lib/token/dip-20/get-balance.ts","../../../packages/integration/src/lib/token/dip-20/transfer.ts","../../../packages/integration/src/lib/token/dip-20/dip-20.ts"],"sourcesContent":["var _path, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgNfid(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 25,\n    viewBox: \"0 0 25 25\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6.29434 1.77834C6.62025 1.7436 6.85629 1.45123 6.82154 1.12532C6.78679 0.799406 6.49442 0.563373 6.16851 0.59812L4.95651 0.72734C4.33556 0.79354 3.83752 0.846635 3.43304 0.919969C3.01636 0.995515 2.65925 1.09878 2.32758 1.28466C1.78908 1.58645 1.34265 2.02868 1.036 2.56423C0.847098 2.89414 0.740737 3.25016 0.661669 3.66585C0.584928 4.06931 0.52769 4.56636 0.456341 5.18596L0.453267 5.21265L0.33426 6.39617C0.301469 6.72229 0.539252 7.01324 0.865364 7.04603C1.19148 7.07882 1.48243 6.84103 1.51522 6.51492L1.63337 5.33993C1.70764 4.69502 1.76018 4.24249 1.82768 3.88764C1.89392 3.53938 1.96786 3.32542 2.06602 3.15399C2.26579 2.80509 2.55673 2.51683 2.90784 2.32006C3.08045 2.22333 3.29544 2.15118 3.64478 2.08784C4.00147 2.02317 4.45625 1.97432 5.10475 1.90517L6.29434 1.77834ZM17.8415 1.12532C17.8068 1.45123 18.0428 1.7436 18.3687 1.77834L19.5583 1.90517C20.2068 1.97432 20.6616 2.02317 21.0183 2.08784C21.3676 2.15118 21.5826 2.22333 21.7552 2.32006C22.1063 2.51683 22.3973 2.80509 22.597 3.15399C22.6952 3.32542 22.7691 3.53938 22.8354 3.88764C22.9029 4.24249 22.9554 4.69502 23.0297 5.33993L23.1478 6.51492C23.1806 6.84103 23.4716 7.07882 23.7977 7.04603C24.1238 7.01324 24.3616 6.72229 24.3288 6.39617L24.2098 5.21265L24.2067 5.18596L24.2067 5.18589L24.2067 5.18578L24.2067 5.18558C24.1353 4.56616 24.0781 4.06923 24.0014 3.66585C23.9223 3.25016 23.816 2.89414 23.6271 2.56423C23.3204 2.02868 22.874 1.58645 22.3355 1.28466C22.0038 1.09878 21.6467 0.995515 21.23 0.919969C20.8255 0.846635 20.3275 0.79354 19.7065 0.72734L18.4945 0.59812C18.1686 0.563373 17.8763 0.799406 17.8415 1.12532ZM17.8415 24.0641C17.8068 23.7382 18.0428 23.4459 18.3687 23.4111L19.5583 23.2843C20.2068 23.2151 20.6616 23.1663 21.0183 23.1016C21.3676 23.0383 21.5826 22.9661 21.7552 22.8694C22.1063 22.6726 22.3973 22.3844 22.597 22.0355C22.6952 21.864 22.7691 21.6501 22.8354 21.3018C22.9029 20.947 22.9554 20.4944 23.0297 19.8495L23.1478 18.6745C23.1806 18.3484 23.4716 18.1106 23.7977 18.1434C24.1238 18.1762 24.3616 18.4672 24.3288 18.7933L24.2098 19.9768L24.2067 20.0035L24.2067 20.0036L24.2067 20.0037C24.1354 20.6232 24.0781 21.1202 24.0014 21.5236C23.9223 21.9393 23.816 22.2953 23.6271 22.6252C23.3204 23.1608 22.874 23.603 22.3355 23.9048C22.0038 24.0907 21.6467 24.1939 21.23 24.2695C20.8255 24.3428 20.3275 24.3959 19.7065 24.4621L18.4945 24.5913C18.1686 24.6261 17.8763 24.39 17.8415 24.0641ZM6.82154 24.0641C6.85629 23.7382 6.62025 23.4459 6.29434 23.4111L5.10475 23.2843C4.45625 23.2151 4.00147 23.1663 3.64478 23.1016C3.29544 23.0383 3.08045 22.9661 2.90784 22.8694C2.55673 22.6726 2.26579 22.3844 2.06602 22.0355C1.96786 21.864 1.89392 21.6501 1.82768 21.3018C1.76018 20.947 1.70764 20.4944 1.63337 19.8495L1.51522 18.6745C1.48243 18.3484 1.19148 18.1106 0.865364 18.1434C0.539252 18.1762 0.301469 18.4672 0.33426 18.7933L0.453267 19.9768L0.456341 20.0035C0.52769 20.6231 0.584928 21.1201 0.661669 21.5236C0.740737 21.9393 0.847098 22.2953 1.036 22.6252C1.34265 23.1608 1.78908 23.603 2.32758 23.9048C2.65925 24.0907 3.01636 24.1939 3.43304 24.2695C3.83752 24.3428 4.33556 24.3959 4.95651 24.4621L6.16851 24.5913C6.49442 24.6261 6.78679 24.39 6.82154 24.0641ZM6.98626 8.01901C6.43398 8.01901 5.98626 8.46673 5.98626 9.01901V16.3454C5.98626 16.8977 6.43398 17.3454 6.98626 17.3454H7.6243C8.17659 17.3454 8.6243 16.8977 8.6243 16.3454V9.01901C8.6243 8.46673 8.17659 8.01901 7.6243 8.01901H6.98626ZM11.3575 8.01901C10.8052 8.01901 10.3575 8.46673 10.3575 9.01901V16.3454C10.3575 16.8977 10.8052 17.3454 11.3575 17.3454H14.7675C15.789 17.3454 16.695 17.1544 17.4855 16.7725C18.276 16.3906 18.8889 15.8488 19.3241 15.1471C19.7594 14.4453 19.977 13.6237 19.977 12.6822C19.977 11.7407 19.7594 10.9191 19.3241 10.2174C18.8889 9.51568 18.276 8.97386 17.4855 8.59192C16.695 8.20998 15.789 8.01901 14.7675 8.01901H11.3575ZM16.5795 14.5608C16.0999 15.0138 15.4603 15.2403 14.6609 15.2403H13.2955C13.1298 15.2403 12.9955 15.106 12.9955 14.9403V10.4241C12.9955 10.2584 13.1298 10.1241 13.2955 10.1241H14.6609C15.4603 10.1241 16.0999 10.3506 16.5795 10.8036C17.068 11.2566 17.3123 11.8828 17.3123 12.6822C17.3123 13.4816 17.068 14.1078 16.5795 14.5608Z\",\n    fill: \"url(#paint0_linear_29161_36359)\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_29161_36359\",\n    x1: 6.10064,\n    y1: 8.58179,\n    x2: 14.339,\n    y2: 20.5563,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#CC5CDC\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.244792,\n    stopColor: \"#7B66FF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.520833,\n    stopColor: \"#1F8AF0\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.760417,\n    stopColor: \"#00D1FF\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#3DEDD7\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNfid);\nexport default __webpack_public_path__ + \"static/media/nfid.2546d441d77e8702acfb8302ccf464ab.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from \"clsx\"\n\nimport { IOption, DropdownSelect, SDKApplicationMeta } from \"@nfid-frontend/ui\"\nimport { ScreenResponsive } from \"@nfid-frontend/ui\"\n\n\nimport { Button } from \"frontend/ui/atoms/button\"\nimport { BlurredLoader } from \"frontend/ui/molecules/blurred-loader\"\n\nimport NFIDLogo from \"./nfid.svg\"\n\nexport interface SDKRequestAccountsPageProps {\n  applicationName?: string\n  applicationLogo?: string\n  onReject: () => void\n  onApprove: () => void\n  accountsOptions: IOption[]\n  selectedAccounts: string[]\n  setSelectedAccounts: (value: string[]) => void\n  timer: number | boolean\n}\n\nexport const SDKRequestAccountsPage: React.FC<SDKRequestAccountsPageProps> = ({\n  applicationLogo,\n  applicationName,\n  onReject,\n  onApprove,\n  accountsOptions,\n  selectedAccounts,\n  setSelectedAccounts,\n  timer = false,\n}) => {\n  return (\n    <ScreenResponsive frameLabel=\"Approve with NFID\">\n      <BlurredLoader isLoading={!accountsOptions.length}>\n        <div\n          className={clsx(\n            \"flex flex-col flex-grow lg:justify-between\",\n            \"h-full\",\n          )}\n        >\n          <div>\n            <SDKApplicationMeta\n              applicationLogo={applicationLogo}\n              title={applicationName}\n              subTitle=\"wants to perform the following actions:\"\n            />\n            <div\n              className={clsx(\"border border-gray-300 rounded-md\", \"p-3 mt-4\")}\n            >\n              <div className=\"flex space-x-2.5 mb-2.5\">\n                <div\n                  className={clsx(\n                    \"w-10 h-10 bg-gray-50 rounded-full\",\n                    \"flex items-center justify-center\",\n                    \"relative\",\n                  )}\n                >\n                  <img className=\"w-6\" src={NFIDLogo} alt=\"nfid\" />\n                </div>\n                <div>\n                  <p className=\"text-sm font-semibold\">\n                    View your Web3 balance\n                  </p>\n                  <p className=\"text-xs text-secondary\">\n                    This site will see tokens and history from your selected\n                    accounts\n                  </p>\n                </div>\n              </div>\n              <DropdownSelect\n                disabled={timer !== -1}\n                isSearch\n                options={accountsOptions}\n                selectedValues={selectedAccounts}\n                setSelectedValues={setSelectedAccounts}\n                placeholder=\"None selected - connect anonymously\"\n                showSelectAllOption\n              />\n            </div>\n          </div>\n          <div\n            className={clsx(\n              \"grid grid-cols-2 gap-5 mt-5 lg:mt-32\",\n              timer !== -1 && \"hidden\",\n            )}\n          >\n            <Button stroke onClick={onReject}>\n              Reject\n            </Button>\n            <Button primary onClick={onApprove}>\n              Approve\n            </Button>\n          </div>\n\n          <Button\n            className={clsx(\"mt-5 lg:mt-32\", timer === -1 && \"hidden\")}\n            block\n            primary\n          >\n            Success! Closing in {timer}\n          </Button>\n        </div>\n      </BlurredLoader>\n    </ScreenResponsive>\n  )\n}\n","import { principalToAddress } from \"ictool\"\nimport { useCallback, useMemo, useState } from \"react\"\n\nimport { IOption } from \"@nfid-frontend/ui\"\nimport { toPresentation } from \"@nfid/integration/token/icp\"\n\nimport { useAllWallets } from \"frontend/integration/wallet/hooks/use-all-wallets\"\nimport { SDKRequestAccountsPage } from \"frontend/ui/pages/request-accounts\"\nimport { useTimer } from \"frontend/ui/utils/use-timer\"\n\ninterface IRequestAccounts {\n  applicationName?: string\n  applicationLogo?: string\n  onSuccess: (accounts: string[]) => void\n}\n\nexport const RequestAccounts = ({\n  applicationLogo,\n  applicationName,\n  onSuccess,\n}: IRequestAccounts) => {\n  const [selectedAccounts, setSelectedAccounts] = useState<string[]>([])\n  const { wallets } = useAllWallets()\n  const { counter, setCounter } = useTimer({ defaultCounter: -1 })\n\n  const accountsOptions: IOption[] | undefined = useMemo(() => {\n    return wallets?.map((wallet) => ({\n      label: wallet.label ?? \"\",\n      value: principalToAddress(wallet.principal) ?? \"\",\n      afterLabel: `${toPresentation(wallet.balance[\"ICP\"])} ICP`,\n    }))\n  }, [wallets])\n\n  const onApprove = useCallback(() => {\n    setCounter(5)\n    setTimeout(() => {\n      return onSuccess(selectedAccounts)\n    }, 5000)\n  }, [setCounter, onSuccess, selectedAccounts])\n\n  return (\n    <SDKRequestAccountsPage\n      applicationName={applicationName}\n      applicationLogo={applicationLogo}\n      onReject={() => window.close()}\n      onApprove={onApprove}\n      accountsOptions={accountsOptions ?? []}\n      selectedAccounts={selectedAccounts}\n      setSelectedAccounts={setSelectedAccounts}\n      timer={counter}\n    />\n  )\n}\n","import { ActorRefFrom, assign, createMachine } from \"xstate\"\n\nimport { registerRequestAccountsHandler } from \"@nfid/wallet\"\n\nimport AuthenticationMachine from \"frontend/features/authentication/root/root-machine\"\nimport { AuthSession } from \"frontend/state/authentication\"\nimport { AuthorizingAppMeta } from \"frontend/state/authorization\"\n\ninterface Context {\n  appMeta?: AuthorizingAppMeta\n  authSession?: AuthSession\n  requestAccounts?: string\n  isLoading?: boolean\n  accounts?: string[]\n}\n\nlet accounts: string[] | undefined = undefined\n\n// Definition of events usable in the machine.\ntype Events =\n  | {\n      type: \"done.invoke.AuthenticationMachine\"\n      data: AuthSession\n    }\n  | {\n      type: \"done.invoke.registerRequestAccountsHandler\"\n      data: string\n    }\n  | { type: \"SUCCESS\"; accounts: string[] }\n  | { type: \"REJECT\" }\n  | { type: \"END\" }\n\n/** @xstate-layout N4IgpgJg5mDOIC5QCUwEcCucAuBBAxvgPYYB22sACgE5EBuAlhGNQHSoCGEAngMQRFSYVg1J0iAa2HUwUBrGwtUmHAWJkKACQ6kIAGxYBtAAwBdRKAAORWA2wNBFkAA9EAFgDMAdlYBOf75evh6+AGweAEweABwArAA0INyIwayxAIzpXh7pwemhGR4AvkWJylgKaiTkVLSMzGy4GNgAFmDkDPgcivyCwqLiUqxNre32XfaCALIc+C2iYCbmSCDWtpOkTq4ImdERrOnRXrHGob7psb5uEdGJyQipGVk5eQXpxaUg5aqE1RQ09CYLHY6AqeF+GlgvAAygBVADC8IAotDoUsnGs7A5NittvlPKxjl5oulrmFYns3HcUh40plsrkcm8Pp9SERmPAVt9KhCagD6sDODwMTYsY5ce4ItSEHs-AErjEIp49h8yqCfuo+XUgY1mm0OhMwCL1titohiaEDkc3F4lekIr5onFpbL5QrKYrVV91TzNf9tQ0QSpfX9OVZRRszTs3KF0qw3AEvEnoiFDlSkoh6WljDmMm5Kflom4Smrg+C-bVAYGkbpjWKcaA8UnLcFjh5jG4Y7EKdKszmc+9zl57bavdzy6H+Tq65GJQgALShaWLkolIA */\nconst RequestAccountsMachine = createMachine(\n  {\n    context: {} as Context,\n    tsTypes: {} as import(\"./request-accounts.typegen\").Typegen0,\n    schema: { events: {} as Events },\n    initial: \"Ready\",\n    states: {\n      Ready: {\n        invoke: {\n          src: \"registerRequestAccountsHandler\",\n          id: \"registerRequestAccountsHandler\",\n          onDone: [\n            {\n              target: \"Authenticate\",\n              actions: \"assignRequestAccountsRequest\",\n            },\n          ],\n        },\n      },\n      Authenticate: {\n        invoke: {\n          src: \"AuthenticationMachine\",\n          id: \"AuthenticationMachine\",\n          onDone: [\n            {\n              target: \"RequestAccounts\",\n              actions: \"assignAuthSession\",\n            },\n          ],\n          data: (context) => ({\n            appMeta: context.appMeta,\n          }),\n        },\n      },\n      RequestAccounts: {\n        on: {\n          SUCCESS: {\n            target: \"Confirm\",\n            actions: \"assignAccounts\",\n          },\n        },\n      },\n      Confirm: {\n        onEntry: \"setAccounts\",\n      },\n      End: {\n        type: \"final\",\n      },\n    },\n    id: \"RequestAccountsProvider\",\n  },\n  {\n    actions: {\n      assignAuthSession: assign((_, event) => ({\n        authSession: event.data,\n      })),\n      assignRequestAccountsRequest: assign({\n        requestAccounts: (_, event) => event.data,\n      }),\n      assignAccounts: assign({\n        accounts: (_, event) => event.accounts,\n      }),\n      setAccounts: (data) => {\n        console.log({ accounts, data })\n        accounts = data.accounts\n      },\n    },\n    services: {\n      async registerRequestAccountsHandler() {\n        const params = await registerRequestAccountsHandler(() => {\n          return new Promise((resolve) => {\n            setInterval(() => {\n              if (accounts) {\n                resolve({\n                  status: \"SUCCESS\",\n                  accounts: accounts,\n                })\n              }\n            }, 1000)\n          })\n        })\n        console.debug(\"registerRequestAccountsHandler\", { params })\n        return params\n      },\n      AuthenticationMachine,\n    },\n    guards: {},\n  },\n)\n\nexport default RequestAccountsMachine\n\nexport type RequestAccountsMachineActor = ActorRefFrom<\n  typeof RequestAccountsMachine\n>\n\nexport type RequestAccountsMachineType = typeof RequestAccountsMachine\n","import { useMachine } from \"@xstate/react\"\nimport { useEffect } from \"react\"\nimport { useSearchParams } from \"react-router-dom\"\n\nimport { ScreenResponsive } from \"@nfid-frontend/ui\"\n\nimport { RequestAccounts } from \"frontend/apps/identity-manager/request-accounts\"\nimport AuthenticationCoordinator from \"frontend/features/authentication/root/coordinator\"\nimport { AuthenticationMachineActor } from \"frontend/features/authentication/root/root-machine\"\nimport RequestAccountsMachine from \"frontend/state/machines/wallet/request-accounts\"\nimport { BlurredLoader } from \"frontend/ui/molecules/blurred-loader\"\n\nexport default function RequestAccountsCoordinator() {\n  const [searchParams] = useSearchParams()\n  const applicationName = searchParams.get(\"applicationName\")\n  const applicationLogo = searchParams.get(\"applicationLogo\")\n\n  const [state, send] = useMachine(\n    RequestAccountsMachine.withConfig(\n      {},\n      {\n        appMeta: { name: applicationName || \"\", logo: applicationLogo || \"\" },\n      },\n    ),\n  )\n\n  useEffect(() => {\n    console.debug(\"RequestAccountsCoordinator\", { state: state.value })\n  }, [state])\n\n  switch (true) {\n    case state.matches(\"Ready\"):\n      return (\n        <BlurredLoader\n          isLoading\n          loadingMessage={`Connecting to ${\n            state.context?.appMeta?.name ?? \"the application\"\n          }`}\n        />\n      )\n    case state.matches(\"Authenticate\"):\n      return (\n        <ScreenResponsive>\n          <AuthenticationCoordinator\n            actor={\n              state.children.AuthenticationMachine as AuthenticationMachineActor\n            }\n          />\n        </ScreenResponsive>\n      )\n    case state.matches(\"RequestAccounts\"):\n      return (\n        <RequestAccounts\n          applicationName={state.context?.appMeta?.name}\n          applicationLogo={state.context.appMeta?.logo}\n          onSuccess={(accounts: string[]) => {\n            send({ type: \"SUCCESS\", accounts: accounts })\n          }}\n        />\n      )\n    default:\n      console.debug(\n        `RequestAccounts rendering loader, unknown state: ${JSON.stringify(\n          state.value,\n        )}`,\n      )\n      return <BlurredLoader isLoading />\n  }\n}\n","import useSWR from \"swr\"\n\nimport { getAllToken } from \"@nfid/integration/token/dip-20\"\n\nexport const useAllDip20Token = () => {\n  const { data: token, isValidating } = useSWR(\"dip20AllToken\", getAllToken, {\n    dedupingInterval: 60_000 * 60,\n    focusThrottleInterval: 60_000 * 60,\n  })\n\n  console.debug(\"useAllDip20Token\", { token })\n\n  return { token, isValidating }\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { fromHexString, principalToAddress } from \"ictool\"\n\nimport { Account, Balance, PrincipalAccount, Wallet } from \"@nfid/integration\"\nimport { getBalance as getICPBalance } from \"@nfid/integration\"\nimport { getDIP20Balance, TokenMetadata } from \"@nfid/integration/token/dip-20\"\n\ntype FetchBalanceArgs = {\n  principals: PrincipalAccount[]\n  dip20Token: TokenMetadata[]\n}\n\nexport type Token = string\n\nexport type TokenBalance = {\n  [token: Token]: Balance\n}\n\nexport type AccountBalance = {\n  principal: Principal\n  principalId: string\n  account: Account\n  balance: TokenBalance\n  address?: string\n  vaultId?: bigint\n  vaultName?: string\n}\n\nexport async function fetchBalances({\n  principals,\n  dip20Token,\n}: FetchBalanceArgs): Promise<AccountBalance[]> {\n  return await Promise.all(\n    principals.map(async ({ principal, account }) => {\n      const token = await Promise.all<TokenBalance>([\n        // mapping over this static list only to keep the same shape as the dip20Token\n        ...[\"ICP\"].map(async (token) => ({\n          [token]: await getICPBalance(principalToAddress(principal)),\n        })),\n        // ...[\"ETH\"].map(async (token) => ({\n        //   [token]: (await getEthBalance()).tokenBalance,\n        // })),\n        // ...[\"BTC\"].map(async (token) => ({\n        //   [token]: (await getAccounts()).tokenBalance,\n        // })),\n        // ...[\"MATIC\"].map(async (token) => ({\n        //   [token]: (await getAccountsMatic()).tokenBalance,\n        // })),\n        ...dip20Token.map(async ({ symbol: token, canisterId }) => ({\n          [token]: await getDIP20Balance({\n            canisterId,\n            principalId: principal.toText(),\n          }),\n        })),\n        // ...erc20.map(async (token) => ({\n        //   [token.token]: token.tokenBalance,\n        // })),\n        // ...erc20Polygon.map(async (token) => ({\n        //   [token.token]: token.tokenBalance,\n        // })),\n      ])\n\n      return {\n        principal,\n        principalId: principal.toText(),\n        account,\n        // pulling only token key value pairs and drop array specific\n        // properties from the result to keep clean return interface\n        balance: token.reduce((acc, cur) => ({ ...acc, ...cur }), {}),\n      }\n    }),\n  )\n}\n\nexport async function fetchVaultsWalletsBalances(\n  wallets: Wallet[],\n): Promise<AccountBalance[]> {\n  return await Promise.all(\n    wallets.map(async (wallet) => {\n      const principal = Principal.fromText(VAULT_CANISTER_ID)\n\n      const address = principalToAddress(principal, fromHexString(wallet.uid))\n      const balance = await getICPBalance(address)\n\n      return {\n        principal: principal,\n        account: {\n          domain: \"nfid.vaults\",\n          label: wallet.name ?? \"\",\n          accountId: wallet.uid,\n        },\n        principalId: principal.toText(),\n        address: address,\n        balance: { ICP: balance },\n        vaultId: wallet?.vaultId,\n        vaultName: wallet?.vaultName,\n      }\n    }),\n  )\n}\n\nexport async function fetchVaultWalletsBalances(\n  wallets: Wallet[],\n): Promise<Wallet[]> {\n  return await Promise.all(\n    wallets.map(async (wallet) => {\n      const principal = Principal.fromText(VAULT_CANISTER_ID)\n      const balance = await getICPBalance(\n        principalToAddress(principal, fromHexString(wallet.uid)),\n      )\n\n      return {\n        ...wallet,\n        address: principalToAddress(principal, fromHexString(wallet.uid)),\n        balance: { ICP: balance },\n      }\n    }),\n  )\n}\n","import useSWR from \"swr\"\n\nimport { fetchBalances } from \"frontend/features/fungable-token/fetch-balances\"\nimport { useAllPrincipals } from \"frontend/integration/internet-identity/queries\"\n\nimport { useAllDip20Token } from \"../../dip-20/hooks/use-all-token-meta\"\n\nexport const useUserBalances = () => {\n  const { principals } = useAllPrincipals()\n  const { token: dip20Token } = useAllDip20Token()\n\n  const {\n    data: balances,\n    isValidating: isLoading,\n    mutate: refreshBalances,\n  } = useSWR(\n    dip20Token && principals ? [principals, dip20Token, `AllBalanceRaw`] : null,\n    async ([principals, dip20Token]) => {\n      console.debug(\"AllBalanceRaw\", { principals, dip20Token })\n      return await fetchBalances({\n        principals,\n        dip20Token,\n      })\n    },\n    { dedupingInterval: 30_000, refreshInterval: 60_000 },\n  )\n\n  return { balances: balances, isLoading, refreshBalances }\n}\n","import useSWR from \"swr\"\n\nimport { WALLET_SESSION_TTL_1_MIN_IN_MS } from \"@nfid/config\"\nimport { replaceActorIdentity, vault } from \"@nfid/integration\"\n\nimport { getWalletDelegationAdapter } from \"frontend/integration/adapters/delegations\"\n\nexport const useVaultDelegation = () => {\n  return useSWR(\"vaultDelegation\", () => getWalletDelegationAdapter(), {\n    refreshInterval: WALLET_SESSION_TTL_1_MIN_IN_MS,\n    onSuccess: async (data) => {\n      if (data) await replaceActorIdentity(vault, data)\n      return data\n    },\n  })\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Chain, getGlobalKeys } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { RootWallet, accessList, authState } from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"../facade/wallet\"\nimport { fetchProfile } from \"../identity-manager\"\n\nexport const getWalletDelegationAdapter = async (\n  domain = \"nfid.one\",\n  accountId = \"0\",\n  targetCanisters: string[] = [],\n): Promise<DelegationIdentity> => {\n  const profile = await fetchProfile()\n  if (accountId !== \"-1\" && profile.wallet === RootWallet.II)\n    return await getWalletDelegation(profile.anchor, domain, accountId)\n  else\n    return await getGlobalKeys(\n      authState.get().delegationIdentity!,\n      Chain.IC,\n      accessList.concat(targetCanisters),\n    )\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Principal } from \"@dfinity/principal\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { WALLET_SCOPE, WALLET_SESSION_TTL_2_MIN_IN_NS } from \"@nfid/config\"\nimport {\n  getScope,\n  getLocalStorageOverride,\n  delegationState,\n} from \"@nfid/integration\"\n\nimport { fetchPrincipal } from \"frontend/integration/internet-identity\"\n\nexport async function getWalletPrincipal(anchor: number): Promise<Principal> {\n  return fetchPrincipal(anchor, WALLET_SCOPE).catch((e) => {\n    throw Error(`Getting of Wallet Principal failed!: ${e}`, e)\n  })\n}\n\nexport async function getWalletDelegation(\n  userNumber: number,\n  hostName?: string,\n  personaId?: string,\n  chain: Chain = Chain.IC,\n): Promise<DelegationIdentity> {\n  const scope =\n    typeof hostName === \"undefined\" || hostName === \"nfid.one\"\n      ? WALLET_SCOPE\n      : getScope(hostName, personaId)\n\n  return delegationState.getDelegation(\n    userNumber,\n    scope,\n    BigInt(\n      getLocalStorageOverride(\n        WALLET_SESSION_TTL_2_MIN_IN_NS,\n        \"NFID_WALLET_DELEGATION_TTL_NS\",\n      ),\n    ),\n  )\n}\n","import React from \"react\"\nimport useSWRImmutable from \"swr/immutable\"\n\nimport {\n  RootWallet,\n  extendWithFixedAccounts,\n  fetchPrincipals,\n} from \"@nfid/integration\"\n\nimport {\n  useAccounts,\n  useApplicationsMeta,\n  useProfile,\n} from \"frontend/integration/identity-manager/queries\"\n\n/**\n * React hook to retrieve user principals.\n */\nexport const useAllPrincipals = () => {\n  const { profile } = useProfile()\n  const { accounts } = useAccounts()\n  const { applicationsMeta } = useApplicationsMeta()\n\n  const allAccounts = React.useMemo(() => {\n    return extendWithFixedAccounts(accounts, applicationsMeta)\n  }, [accounts, applicationsMeta])\n\n  const { data: principals } = useSWRImmutable(\n    profile?.anchor && allAccounts\n      ? [\n          BigInt(profile.anchor),\n          allAccounts,\n          profile.wallet === RootWallet.NFID,\n        ]\n      : null,\n    ([anchor, allAccounts, isNewUser]) =>\n      fetchPrincipals(anchor, allAccounts, isNewUser),\n    { dedupingInterval: 60_000, refreshInterval: 60_000 },\n  )\n\n  console.debug(\"useAllPrincipals\", { principals })\n\n  return { principals }\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport React from \"react\"\n\nimport { getWalletName } from \"@nfid/integration\"\n\nimport { TokenBalance } from \"frontend/features/fungable-token/fetch-balances\"\nimport { useUserBalances } from \"frontend/features/fungable-token/icp/hooks/use-user-balances\"\nimport { useAllVaultsWallets } from \"frontend/features/vaults/hooks/use-vaults-wallets-balances\"\nimport { useApplicationsMeta } from \"frontend/integration/identity-manager/queries\"\nimport { sortAlphabetic, keepStaticOrder } from \"frontend/ui/utils/sorting\"\n\nexport type Wallet = {\n  principal: Principal\n  principalId: string\n  balance: TokenBalance\n  label: string\n  accountId: string\n  domain: string\n  isVaultWallet?: boolean\n  address?: string\n  vaultId?: bigint\n  vaultName?: string\n  ethAddress?: string\n  btcAddress?: string\n}\n\nexport const useAllWallets = () => {\n  const { balances, isLoading } = useUserBalances()\n  const { balances: vaultsBalances, isLoading: isAllWalletsLoading } =\n    useAllVaultsWallets()\n\n  const applications = useApplicationsMeta()\n\n  const wallets = React.useMemo(() => {\n    if (!balances || !vaultsBalances) return []\n\n    const wallets = balances\n      ?.map(({ principal, account, ...rest }) => ({\n        label: getWalletName(\n          applications.applicationsMeta ?? [],\n          account.domain,\n          account.accountId,\n        ),\n        accountId: account.accountId,\n        domain: account.domain,\n        principal,\n        address: principalToAddress(principal),\n\n        ...rest,\n      }))\n      .sort(sortAlphabetic(({ label }) => label ?? \"\"))\n      .concat(\n        vaultsBalances?.map(({ principal, account, address, ...rest }) => ({\n          label: account.label,\n          accountId: account.accountId,\n          domain: account.domain,\n          principal,\n          address: address ?? account.accountId,\n          isVaultWallet: true,\n          ...rest,\n        })) ?? [],\n      )\n    return keepStaticOrder<Wallet>(\n      ({ label }) => label ?? \"\",\n      [\"NFID\", \"NNS\"],\n    )(wallets || [])\n  }, [applications.applicationsMeta, balances, vaultsBalances])\n\n  return { wallets, isLoading: isLoading || isAllWalletsLoading }\n}\n","import useSWR from \"swr\"\n\nimport { getVaults, getWallets, ObjectState } from \"@nfid/integration\"\n\nimport { fetchVaultsWalletsBalances } from \"frontend/features/fungable-token/fetch-balances\"\n\nimport { useVaultDelegation } from \"./use-vault-delegation\"\n\nexport const useAllVaultsWallets = () => {\n  const { data: vaultDelegation } = useVaultDelegation()\n\n  const { data: allVaultsWallets, isLoading: isAllWalletsLoading } = useSWR(\n    vaultDelegation ? \"allVaultsWallets\" : null,\n    async () => {\n      const vaults = await getVaults()\n\n      const promisesArray = vaults?.map(async (vault) => {\n        const result = await getWallets(vault.id)\n        return result.map((wallet) => ({\n          ...wallet,\n          vaultId: vault.id,\n          vaultName: vault.name,\n        }))\n      })\n\n      return (await Promise.all(promisesArray))\n        .flat(1)\n        .filter((wallet) => wallet.state !== ObjectState.ARCHIVED)\n    },\n  )\n\n  const { data: balances, isValidating: isBalancesLoading } = useSWR(\n    allVaultsWallets ? [allVaultsWallets, `allVaultsWalletsBalances`] : null,\n    async ([allVaultsWallets]) => {\n      console.debug(\"allVaultsWalletsBalances\", { allVaultsWallets })\n      return await fetchVaultsWalletsBalances(allVaultsWallets)\n    },\n    { dedupingInterval: 30_000, refreshInterval: 60_000 },\n  )\n\n  return {\n    balances,\n    isLoading: isAllWalletsLoading || isBalancesLoading,\n  }\n}\n","/**\n * sort alphabetically\n *\n * @param accessor - extract the value to sort by\n */\nexport const sortAlphabetic =\n  <T>(accessor: (item: T) => string) =>\n  (a: T, b: T) =>\n    accessor(a).localeCompare(accessor(b), \"en\", { sensitivity: \"base\" })\n\n/**\n * keep the order of predefined static items\n *\n * @param accessor - extract the value to sort by\n * @param staticOrder - the order of the items that should be kept static\n */\nexport const keepStaticOrder =\n  <T>(accessor: (item: T) => string, staticOrder: string[]) =>\n  (items: T[]) => {\n    const start = staticOrder\n      .map((comparator) =>\n        items.find((item) => accessor(item).includes(comparator)),\n      )\n      .filter((item: T | undefined): item is T => Boolean(item))\n    return [\n      ...start,\n      ...items.filter(\n        (item) => !start.find((i) => accessor(i) === accessor(item)),\n      ),\n    ]\n  }\n","import React from \"react\"\n\ninterface useTimerProps {\n  defaultCounter: number\n  frequency?: number\n  loop?: boolean\n  onElapsed?: () => void\n}\n\nexport const useTimer = ({\n  defaultCounter,\n  loop,\n  frequency = 1000,\n  onElapsed,\n}: useTimerProps) => {\n  const [counter, setCounter] = React.useState(defaultCounter)\n  const timer = React.useRef<NodeJS.Timer>()\n  const [elapsed, setElapsed] = React.useState(false)\n\n  const handleInterval = React.useCallback(() => {\n    if (counter > 0) {\n      setCounter(counter - 1)\n    }\n\n    if (counter === 0) {\n      setElapsed(true)\n      onElapsed && onElapsed()\n      clearInterval(Number(timer.current))\n    }\n\n    if (counter === 0 && loop) {\n      setCounter(defaultCounter)\n      timer.current = setInterval(handleInterval, frequency)\n      setElapsed(false)\n    }\n  }, [counter, defaultCounter, frequency, loop, onElapsed])\n\n  React.useEffect(() => {\n    timer.current = setInterval(handleInterval, frequency)\n    return () => clearInterval(Number(timer.current))\n  }, [frequency, handleInterval])\n\n  return { elapsed, setCounter, counter }\n}\n","import { HttpAgent, SignIdentity } from \"@dfinity/agent\"\n\nimport { DIP20, DIP20IDLFactory } from \".\"\nimport { actor, agentBaseConfig } from \"../../actors\"\n\nexport const makeDip20Actor = (canisterId: string, identity?: SignIdentity) =>\n  actor<DIP20>(\n    canisterId,\n    DIP20IDLFactory,\n    identity\n      ? { agent: new HttpAgent({ ...agentBaseConfig, identity }) }\n      : undefined,\n  )\n","import { makeDip20Actor } from \"./actor\"\nimport { Metadata } from \"./dip-20.d\"\n\nexport interface TokenMetadata extends Metadata {\n  canisterId: string\n}\n\nexport async function getMetadata(canisterId: string): Promise<TokenMetadata> {\n  const dip20 = makeDip20Actor(canisterId)\n  return dip20\n    .getMetadata()\n    .then((metadata) => ({\n      canisterId,\n      ...metadata,\n    }))\n    .catch((e) => {\n      throw new Error(`getMetadata: ${e.message}`)\n    })\n}\n","import { TOKEN_CANISTER } from \"./constants\"\nimport { getMetadata, TokenMetadata } from \"./get-metadata\"\n\nconst mapToToken = ({ decimals, ...rest }: TokenMetadata) => ({\n  decimals,\n  toPresentation: (value = BigInt(0)) => {\n    return Number(value) / Number(BigInt(10 ** decimals))\n  },\n  transformAmount: (value: string) =>\n    Number(parseFloat(value) * 10 ** decimals),\n  ...rest,\n})\n\nexport async function getAllToken() {\n  return await Promise.all(TOKEN_CANISTER.map(getMetadata)).then((token) =>\n    token.map(mapToToken),\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\n\nimport { makeDip20Actor } from \"./actor\"\n\ninterface GetBalanceParams {\n  canisterId: string\n  principalId: string\n}\n\nexport const getDIP20Balance = async ({\n  canisterId,\n  principalId,\n}: GetBalanceParams) => {\n  const dip20 = makeDip20Actor(canisterId)\n  return dip20.balanceOf(Principal.fromText(principalId)).catch((e) => {\n    throw new Error(`getBalance: ${e.message}`)\n  })\n}\n","import { SignIdentity } from \"@dfinity/agent\"\nimport { Principal } from \"@dfinity/principal\"\n\nimport { makeDip20Actor } from \"./actor\"\n\ntype TransferArgs = {\n  canisterId: string\n  to: string\n  amount: number\n  sourceIdentity: SignIdentity\n}\n\nexport async function transfer({\n  canisterId,\n  to,\n  amount,\n  sourceIdentity,\n}: TransferArgs) {\n  console.debug(\"transfer\", { canisterId, to, amount })\n  const dip20Actor = makeDip20Actor(canisterId, sourceIdentity)\n  const response = await dip20Actor\n    .transfer(Principal.fromText(to), BigInt(amount))\n    .catch((e) => {\n      throw Error(`transfer failed: ${e}`)\n    })\n\n  if (\"Err\" in response) {\n    if (\"Other\" in response.Err) {\n      throw Error(response.Err.Other)\n    }\n    throw Error(Object.keys(response.Err)[0])\n  }\n\n  console.debug(\"transfer\", { response })\n  return response.Ok\n}\n","export const idlFactory = ({ IDL }: any) => {\n  const TxError = IDL.Variant({\n    InsufficientAllowance: IDL.Null,\n    InsufficientBalance: IDL.Null,\n    ErrorOperationStyle: IDL.Null,\n    Unauthorized: IDL.Null,\n    LedgerTrap: IDL.Null,\n    ErrorTo: IDL.Null,\n    Other: IDL.Text,\n    BlockUsed: IDL.Null,\n    AmountTooSmall: IDL.Null,\n  })\n  const Result = IDL.Variant({ Ok: IDL.Nat, Err: TxError })\n  const Metadata = IDL.Record({\n    fee: IDL.Nat,\n    decimals: IDL.Nat8,\n    owner: IDL.Principal,\n    logo: IDL.Text,\n    name: IDL.Text,\n    totalSupply: IDL.Nat,\n    symbol: IDL.Text,\n  })\n  const TokenInfo = IDL.Record({\n    holderNumber: IDL.Nat64,\n    deployTime: IDL.Nat64,\n    metadata: Metadata,\n    historySize: IDL.Nat64,\n    cycles: IDL.Nat64,\n    feeTo: IDL.Principal,\n  })\n  return IDL.Service({\n    allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], [\"query\"]),\n    approve: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n    balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], [\"query\"]),\n    burn: IDL.Func([IDL.Nat], [Result], []),\n    decimals: IDL.Func([], [IDL.Nat8], [\"query\"]),\n    getAllowanceSize: IDL.Func([], [IDL.Nat64], [\"query\"]),\n    getHolders: IDL.Func(\n      [IDL.Nat64, IDL.Nat64],\n      [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n      [\"query\"],\n    ),\n    getMetadata: IDL.Func([], [Metadata], [\"query\"]),\n    getTokenInfo: IDL.Func([], [TokenInfo], [\"query\"]),\n    getUserApprovals: IDL.Func(\n      [IDL.Principal],\n      [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n      [\"query\"],\n    ),\n    historySize: IDL.Func([], [IDL.Nat64], [\"query\"]),\n    logo: IDL.Func([], [IDL.Text], [\"query\"]),\n    mint: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n    name: IDL.Func([], [IDL.Text], [\"query\"]),\n    owner: IDL.Func([], [IDL.Principal], [\"query\"]),\n    setFee: IDL.Func([IDL.Nat], [], []),\n    setFeeTo: IDL.Func([IDL.Principal], [], []),\n    setLogo: IDL.Func([IDL.Text], [], []),\n    setName: IDL.Func([IDL.Text], [], []),\n    setOwner: IDL.Func([IDL.Principal], [], []),\n    symbol: IDL.Func([], [IDL.Text], [\"query\"]),\n    totalSupply: IDL.Func([], [IDL.Nat], [\"query\"]),\n    transfer: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n    transferFrom: IDL.Func(\n      [IDL.Principal, IDL.Principal, IDL.Nat],\n      [Result],\n      [],\n    ),\n  })\n}\nexport const init = ({ IDL }: any) => {\n  return [\n    IDL.Text,\n    IDL.Text,\n    IDL.Text,\n    IDL.Nat8,\n    IDL.Nat,\n    IDL.Principal,\n    IDL.Nat,\n    IDL.Principal,\n    IDL.Principal,\n  ]\n}\n"],"names":["SDKRequestAccountsPage","applicationLogo","applicationName","onReject","onApprove","accountsOptions","selectedAccounts","setSelectedAccounts","timer","frameLabel","B","isLoading","length","className","clsx","title","subTitle","src","NFIDLogo","alt","disabled","isSearch","options","selectedValues","setSelectedValues","placeholder","showSelectAllOption","stroke","onClick","primary","block","RequestAccounts","onSuccess","useState","wallets","useAllWallets","counter","setCounter","useTimer","defaultCounter","useMemo","map","wallet","label","value","principalToAddress","principal","afterLabel","toPresentation","balance","useCallback","setTimeout","window","close","accounts","createMachine","context","tsTypes","schema","events","initial","states","Ready","invoke","id","onDone","target","actions","Authenticate","data","appMeta","on","SUCCESS","Confirm","onEntry","End","type","assignAuthSession","assign","_","event","authSession","assignRequestAccountsRequest","requestAccounts","assignAccounts","setAccounts","console","log","services","async","params","registerRequestAccountsHandler","Promise","resolve","setInterval","status","debug","AuthenticationMachine","guards","RequestAccountsCoordinator","searchParams","useSearchParams","get","state","send","useMachine","RequestAccountsMachine","name","logo","useEffect","matches","loadingMessage","actor","children","JSON","stringify","useAllDip20Token","token","isValidating","useSWR","getAllToken","dedupingInterval","focusThrottleInterval","fetchBalances","principals","dip20Token","all","account","getICPBalance","symbol","canisterId","getDIP20Balance","principalId","toText","reduce","acc","cur","fetchVaultsWalletsBalances","Principal","VAULT_CANISTER_ID","address","fromHexString","uid","domain","accountId","ICP","vaultId","vaultName","fetchVaultWalletsBalances","useUserBalances","useAllPrincipals","balances","mutate","refreshBalances","refreshInterval","useVaultDelegation","getWalletDelegationAdapter","WALLET_SESSION_TTL_1_MIN_IN_MS","replaceActorIdentity","vault","targetCanisters","profile","fetchProfile","RootWallet","getWalletDelegation","anchor","getGlobalKeys","authState","delegationIdentity","Chain","accessList","userNumber","hostName","personaId","scope","WALLET_SCOPE","getScope","delegationState","BigInt","getLocalStorageOverride","WALLET_SESSION_TTL_2_MIN_IN_NS","useProfile","useAccounts","applicationsMeta","useApplicationsMeta","allAccounts","React","extendWithFixedAccounts","useSWRImmutable","isNewUser","fetchPrincipals","vaultsBalances","isAllWalletsLoading","vaultDelegation","allVaultsWallets","vaults","getVaults","promisesArray","getWallets","flat","filter","ObjectState","isBalancesLoading","useAllVaultsWallets","applications","rest","getWalletName","sort","sortAlphabetic","concat","isVaultWallet","keepStaticOrder","accessor","a","b","localeCompare","sensitivity","staticOrder","items","start","comparator","find","item","includes","Boolean","i","loop","frequency","onElapsed","elapsed","setElapsed","handleInterval","clearInterval","Number","current","makeDip20Actor","identity","DIP20IDLFactory","agent","HttpAgent","agentBaseConfig","undefined","getMetadata","then","metadata","catch","e","Error","message","mapToToken","decimals","transformAmount","parseFloat","TOKEN_CANISTER","balanceOf","transfer","to","amount","sourceIdentity","dip20Actor","response","Err","Other","Object","keys","Ok","idlFactory","IDL","TxError","Variant","InsufficientAllowance","Null","InsufficientBalance","ErrorOperationStyle","Unauthorized","LedgerTrap","ErrorTo","Text","BlockUsed","AmountTooSmall","Result","Nat","Metadata","Record","fee","Nat8","owner","totalSupply","TokenInfo","holderNumber","Nat64","deployTime","historySize","cycles","feeTo","Service","allowance","Func","approve","burn","getAllowanceSize","getHolders","Vec","Tuple","getTokenInfo","getUserApprovals","mint","setFee","setFeeTo","setLogo","setName","setOwner","transferFrom"],"sourceRoot":""}