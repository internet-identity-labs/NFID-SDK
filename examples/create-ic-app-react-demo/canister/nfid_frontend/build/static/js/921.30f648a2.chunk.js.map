{"version":3,"file":"static/js/921.30f648a2.chunk.js","mappings":"+MAaA,MA6EA,EA7E8C,IAQvC,IAAD,MARyC,QAC7CA,EAAO,WACPC,EAAU,kBACVC,EAAiB,qBACjBC,EAAoB,qBACpBC,EAAoB,UACpBC,EAAS,SACTC,GACD,EACC,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,MACZ,OAAEC,EAAM,SAAEC,EAAQ,UAAEC,GAAcC,EAAAA,EAAAA,sBACtCX,EAAWY,QAAQC,SAEfC,EAAOR,EAAMG,GAEbM,GAAQC,EAAAA,EAAAA,UAAQ,KACbC,EAAAA,EAAAA,GAAUH,EAAMZ,IACtB,CAACY,EAAMZ,IAEJgB,GAAWF,EAAAA,EAAAA,UAAQ,KACvB,IAAKD,EAAO,MAAO,GACnB,IAAIG,EAAsC,GAa1C,OAXIH,EAAMI,wBACRD,EAASE,KAAK,CACZC,MAAO,kBACPC,UACE,wFAEE,iBAAMC,UAAU,gBAAe,2CAKhCL,CAAQ,GACd,CAACH,IAEES,GAASR,EAAAA,EAAAA,UAAQ,KAAO,IAAD,IAC3B,OAAwB,OAAjBf,QAAiB,IAAjBA,GAAuB,QAAN,EAAjBA,EAAmBwB,YAAI,OAAO,QAAP,EAAvB,EAAyBC,aAAK,WAAb,EAAjB,EAAgCC,KACpCC,IAA2D,8BAAM,CAChEC,KAAU,OAAJD,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAM,QAAN,EAAV,EAAYH,YAAI,OAAM,QAAN,EAAhB,EAAkBK,YAAI,OAAY,QAAZ,EAAtB,EAAwBC,QAAQ,UAAE,WAA9B,EAAJ,EAAoCC,IAC1CX,MAAW,OAAJO,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAM,QAAN,EAAV,EAAYH,YAAI,OAAM,QAAN,EAAhB,EAAkBK,YAAI,WAAlB,EAAJ,EAAwBG,KAC/BX,SAAc,OAAJM,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,OAAM,QAAN,EAAV,EAAYH,YAAI,OAAgB,QAAhB,EAAhB,EAAkBS,sBAAc,WAA5B,EAAJ,EAAkCD,KAC5CE,WAAYC,OAAW,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMS,QAAU,IAAM,GAAK,OAC9CC,eAAeC,EAAAA,EAAAA,IAAMH,OAAW,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMS,QAAU,IAAM,GAAI/B,EAAW,KAClE,GACF,GACA,CAACA,EAAwB,OAAjBL,QAAiB,IAAjBA,GAAuB,QAAN,EAAjBA,EAAmBwB,YAAI,WAAN,EAAjB,EAAyBC,QAE9Bc,GAAQxB,EAAAA,EAAAA,UAAQ,KAAO,IAAD,EAC1B,GAAKd,EAEL,OAAOuC,OAAOL,OAA8B,QAAxB,EAAClC,EAAqB,UAAE,aAAvB,EAAyBwC,OAAS,IAAM,GAAG,GAC/D,CAACxC,IAEJ,OACE,SAAC,IAAe,CACdmB,MAAM,4BACNsB,gBAAiB5C,EACjB6C,YAAuB,OAAV5C,QAAU,IAAVA,OAAU,EAAVA,EAAY6C,OAAO,GAAGC,KACnCC,UAAqB,OAAV/C,QAAU,IAAVA,OAAU,EAAVA,EAAY6C,OAAO,GAAGG,GACjCC,QAASvC,EACTD,SAAUD,EACV0C,WAAYnC,EAAMoC,IAClBC,SAAUrC,EAAMsC,SAChBC,WAAYvC,EAAMyB,MAClBzB,MAAOyB,EACPe,UAAWnD,EACXoD,qBAAsBrD,EACtBsD,sBAAuB1C,EAAM2C,yBAC7BxC,SAAUA,EACVyC,SAAUtD,EACVmB,OAAQA,GACR,C","sources":["features/embed/components/batch-buy.tsx"],"sourcesContent":["import { chainService } from \"packages/integration-ethereum/src/lib/decoder/chain-service\"\nimport { useMemo } from \"react\"\n\nimport { IWarningAccordionOption } from \"@nfid-frontend/ui\"\nimport { Item } from \"@nfid/integration-ethereum\"\n\nimport { ApproverCmpProps } from \"frontend/features/embed/types\"\nimport { calcPrice } from \"frontend/features/embed/util/calcPriceUtil\"\nimport { toUSD } from \"frontend/features/fungable-token/accumulate-app-account-balances\"\nimport { useExchangeRates } from \"frontend/features/fungable-token/eth/hooks/use-eth-exchange-rate\"\n\nimport { SendTransaction } from \"../ui/send-transaction\"\n\nconst MappedBuy: React.FC<ApproverCmpProps> = ({\n  appMeta,\n  rpcMessage,\n  rpcMessageDecoded,\n  populatedTransaction,\n  disableConfirmButton,\n  onConfirm,\n  onReject,\n}) => {\n  const { rates } = useExchangeRates()\n  const { symbol, currency, chainName } = chainService.getSymbolAndChainName(\n    rpcMessage.options.chainId,\n  )\n  const rate = rates[currency]\n\n  const price = useMemo(() => {\n    return calcPrice(rate, populatedTransaction)\n  }, [rate, populatedTransaction])\n\n  const warnings = useMemo(() => {\n    if (!price) return []\n    let warnings: IWarningAccordionOption[] = []\n\n    if (price.isNetworkIsBusyWarning)\n      warnings.push({\n        title: \"Network is busy\",\n        subtitle: (\n          <>\n            Gas prices are high and estimates are less accurate.\n            <span className=\"text-blue-600\"> Adjust the network fee.</span>\n          </>\n        ),\n      })\n\n    return warnings\n  }, [price])\n\n  const assets = useMemo(() => {\n    return rpcMessageDecoded?.data?.items?.map(\n      (item: { amount: string; fee: string; item: { data: Item } }) => ({\n        icon: item?.item?.data?.meta?.content[0]?.url,\n        title: item?.item?.data?.meta?.name,\n        subtitle: item?.item?.data?.collectionData?.name,\n        innerTitle: Number(item?.amount) / 10 ** 18 + \" ETH\",\n        innerSubtitle: toUSD(Number(item?.amount) / 10 ** 18, rates[\"ETH\"]),\n      }),\n    )\n  }, [rates, rpcMessageDecoded?.data?.items])\n\n  const total = useMemo(() => {\n    if (!populatedTransaction) return\n\n    return String(Number(populatedTransaction[0]?.value) / 10 ** 18)\n  }, [populatedTransaction])\n\n  return (\n    <SendTransaction\n      title=\"Buy multiple collectibles\"\n      applicationMeta={appMeta}\n      fromAddress={rpcMessage?.params[0].from}\n      toAddress={rpcMessage?.params[0].to}\n      network={chainName}\n      currency={symbol}\n      networkFee={price.fee}\n      totalUSD={price.totalUsd}\n      totalToken={price.total}\n      price={total}\n      onApprove={onConfirm}\n      disableApproveButton={disableConfirmButton}\n      isInsufficientBalance={price.isInsufficientFundsError}\n      warnings={warnings}\n      onCancel={onReject}\n      assets={assets}\n    />\n  )\n}\n\nexport default MappedBuy\n"],"names":["appMeta","rpcMessage","rpcMessageDecoded","populatedTransaction","disableConfirmButton","onConfirm","onReject","rates","useExchangeRates","symbol","currency","chainName","chainService","options","chainId","rate","price","useMemo","calcPrice","warnings","isNetworkIsBusyWarning","push","title","subtitle","className","assets","data","items","map","item","icon","meta","content","url","name","collectionData","innerTitle","Number","amount","innerSubtitle","toUSD","total","String","value","applicationMeta","fromAddress","params","from","toAddress","to","network","networkFee","fee","totalUSD","totalUsd","totalToken","onApprove","disableApproveButton","isInsufficientBalance","isInsufficientFundsError","onCancel"],"sourceRoot":""}