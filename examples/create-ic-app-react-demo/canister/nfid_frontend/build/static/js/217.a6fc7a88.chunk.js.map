{"version":3,"file":"static/js/217.a6fc7a88.chunk.js","mappings":"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","sources":["features/embed/components/deploy-collection.tsx","features/embed/util/calcPriceDeployCollectionUtil.ts"],"sourcesContent":["import { useMemo } from \"react\"\n\nimport { IWarningAccordionOption } from \"@nfid-frontend/ui\"\n\nimport { ApproverCmpProps } from \"frontend/features/embed/types\"\nimport { calcPriceDeployCollection } from \"frontend/features/embed/util/calcPriceDeployCollectionUtil\"\nimport { useExchangeRates } from \"frontend/features/fungable-token/eth/hooks/use-eth-exchange-rate\"\n\nimport { SendTransaction } from \"../ui/send-transaction\"\n\nconst MappedDeployCollection: React.FC<ApproverCmpProps> = ({\n  appMeta,\n  rpcMessage,\n  rpcMessageDecoded,\n  populatedTransaction,\n  disableConfirmButton,\n  onConfirm,\n  onReject,\n}) => {\n  const { rates } = useExchangeRates()\n\n  const price = useMemo(() => {\n    return calcPriceDeployCollection(rates, populatedTransaction)\n  }, [rates, populatedTransaction])\n\n  const warnings = useMemo(() => {\n    if (!price) return []\n    let warnings: IWarningAccordionOption[] = []\n\n    if (\n      !rpcMessageDecoded?.data?.meta?.content[0].url &&\n      !rpcMessageDecoded?.data?.meta?.name &&\n      rpcMessageDecoded?.data?.collectionData?.name\n    )\n      warnings.push({\n        title: \"Preview unavailable\",\n        subtitle:\n          \"Unable to estimate asset changes. Please make sure you trust this dapp.\",\n      })\n\n    if (price.isNetworkIsBusyWarning)\n      warnings.push({\n        title: \"Network is busy\",\n        subtitle: (\n          <>\n            Gas prices are high and estimates are less accurate.\n            <span className=\"text-blue-600\"> Adjust the network fee.</span>\n          </>\n        ),\n      })\n\n    return warnings\n  }, [\n    price,\n    rpcMessageDecoded?.data?.collectionData?.name,\n    rpcMessageDecoded?.data?.meta?.content,\n    rpcMessageDecoded?.data?.meta?.name,\n  ])\n  return (\n    <SendTransaction\n      title=\"Deploy collection\"\n      applicationMeta={appMeta}\n      fromAddress={rpcMessage?.params[0].from}\n      toAddress={rpcMessage?.params[0].to}\n      network={\"Ethereum\"}\n      networkFee={price.fee}\n      totalUSD={price.feeUsd}\n      totalToken={price.fee}\n      currency={\"ETH\"}\n      onApprove={onConfirm}\n      disableApproveButton={disableConfirmButton}\n      isInsufficientBalance={!!price.isInsufficientFundsError}\n      warnings={warnings}\n      onCancel={onReject}\n    />\n  )\n}\n\nexport default MappedDeployCollection\n","import { TransactionRequest } from \"@ethersproject/abstract-provider\"\nimport { ethers } from \"ethers\"\nimport { BigNumber } from \"ethers/lib/ethers\"\n\nimport { ProviderError } from \"@nfid/integration\"\n\nimport { IRate } from \"frontend/features/fungable-token/eth/hooks/use-eth-exchange-rate\"\n\nexport function calcPriceDeployCollection(\n  rates: IRate,\n  populatedTransaction?: [TransactionRequest, ProviderError | undefined],\n) {\n  if (!rates[\"ETH\"] || !populatedTransaction || !populatedTransaction[0])\n    return {\n      feeUsd: \"0\",\n      fee: \"0\",\n      maxFeeUsd: \"0\",\n      maxFee: \"0\",\n      isInsufficientFundsError: false,\n      isNetworkIsBusyWarning: false,\n    }\n  const [transaction, err] = populatedTransaction\n\n  const gasPriceRaw = transaction.gasPrice\n  delete transaction[\"gasPrice\"]\n\n  const gasLimit = BigNumber.from(transaction?.gasLimit)\n  const gasPrice = BigNumber.from(gasPriceRaw ?? transaction?.maxFeePerGas)\n  const maxFeePerGas = BigNumber.from(transaction?.maxFeePerGas ?? gasPriceRaw)\n  const fee = gasLimit.mul(gasPrice).div(125).mul(100)\n  const feeUsd = parseFloat(ethers.utils.formatEther(fee)) * rates[\"ETH\"]\n  const maxFee = gasLimit.mul(maxFeePerGas)\n  const maxFeeUsd = parseFloat(ethers.utils.formatEther(maxFee)) * rates[\"ETH\"]\n\n  return {\n    feeUsd: feeUsd.toFixed(2),\n    fee: ethers.utils.formatEther(fee),\n    maxFeeUsd: maxFeeUsd.toFixed(2),\n    maxFee: ethers.utils.formatEther(maxFee),\n    isInsufficientFundsError: err ?? ProviderError.INSUFICIENT_FUNDS === err,\n    isNetworkIsBusyWarning: err ?? ProviderError.NETWORK_BUSY === err,\n  }\n}\n"],"names":["appMeta","rpcMessage","rpcMessageDecoded","populatedTransaction","disableConfirmButton","onConfirm","onReject","rates","useExchangeRates","price","useMemo","feeUsd","fee","maxFeeUsd","maxFee","isInsufficientFundsError","isNetworkIsBusyWarning","transaction","err","gasPriceRaw","gasPrice","gasLimit","BigNumber","maxFeePerGas","mul","div","parseFloat","ethers","toFixed","ProviderError","calcPriceDeployCollection","warnings","data","meta","content","url","name","collectionData","push","title","subtitle","className","applicationMeta","fromAddress","params","from","toAddress","to","network","networkFee","totalUSD","totalToken","currency","onApprove","disableApproveButton","isInsufficientBalance","onCancel"],"sourceRoot":""}