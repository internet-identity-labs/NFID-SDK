{"version":3,"file":"static/js/957.6d76e378.chunk.js","mappings":"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","sources":["features/fungable-token/fetch-balances.ts","integration/adapters/delegations.ts","integration/entrepot/lib.ts","integration/entrepot/mapper.ts","integration/entrepot/index.ts","integration/facade/wallet.ts","ui/atoms/center-ellipsis/index.tsx","ui/connnector/cache.ts","../../../packages/ui/src/molecules/toggle-button/index.tsx","ui/connnector/transfer-modal/transfer-modal.ts","ui/connnector/transfer-modal/types.ts","ui/connnector/transfer-modal/util/options.tsx","ui/connnector/transfer-modal/btc/btc-transfer-connector.ts","ui/connnector/transfer-modal/evm-transfer-connector.ts","ui/connnector/transfer-modal/eth/erc20-transfer-connector.ts","ui/connnector/transfer-modal/eth/eth-transfer-connector.ts","ui/connnector/transfer-modal/eth/goerli/erc20-transfer-connector.ts","ui/connnector/transfer-modal/eth/goerli/eth-transfer-connector.ts","ui/connnector/transfer-modal/util/nfts.ts","ui/connnector/transfer-modal/eth/goerli/nft-transfer-connector.ts","ui/connnector/transfer-modal/eth/nft-transfer-connector.ts","features/transfer-modal/utils/validations.ts","integration/_ic_api/ext.ts","integration/entrepot/ext.ts","ui/connnector/transfer-modal/ic/icm-transfer-connector.ts","ui/connnector/transfer-modal/ic/dip20-transfer-connector.ts","ui/connnector/transfer-modal/ic/ic-transfer-connector.ts","ui/connnector/transfer-modal/ic/nft-transfer-connector.ts","ui/connnector/transfer-modal/polygon/erc20-transfer-connector.ts","ui/connnector/transfer-modal/polygon/mumbai/erc20-transfer-connector.ts","ui/connnector/transfer-modal/polygon/mumbai/nft-transfer-connector.ts","ui/connnector/transfer-modal/polygon/mumbai/polygon-transfer-connector.ts","ui/connnector/transfer-modal/polygon/nft-transfer-connector.ts","ui/connnector/transfer-modal/transfer-factory.ts","ui/connnector/transfer-modal/polygon/polygon-transfer-connector.ts","features/transfer-modal/hooks/use-network-options.ts","features/transfer-modal/components/receive-modal.tsx","features/transfer-modal/components/receive.tsx","features/transfer-modal/hooks/use-accounts-options.ts","features/vaults/utils.ts","ui/atoms/loader/spinner.tsx","features/transfer-modal/components/send-ft.tsx","features/transfer-modal/components/send-nft.tsx","features/transfer-modal/ui/success.tsx","features/transfer-modal/components/success.tsx","features/transfer-modal/constants.tsx","features/transfer-modal/ui/template.tsx","features/transfer-modal/coordinator.tsx","apps/identity-manager/profile/send-receive-button/send_receive.svg","apps/identity-manager/profile/send-receive-button/index.tsx","ui/atoms/images/logo/logo-text.tsx","ui/atoms/images/logo/index.tsx","ui/organisms/profile-header/assets/menu.svg","ui/organisms/profile-sidebar/sidebar-item.tsx","ui/organisms/profile-sidebar/index.tsx","ui/organisms/profile-header/index.tsx","ui/templates/profile-template/Template.tsx","ui/utils/sorting.ts","../../../packages/integration/src/lib/bitcoin-wallet/blockcypher-adapter.ts","../../../packages/integration/src/lib/bitcoin-wallet/btc-asset.ts","../../../packages/integration/src/lib/bitcoin-wallet/btc-wallet.ts","../../../packages/integration/src/lib/token/dip-20/actor.ts","../../../packages/integration/src/lib/token/dip-20/get-metadata.ts","../../../packages/integration/src/lib/token/dip-20/get-all-token.ts","../../../packages/integration/src/lib/token/dip-20/get-balance.ts","../../../packages/integration/src/lib/token/dip-20/transfer.ts","../../../packages/integration/src/lib/token/dip-20/dip-20.ts","../../../packages/utils/src/lib/validation.ts"],"sourcesContent":["import { Principal } from \"@dfinity/principal\"\nimport { fromHexString, principalToAddress } from \"ictool\"\n\nimport { Account, Balance, PrincipalAccount, Wallet } from \"@nfid/integration\"\nimport { getBalance as getICPBalance } from \"@nfid/integration\"\nimport { getDIP20Balance, TokenMetadata } from \"@nfid/integration/token/dip-20\"\n\ntype FetchBalanceArgs = {\n  principals: PrincipalAccount[]\n  dip20Token: TokenMetadata[]\n}\n\nexport type Token = string\n\nexport type TokenBalance = {\n  [token: Token]: Balance\n}\n\nexport type AccountBalance = {\n  principal: Principal\n  principalId: string\n  account: Account\n  balance: TokenBalance\n  address?: string\n  vaultId?: bigint\n  vaultName?: string\n}\n\nexport async function fetchBalances({\n  principals,\n  dip20Token,\n}: FetchBalanceArgs): Promise<AccountBalance[]> {\n  return await Promise.all(\n    principals.map(async ({ principal, account }) => {\n      const token = await Promise.all<TokenBalance>([\n        // mapping over this static list only to keep the same shape as the dip20Token\n        ...[\"ICP\"].map(async (token) => ({\n          [token]: await getICPBalance(principalToAddress(principal)),\n        })),\n        // ...[\"ETH\"].map(async (token) => ({\n        //   [token]: (await getEthBalance()).tokenBalance,\n        // })),\n        // ...[\"BTC\"].map(async (token) => ({\n        //   [token]: (await getAccounts()).tokenBalance,\n        // })),\n        // ...[\"MATIC\"].map(async (token) => ({\n        //   [token]: (await getAccountsMatic()).tokenBalance,\n        // })),\n        ...dip20Token.map(async ({ symbol: token, canisterId }) => ({\n          [token]: await getDIP20Balance({\n            canisterId,\n            principalId: principal.toText(),\n          }),\n        })),\n        // ...erc20.map(async (token) => ({\n        //   [token.token]: token.tokenBalance,\n        // })),\n        // ...erc20Polygon.map(async (token) => ({\n        //   [token.token]: token.tokenBalance,\n        // })),\n      ])\n\n      return {\n        principal,\n        principalId: principal.toText(),\n        account,\n        // pulling only token key value pairs and drop array specific\n        // properties from the result to keep clean return interface\n        balance: token.reduce((acc, cur) => ({ ...acc, ...cur }), {}),\n      }\n    }),\n  )\n}\n\nexport async function fetchVaultsWalletsBalances(\n  wallets: Wallet[],\n): Promise<AccountBalance[]> {\n  return await Promise.all(\n    wallets.map(async (wallet) => {\n      const principal = Principal.fromText(VAULT_CANISTER_ID)\n\n      const address = principalToAddress(principal, fromHexString(wallet.uid))\n      const balance = await getICPBalance(address)\n\n      return {\n        principal: principal,\n        account: {\n          domain: \"nfid.vaults\",\n          label: wallet.name ?? \"\",\n          accountId: wallet.uid,\n        },\n        principalId: principal.toText(),\n        address: address,\n        balance: { ICP: balance },\n        vaultId: wallet?.vaultId,\n        vaultName: wallet?.vaultName,\n      }\n    }),\n  )\n}\n\nexport async function fetchVaultWalletsBalances(\n  wallets: Wallet[],\n): Promise<Wallet[]> {\n  return await Promise.all(\n    wallets.map(async (wallet) => {\n      const principal = Principal.fromText(VAULT_CANISTER_ID)\n      const balance = await getICPBalance(\n        principalToAddress(principal, fromHexString(wallet.uid)),\n      )\n\n      return {\n        ...wallet,\n        address: principalToAddress(principal, fromHexString(wallet.uid)),\n        balance: { ICP: balance },\n      }\n    }),\n  )\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Chain, getGlobalKeys } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { RootWallet, accessList, authState } from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"../facade/wallet\"\nimport { fetchProfile } from \"../identity-manager\"\n\nexport const getWalletDelegationAdapter = async (\n  domain = \"nfid.one\",\n  accountId = \"0\",\n  targetCanisters: string[] = [],\n): Promise<DelegationIdentity> => {\n  const profile = await fetchProfile()\n  if (accountId !== \"-1\" && profile.wallet === RootWallet.II)\n    return await getWalletDelegation(profile.anchor, domain, accountId)\n  else\n    return await getGlobalKeys(\n      authState.get().delegationIdentity!,\n      Chain.IC,\n      accessList.concat(targetCanisters),\n    )\n}\n","import { Principal } from \"@dfinity/principal\"\nimport {\n  decodeTokenIdentifier,\n  encodeTokenIdentifier,\n  principalToAddress,\n} from \"ictool\"\n\nimport { Account } from \"@nfid/integration\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { mapToNFTData } from \"./mapper\"\nimport {\n  CollectionCache,\n  DisplayFormat,\n  EntrepotCollection,\n  EntrepotDisplayFormat,\n  EntrepotToken,\n  TokenCache,\n  UserNFTDetails,\n} from \"./types\"\n\nconst API = \"https://us-central1-entrepot-api.cloudfunctions.net/api\"\nconst TREASURECANISTER = \"yigae-jqaaa-aaaah-qczbq-cai\"\n\nlet collectionsCache: Promise<CollectionCache>\nconst tokenCache: TokenCache = {}\n\n/**\n * Fetch and cache all known NFT collections from entrepot API.\n */\nexport async function fetchCollections(): Promise<CollectionCache> {\n  if (!collectionsCache) {\n    collectionsCache = fetch(`${API}/collections`)\n      .then((r) => r.json())\n      .then((r: EntrepotCollection[]) =>\n        r.reduce(\n          (agg, x) => ({\n            ...agg,\n            [x.id]: x,\n          }),\n          {},\n        ),\n      )\n  }\n  return collectionsCache\n}\n\n/**\n * Fetch a specific collection from the cache.\n */\nexport async function fetchCollection(\n  canisterId: string,\n): Promise<EntrepotCollection> {\n  const collection = (await fetchCollections())[canisterId]\n  if (!collection) throw new Error(`Unknown collection ${canisterId}`)\n  return collection\n}\n\n/**\n * Fetch and cache all tokens from a specific token canister.\n */\nexport async function fetchCollectionTokens(\n  collectionId: string,\n): Promise<EntrepotToken[]> {\n  if (!tokenCache[collectionId]) {\n    const tokens: EntrepotToken[] = await fetch(\n      `${API}/maddies/getNftCollection/${collectionId}`,\n    ).then((r) => r.json())\n    tokenCache[collectionId] = tokens\n  }\n  return tokenCache[collectionId]\n}\n\n/**\n * Determines asset path using compatability code from Entrepot source.\n */\nfunction entrepotAsset(\n  collection: EntrepotCollection,\n  token: EntrepotToken,\n  fullSize: boolean,\n) {\n  const { index } = decodeTokenIdentifier(token.tokenId)\n  if (collection.id === \"jeghr-iaaaa-aaaah-qco7q-cai\")\n    return `https://fl5nr-xiaaa-aaaai-qbjmq-cai.raw.ic0.app/nft/${index}`\n  if (collection.id === \"bxdf4-baaaa-aaaah-qaruq-cai\")\n    return `https://qcg3w-tyaaa-aaaah-qakea-cai.raw.ic0.app/Token/${index}`\n  if (collection.id === \"y3b7h-siaaa-aaaah-qcnwa-cai\")\n    return `https://4nvhy-3qaaa-aaaah-qcnoq-cai.raw.ic0.app/Token/${index}`\n  if (collection.id === \"3db6u-aiaaa-aaaah-qbjbq-cai\")\n    return `https://d3ttm-qaaaa-aaaai-qam4a-cai.raw.ic0.app?tokenId=${index}`\n  if (collection.id === \"q6hjz-kyaaa-aaaah-qcama-cai\") return icpbunnyimg(index)\n  if (collection.id === \"pk6rk-6aaaa-aaaae-qaazq-cai\") {\n    if (fullSize) {\n      return `https://${collection.id}.raw.ic0.app/?tokenid=${token.tokenId}`\n    } else {\n      return `https://images.entrepot.app/t/7budn-wqaaa-aaaah-qcsba-cai/${token.tokenId}`\n    }\n  }\n  if (collection.id === \"dhiaa-ryaaa-aaaae-qabva-cai\") {\n    if (fullSize) {\n      return `https://${collection.id}.raw.ic0.app/?tokenid=${token.tokenId}`\n    } else {\n      return `https://images.entrepot.app/tnc/qtejr-pqaaa-aaaah-qcyvq-cai/${token.tokenId}`\n    }\n  }\n  if (collection.id === \"skjpp-haaaa-aaaae-qac7q-cai\") {\n    if (fullSize) {\n      return `https://${collection.id}.raw.ic0.app/?tokenid=${token.tokenId}`\n    } else {\n      return `https://images.entrepot.app/tnc/wtwf2-biaaa-aaaam-qauoq-cai/${token.tokenId}`\n    }\n  }\n  if (collection.id === TREASURECANISTER) {\n    if (!fullSize) {\n      return \"/earn/loading.png\"\n    }\n  }\n  if (fullSize) {\n    return `https://${collection.id}.raw.ic0.app/?tokenid=${token.tokenId}`\n  } else {\n    //add collections with wearables or other dynamic traits here\n    //these images will not be cached\n    if (collection.id === \"rxrsz-5aaaa-aaaam-qaysa-cai\")\n      return `https://images.entrepot.app/tnc/${collection.id}/${token.tokenId}`\n    if (collection.id === \"sbcwr-3qaaa-aaaam-qamoa-cai\")\n      return `https://images.entrepot.app/tnc/${collection.id}/${token.tokenId}`\n    if (collection.id === \"yrdz3-2yaaa-aaaah-qcvpa-cai\")\n      return `https://images.entrepot.app/tnc/${collection.id}/${token.tokenId}`\n    if (collection.id === \"rw7qm-eiaaa-aaaak-aaiqq-cai\")\n      return `https://images.entrepot.app/tnc/${collection.id}/${token.tokenId}`\n    if (collection.id === \"5movr-diaaa-aaaak-aaftq-cai\")\n      return `https://images.entrepot.app/tnc/${collection.id}/${token.tokenId}`\n    if (collection.id === \"dhyds-jaaaa-aaaao-aaiia-cai\")\n      return `https://images.entrepot.app/tnc/${collection.id}/${token.tokenId}`\n    //end of section\n\n    if (collection.id === \"6wih6-siaaa-aaaah-qczva-cai\")\n      return `https://${\n        collection.id\n      }.raw.ic0.app/?cc${Date.now()}&type=thumbnail&tokenid=${token.tokenId}`\n    if (collection.id === \"kss7i-hqaaa-aaaah-qbvmq-cai\")\n      return `https://${collection.id}.raw.ic0.app/?type=thumbnail&tokenid=${token.tokenId}`\n    return `https://images.entrepot.app/t/${collection.id}/${token.tokenId}`\n  }\n}\n\nexport function getEntrepotDisplayFormat(\n  collection: EntrepotCollection,\n  token: EntrepotToken,\n): EntrepotDisplayFormat {\n  const { index } = decodeTokenIdentifier(token.tokenId)\n  // Motoko Mechs specific\n  if (token.canisterId === \"ugdkf-taaaa-aaaak-acoia-cai\") {\n    return \"motoko_mechs\"\n  }\n\n  if (index === 99 && token.canisterId === \"kss7i-hqaaa-aaaah-qbvmq-cai\")\n    return \"interactive_nfts_or_videos\"\n\n  if (collection.detailpage) return collection.detailpage\n\n  return \"default\"\n}\n\nexport function getDisplayFormat(format: EntrepotDisplayFormat): DisplayFormat {\n  switch (format) {\n    case \"interactive_nfts_or_videos\":\n      return \"iframe\"\n    case \"videos_that_dont_fit_in_frame\":\n      return \"video\"\n    case \"\":\n    case \"default\":\n    case \"asset_canisters\":\n    case \"generative_assets_on_nft_canister\":\n    case \"motoko_mechs\":\n    default:\n      return \"img\"\n  }\n}\n\n/**\n * Retrieve preview image asset for NFT.\n */\nexport function assetPreview(\n  collection: EntrepotCollection,\n  token: EntrepotToken,\n): string {\n  return entrepotAsset(collection, token, false)\n}\n\n/**\n * Retrieve fullsize asset for NFT. Assets have variable mime types and  must be rendered correctly based on returned type.\n */\nexport async function assetFullsize(\n  collection: EntrepotCollection,\n  token: EntrepotToken,\n): Promise<{\n  url: string\n  format: DisplayFormat\n}> {\n  const url = entrepotAsset(collection, token, true)\n  const _format = getEntrepotDisplayFormat(collection, token)\n  const format = getDisplayFormat(_format)\n  if (_format === \"default\") {\n    return { url: assetPreview(collection, token), format }\n  }\n  if (_format === \"asset_canisters\") {\n    return { url: await getImageDetailsUrl(url), format }\n  }\n  if (_format === \"videos_that_dont_fit_in_frame\") {\n    return { url: await getVideoDetailsUrl(url), format }\n  }\n  return { url, format }\n}\n\n/**\n * Determines canister ID for given ICP Bunnies token index.\n */\nfunction icpbunnyimg(index: number) {\n  const icbstorage = [\n    \"efqhu-yqaaa-aaaaf-qaeda-cai\",\n    \"ecrba-viaaa-aaaaf-qaedq-cai\",\n    \"fp7fo-2aaaa-aaaaf-qaeea-cai\",\n    \"fi6d2-xyaaa-aaaaf-qaeeq-cai\",\n    \"fb5ig-bqaaa-aaaaf-qaefa-cai\",\n    \"fg4os-miaaa-aaaaf-qaefq-cai\",\n    \"ft377-naaaa-aaaaf-qaega-cai\",\n    \"fu2zl-ayaaa-aaaaf-qaegq-cai\",\n    \"f5zsx-wqaaa-aaaaf-qaeha-cai\",\n    \"f2yud-3iaaa-aaaaf-qaehq-cai\",\n  ]\n  return `https://${icbstorage[index % 10]}.raw.ic0.app/Token/${index}`\n}\n\n/**\n * Retrieve primary link to NFT. This is some hard-coded stuff taken from Entrepot source code to improve compatability.\n */\nexport function getTokenLink(canister: string, index: number): string {\n  const id = encodeTokenIdentifier(canister, index)\n  if (canister === \"jeghr-iaaaa-aaaah-qco7q-cai\")\n    return `https://fl5nr-xiaaa-aaaai-qbjmq-cai.raw.ic0.app/nft/${index}`\n  if (canister === \"bxdf4-baaaa-aaaah-qaruq-cai\")\n    return `https://qcg3w-tyaaa-aaaah-qakea-cai.raw.ic0.app/Token/${index}`\n  if (canister === \"y3b7h-siaaa-aaaah-qcnwa-cai\")\n    return `https://4nvhy-3qaaa-aaaah-qcnoq-cai.raw.ic0.app/Token/${index}`\n  if (canister === \"3db6u-aiaaa-aaaah-qbjbq-cai\")\n    return `https://d3ttm-qaaaa-aaaai-qam4a-cai.raw.ic0.app?tokenId=${index}`\n  if (canister === \"q6hjz-kyaaa-aaaah-qcama-cai\") return icpbunnyimg(index)\n  return `https://${canister}.raw.ic0.app/?tokenid=${id}`\n}\n\n/**\n * Extract usable image from\n */\nexport async function getImageDetailsUrl(url: string): Promise<string> {\n  const regExp = /image href=\"([^\"]+)\"/\n  const response = await fetch(url)\n  const blob = await response.blob()\n  const text = await blob.text()\n  const simplifiedText = text.replace(\"\\n\", \" \").replace(/\\s{2,}/, \" \")\n  const result = simplifiedText.match(regExp)?.[1]\n  if (!result) throw new Error(\"Could not extract image\")\n  return result\n}\n\nexport async function getVideoDetailsUrl(url: string) {\n  const regExp = /source src=\"([^\"]+)\"/\n  const regExp2 = 'URL=([^\"]+)\"'\n  const response = await fetch(url)\n  const blob = await response.blob()\n  const text = await blob.text()\n  const simplifiedText = text.replace(\"\\n\", \" \").replace(/\\s{2,}/, \" \")\n  if (simplifiedText.includes(\"URL=\")) {\n    const result = simplifiedText.match(regExp2)?.[1]\n    if (!result) throw new Error(\"Could not extract video\")\n    return result\n  } else if (simplifiedText.includes(\"source\")) {\n    const result = simplifiedText.match(regExp)?.[1]\n    if (!result) throw new Error(\"Could not extract video\")\n    return result\n  } else {\n    const result = url\n    if (!result) throw new Error(\"Could not extract video\")\n    return result\n  }\n}\n\nexport async function fetchNFTsOfPrincipals(\n  inputData: { principal: Principal; account: Account }[],\n): Promise<UserNFTDetails[]> {\n  const response = await Promise.all(\n    inputData.map(async ({ principal, account }) => {\n      const address: string = principalToAddress(principal as any)\n      return await fetch(`${API}/maddies/getAllNfts/${address}`)\n        .then((r) => r.json())\n        .then((r: EntrepotToken[]) => mapToNFTData(r, principal, account))\n    }),\n  )\n  return response.flat().map((nft) => ({ ...nft, blockchain: Blockchain.IC }))\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { decodeTokenIdentifier } from \"ictool\"\n\nimport { Account } from \"@nfid/integration\"\n\nimport { collection, token } from \".\"\nimport { EntrepotToken, UserNFTDetails } from \"./types\"\n\nexport async function mapToNFTData(\n  response: EntrepotToken[],\n  principal: Principal,\n  account: Account,\n): Promise<UserNFTDetails[]> {\n  return (\n    await Promise.all(\n      response.map(async (entrepotNFT) => {\n        let _token\n\n        try {\n          const _collection = await collection(entrepotNFT.canisterId)\n          const { index } = decodeTokenIdentifier(entrepotNFT.tokenId)\n          _token = await token(_collection, response, index)\n        } catch (e) {\n          console.log(\"mapToNFTData\", { e })\n        }\n\n        return { ..._token, principal, account } as UserNFTDetails\n      }),\n    )\n  ).filter((nft) => nft?.tokenId && nft?.collection?.id)\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { encodeTokenIdentifier } from \"ictool\"\n\nimport { Account } from \"@nfid/integration\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport {\n  assetFullsize,\n  assetPreview,\n  fetchCollection,\n  fetchCollections,\n  fetchCollectionTokens,\n  fetchNFTsOfPrincipals,\n  getTokenLink,\n} from \"./lib\"\nimport type {\n  EntrepotCollection,\n  EntrepotToken,\n  NFTDetails,\n  UserNFTDetails,\n} from \"./types\"\n\n/**\n * Retrieve all known NFT collections.\n */\nexport async function collections(): Promise<EntrepotCollection[]> {\n  return Object.values(await fetchCollections())\n}\n\n/**\n * Retrieve details for a specific collection.\n * @param id Canister ID of the collection.\n */\nexport async function collection(id: string): Promise<EntrepotCollection> {\n  return fetchCollection(id)\n}\n\n/**\n * Retrieve details for a specific token.\n */\nexport async function token(\n  collection: EntrepotCollection,\n  tokens: EntrepotToken[],\n  index: number,\n): Promise<NFTDetails> {\n  const tokenId = encodeTokenIdentifier(collection.id, index)\n  const token = tokens.find((token) => token.tokenId === tokenId)\n  if (!token) {\n    throw new Error(\n      `Could not find token #${index} of ${collection.name} (${collection.id})`,\n    )\n  }\n  return {\n    collection,\n    canisterId: collection.id,\n    index,\n    tokenId,\n    name: `${collection.name} #${index}`,\n    assetPreview: {\n      url: assetPreview(collection, token),\n      format: \"img\",\n    },\n    assetFullsize: await assetFullsize(collection, token),\n    blockchain: Blockchain.IC,\n  }\n}\n\n/**\n * Retrieve tokens for a given collection.\n */\nexport async function tokens(\n  collection: EntrepotCollection,\n): Promise<EntrepotToken[]> {\n  return Promise.all(await fetchCollectionTokens(collection.id))\n}\n\n/**\n * Retrieve link to NFT.\n */\nexport function link(canister: string, index: number): string {\n  return getTokenLink(canister, index)\n}\n\n/**\n * Retrieve all NFTs for the given principals.\n */\nexport async function principalTokens(\n  inputData: { principal: Principal; account: Account }[],\n): Promise<UserNFTDetails[]> {\n  return (await fetchNFTsOfPrincipals(inputData)).flat()\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Principal } from \"@dfinity/principal\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { WALLET_SCOPE, WALLET_SESSION_TTL_2_MIN_IN_NS } from \"@nfid/config\"\nimport {\n  getScope,\n  getLocalStorageOverride,\n  delegationState,\n} from \"@nfid/integration\"\n\nimport { fetchPrincipal } from \"frontend/integration/internet-identity\"\n\nexport async function getWalletPrincipal(anchor: number): Promise<Principal> {\n  return fetchPrincipal(anchor, WALLET_SCOPE).catch((e) => {\n    throw Error(`Getting of Wallet Principal failed!: ${e}`, e)\n  })\n}\n\nexport async function getWalletDelegation(\n  userNumber: number,\n  hostName?: string,\n  personaId?: string,\n  chain: Chain = Chain.IC,\n): Promise<DelegationIdentity> {\n  const scope =\n    typeof hostName === \"undefined\" || hostName === \"nfid.one\"\n      ? WALLET_SCOPE\n      : getScope(hostName, personaId)\n\n  return delegationState.getDelegation(\n    userNumber,\n    scope,\n    BigInt(\n      getLocalStorageOverride(\n        WALLET_SESSION_TTL_2_MIN_IN_NS,\n        \"NFID_WALLET_DELEGATION_TTL_NS\",\n      ),\n    ),\n  )\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\ninterface CenterEllipsisProps\n  extends React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > {\n  value: string\n  trailingChars: number\n  leadingChars: number\n  id?: string\n}\n\nexport const CenterEllipsis = React.forwardRef<\n  HTMLDivElement,\n  CenterEllipsisProps\n>(({ value, leadingChars, trailingChars, ...divProps }, ref) => {\n  const splitAt = value.length - trailingChars\n  return (\n    <div ref={ref} className=\"flex min-w-0\" {...divProps}>\n      <div\n        id={\"first_part\"}\n        className={clsx(\"overflow-hidden whitespace-nowrap\")}\n      >\n        {value.slice(0, leadingChars)}\n      </div>\n      <div>...</div>\n      <div id={\"second_part\"} className=\"flex-shrink-0\">\n        {value.slice(splitAt)}\n      </div>\n    </div>\n  )\n})\n","import { CacheContainer } from \"node-ts-cache\"\nimport { MemoryStorage } from \"node-ts-cache-storage-memory\"\n\nexport const connectorCache = new CacheContainer(new MemoryStorage())\n\nexport const resetCachesByKey = (keys: string[], callback?: () => void) => {\n  keys.map((key) => connectorCache.setItem(key, undefined, {}))\n  callback && callback()\n}\n","import clsx from \"clsx\"\nimport { useEffect, useState } from \"react\"\n\ninterface IToggleButton {\n  className?: string\n  firstValue: string\n  secondValue: string\n  onChange: (value: boolean) => void\n  defaultValue?: boolean\n  id?: string\n}\n\nexport const ToggleButton: React.FC<IToggleButton> = ({\n  firstValue,\n  secondValue,\n  className,\n  onChange,\n  defaultValue,\n  id,\n}) => {\n  const [value, setValue] = useState(defaultValue ?? false)\n\n  useEffect(() => {\n    onChange(value)\n  }, [onChange, value])\n\n  return (\n    <div\n      className={clsx(\n        \"w-full h-7 rounded-md bg-gray-100 cursor-pointer\",\n        \"grid grid-cols-2 relative select-none\",\n        className,\n      )}\n      onClick={() => setValue(!value)}\n      id={id}\n    >\n      <div\n        className={clsx(\n          \"text-center text-black\",\n          \"font-semibold text-xs leading-7\",\n        )}\n      >\n        {firstValue}\n      </div>\n      <div\n        className={clsx(\n          \"text-center text-black\",\n          \"font-semibold text-xs leading-7\",\n        )}\n      >\n        {secondValue}\n      </div>\n      <div\n        className={clsx(\n          \"absolute h-7 w-1/2 rounded-md\",\n          \"bg-blue-600 leading-7 text-xs\",\n          \"text-center text-white font-semibold\",\n          \"transition-transform\",\n          value && \"translate-x-full\",\n        )}\n      >\n        {!value ? firstValue : secondValue}\n      </div>\n    </div>\n  )\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Cache } from \"node-ts-cache\"\nimport { getPrice } from \"packages/integration/src/lib/asset/asset-util\"\nimport { applicationToAccount } from \"packages/integration/src/lib/identity-manager/application/application-to-account\"\n\nimport { IGroupOption, IGroupedOptions } from \"@nfid-frontend/ui\"\nimport {\n  Account,\n  Application,\n  PrincipalAccount,\n  Profile,\n  RootWallet,\n  fetchPrincipals,\n} from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { getWalletDelegationAdapter } from \"frontend/integration/adapters/delegations\"\nimport {\n  fetchAccounts,\n  fetchApplications,\n  fetchProfile,\n} from \"frontend/integration/identity-manager\"\n\nimport { connectorCache } from \"../cache\"\nimport {\n  ITransferConfig,\n  ITransferFTRequest,\n  ITransferModalConnector,\n  ITransferNFTRequest,\n  ITransferResponse,\n  TokenFee,\n} from \"./types\"\n\nexport abstract class TransferModalConnector<T extends ITransferConfig>\n  implements ITransferModalConnector\n{\n  protected config: T\n\n  constructor(config: T) {\n    this.config = config\n  }\n\n  getTokenConfig(currency?: string): any {\n    return this.config\n  }\n\n  getTokenCurrencies(): Promise<string[]> {\n    return Promise.resolve([this.config.tokenStandard])\n  }\n\n  getNetworkOption(): IGroupOption {\n    return {\n      title: this.config.blockchain,\n      icon: this.config.icon,\n      value: `${this.config.tokenStandard}&${this.config.blockchain}`,\n    }\n  }\n\n  getTokensOptions(): Promise<IGroupedOptions> {\n    return Promise.resolve({\n      label: this.config.blockchain,\n      options: [\n        {\n          icon: this.config.icon,\n          title: this.config.tokenStandard,\n          value: this.config.tokenStandard + \"&\" + this.config.blockchain,\n          subTitle: this.config.tokenStandard,\n        },\n      ],\n    })\n  }\n\n  getTokenStandard(): TokenStandards {\n    return this.config.tokenStandard\n  }\n\n  shouldHavePrincipal(): boolean {\n    return !!this.config?.shouldHavePrincipal\n  }\n\n  abstract getFee(\n    request: ITransferFTRequest | ITransferNFTRequest,\n  ): Promise<TokenFee>\n  abstract transfer(\n    request: ITransferFTRequest | ITransferNFTRequest,\n  ): Promise<ITransferResponse>\n  abstract getAccountsOptions({\n    currency,\n    isVault,\n  }: {\n    currency?: string\n    isVault?: boolean\n  }): Promise<IGroupedOptions[]>\n  abstract validateAddress(address: string): string | boolean\n\n  protected async getAllPrincipals<T extends boolean>(\n    groupedById: T,\n  ): Promise<\n    T extends true ? Record<string, PrincipalAccount[]> : PrincipalAccount[]\n  > {\n    const profile = await this.getProfile()\n    const accounts = await this.getAccounts(true)\n\n    const principals = await fetchPrincipals(\n      BigInt(profile.anchor),\n      accounts,\n      profile.wallet === RootWallet.NFID,\n    )\n    if (!groupedById) return principals as any\n\n    return principals.reduce(\n      (\n        groupedAccounts: Record<string, PrincipalAccount[]>,\n        principal: PrincipalAccount,\n      ) => {\n        !!groupedAccounts[principal.account.domain]\n          ? groupedAccounts[principal.account.domain].push(principal)\n          : (groupedAccounts[principal.account.domain] = [principal])\n\n        return groupedAccounts\n      },\n      {},\n    ) as any\n  }\n\n  @Cache(connectorCache, { ttl: 120 })\n  protected async getProfile(): Promise<Profile> {\n    return await fetchProfile()\n  }\n\n  @Cache(connectorCache, { ttl: 120 })\n  protected async getAccounts(\n    extendWithFixedAccounts: boolean = false,\n  ): Promise<Account[]> {\n    const accounts = await fetchAccounts()\n    if (!extendWithFixedAccounts) return accounts\n\n    const applications = await this.getApplications()\n    const fixedAccounts = applications\n      .filter((app) => app.isNftStorage)\n      .map(applicationToAccount)\n\n    return fixedAccounts.reduce((acc, account) => {\n      const accountAlreadyAdded = acc.find(\n        (a) => a.domain === account.domain && a.accountId === account.accountId,\n      )\n      if (accountAlreadyAdded) {\n        return acc\n      }\n      return [...acc, account]\n    }, accounts)\n  }\n\n  @Cache(connectorCache, { ttl: 180 })\n  protected async getApplications(): Promise<Application[]> {\n    return await fetchApplications()\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getRate(currency: string): Promise<string> {\n    return (\n      (await getPrice([currency])).find((t) => t.token === currency)?.price ??\n      \"0\"\n    )\n  }\n\n  async getIdentity(\n    domain = \"nfid.one\",\n    accountId = \"0\",\n    targetCanisters: string[],\n  ): Promise<DelegationIdentity> {\n    return getWalletDelegationAdapter(domain, accountId, targetCanisters)\n  }\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAsset } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupOption, IGroupedOptions } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\n\nimport { Blockchain, NativeToken, StandardizedToken } from \"../types\"\n\nexport enum TransferModalType {\n  FT = \"ft\",\n  FT20 = \"ft20\",\n  NFT = \"nft\",\n}\n\nexport type ITransferConfig = {\n  title?: string\n  type: TransferModalType\n  icon: string\n  tokenStandard: TokenStandards\n  blockchain: Blockchain\n  feeCurrency?: NativeToken\n  shouldHavePrincipal?: boolean\n  addressPlaceholder: string\n  assetService?: FungibleAsset\n  isNativeToken?: boolean\n  duration: string\n}\n\nexport interface ITransferModalConnector\n  extends StandardizedToken<TokenStandards> {\n  getTokenConfig(currency?: string): ITransferConfig\n  getTokenCurrencies(): Promise<string[]>\n  getAccountsOptions({\n    currency,\n    isVault,\n    isRootOnly,\n  }: {\n    currency?: string\n    isVault?: boolean\n    isRootOnly?: boolean\n  }): Promise<IGroupedOptions[]>\n  getRate(currency: string): Promise<string>\n\n  getNetworkOption(): IGroupOption\n  getTokensOptions(): Promise<IGroupedOptions>\n  shouldHavePrincipal(): boolean\n\n  validateAddress(address: string): boolean | string\n  transfer(\n    request: ITransferFTRequest | ITransferNFTRequest,\n  ): Promise<ITransferResponse>\n\n  getIdentity(\n    domain?: string,\n    accountId?: string,\n    targetCanisters?: string[],\n  ): Promise<DelegationIdentity>\n}\n\nexport type ITransferFTConnector = {\n  getBalance(address?: string, currency?: string): Promise<TokenBalance>\n  getAddress(address?: string, identity?: DelegationIdentity): Promise<string>\n  getFee(request: ITransferFTRequest | ITransferNFTRequest): Promise<TokenFee>\n} & ITransferModalConnector\n\nexport type ITransferNFTConnector = {\n  getNFTs(): Promise<UserNonFungibleToken[]>\n  getNFTOptions(): Promise<IGroupedOptions[]>\n  getFee(request: ITransferFTRequest | ITransferNFTRequest): Promise<TokenFee>\n} & ITransferModalConnector\n\nexport type IUniversalConnector = ITransferFTConnector | ITransferNFTConnector\n\nexport type IGetConnector<T extends TransferModalType> = {\n  type?: T\n  currency?: string\n  tokenStandard?: string\n  blockchain: string\n}\n\nexport type IConnector<T extends TransferModalType> =\n  T extends TransferModalType.FT ? ITransferFTConnector : ITransferNFTConnector\n\nexport type TokenBalance = { balance: string; balanceinUsd: string }\nexport type TokenFee = { fee: string; feeUsd: string }\n\nexport type IConfirmEVMRequest = {\n  cacheKey: string\n}\n\nexport type ITransferRequest = {\n  to: string\n  contract: string\n  identity?: DelegationIdentity\n}\n\nexport type ITransferFTRequest = {\n  currency: string\n  amount: number\n} & ITransferRequest\n\nexport type ITransferNFTRequest = {\n  tokenId: string\n  standard: string\n} & ITransferRequest\n\nexport interface ITransferResponse {\n  verifyPromise?: Promise<void>\n  errorMessage?: Error\n  url?: string\n}\n","import { IGroupedOptions } from \"@nfid-frontend/ui\"\nimport { truncateString } from \"@nfid-frontend/utils\"\n\nexport const makeRootAccountGroupedOptions = (\n  address: string,\n  balance: string,\n  usdBalance: string,\n  currency: string,\n): IGroupedOptions => ({\n  label: \"NFID\",\n  options: [\n    {\n      title: \"NFID\",\n      badgeText: \"WALLET\",\n      subTitle: truncateString(address, 6, 4),\n      value: address,\n      innerTitle: balance + \" \" + currency,\n      innerSubtitle: usdBalance,\n    },\n  ],\n})\n\nexport const concatOptionsWithSameLabel = (options: IGroupedOptions[]) => {\n  const mergedTokens = options.reduce<{\n    [label: string]: IGroupedOptions\n  }>((acc, item) => {\n    if (!acc[item.label]) {\n      acc[item.label] = item\n    } else {\n      acc[item.label].options = acc[item.label].options.concat(item.options)\n    }\n    return acc\n  }, {})\n\n  return Object.values(mergedTokens)\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { toBn } from \"@rarible/utils\"\nimport { Cache } from \"node-ts-cache\"\nimport { getPrice } from \"packages/integration/src/lib/asset/asset-util\"\nimport { BtcAsset } from \"packages/integration/src/lib/bitcoin-wallet/btc-asset\"\nimport { BtcWallet } from \"packages/integration/src/lib/bitcoin-wallet/btc-wallet\"\n\nimport { IGroupedOptions, IconSvgBTC } from \"@nfid-frontend/ui\"\nimport { authState } from \"@nfid/integration\"\nimport { E8S } from \"@nfid/integration/token/icp\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { e8sICPToString } from \"frontend/integration/wallet/utils\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { TransferModalConnector } from \"../transfer-modal\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  ITransferResponse,\n  TokenBalance,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport { makeRootAccountGroupedOptions } from \"../util/options\"\n\nexport class BtcTransferConnector\n  extends TransferModalConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 30 })\n  async getAddress(): Promise<string> {\n    const identity = await this.getIdentity()\n    return await new BtcAsset().getAddress(identity)\n  }\n\n  @Cache(connectorCache, { ttl: 30 })\n  async getBalance(): Promise<TokenBalance> {\n    const identity = await this.getIdentity()\n    const tokenSheet = await new BtcAsset().getRootAccount(identity)\n\n    return {\n      balance: e8sICPToString(Number(tokenSheet.tokenBalance)),\n      balanceinUsd: tokenSheet.usdBalance,\n    }\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getAccountsOptions(): Promise<IGroupedOptions[]> {\n    const address = await this.getAddress()\n    const balance = await this.getBalance()\n\n    return [\n      makeRootAccountGroupedOptions(\n        address,\n        balance.balance?.toString() ?? \"\",\n        balance.balanceinUsd,\n        this.config.tokenStandard,\n      ),\n    ]\n  }\n\n  validateAddress(address: string): boolean | string {\n    if (address.length < 26 || address.length > 35)\n      return \"Address length should be from 27 to 34 characters\"\n\n    return true\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({ to, amount }: ITransferFTRequest): Promise<TokenFee> {\n    const identity = await this.getIdentity()\n    const fee = await new BtcWallet(identity).getFee(\n      to,\n      toBn(amount).multipliedBy(E8S).toNumber(),\n    )\n    const rate = await getPrice([\"BTC\"])\n\n    return {\n      fee: `${e8sICPToString(Number(fee))} ${this.config.feeCurrency}`,\n      feeUsd: String(Number(rate[0].price) * (fee / E8S)),\n    }\n  }\n\n  async transfer(request: ITransferFTRequest): Promise<ITransferResponse> {\n    const identity = await this.getIdentity()\n\n    let result: ITransferResponse\n\n    try {\n      const response = await new BtcAsset().transfer(identity, request)\n\n      result = {\n        url: `https://live.blockcypher.com/btc-testnet/tx/${response}/`,\n      }\n    } catch (e: any) {\n      result = {\n        errorMessage: e.message ?? \"Unknown error\",\n      }\n    }\n\n    return result\n  }\n\n  getIdentity = (): Promise<DelegationIdentity> => {\n    return new Promise((resolve, reject) => {\n      const { delegationIdentity } = authState.get()\n      if (!delegationIdentity) {\n        reject(Error(\"Delegation identity error\"))\n      } else {\n        resolve(delegationIdentity)\n      }\n    })\n  }\n}\n\nexport const btcTransferConnector = new BtcTransferConnector({\n  icon: IconSvgBTC,\n  tokenStandard: TokenStandards.BTC,\n  blockchain: Blockchain.BITCOIN,\n  feeCurrency: NativeToken.BTC,\n  title: \"Bitcoin\",\n  addressPlaceholder: \"Recipient Bitcoin address\",\n  type: TransferModalType.FT,\n  isNativeToken: true,\n  duration: \"1.5 hours\",\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Cache } from \"node-ts-cache\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions } from \"@nfid-frontend/ui\"\nimport { authState } from \"@nfid/integration\"\n\nimport { connectorCache } from \"../cache\"\nimport { TransferModalConnector } from \"./transfer-modal\"\nimport {\n  ITransferConfig,\n  ITransferFTRequest,\n  ITransferNFTRequest,\n  ITransferResponse,\n  TokenBalance,\n} from \"./types\"\nimport { makeRootAccountGroupedOptions } from \"./util/options\"\n\nexport abstract class EVMTransferConnector<\n  ConfigType extends ITransferConfig,\n> extends TransferModalConnector<ConfigType> {\n  async transfer(\n    request: ITransferFTRequest | ITransferNFTRequest,\n  ): Promise<ITransferResponse> {\n    const cacheKey =\n      \"tokenId\" in request\n        ? `nft_${request.tokenId}_transaction`\n        : `${request.currency}_transaction`\n\n    const identity = await this.getIdentity()\n    const transaction = await connectorCache.getItem<EstimatedTransaction>(\n      cacheKey,\n    )\n\n    let result: ITransferResponse\n\n    try {\n      if (!transaction)\n        throw new Error(\"Populated transaction not found. Please try again\")\n\n      const response = await this.config.assetService.transfer(\n        identity,\n        transaction.transaction,\n      )\n\n      result = {\n        verifyPromise: response.waitOnChain,\n        url: response.etherscanTransactionUrl,\n      }\n    } catch (e: any) {\n      result = {\n        errorMessage: e.message ?? \"Unknown error\",\n      }\n    }\n\n    return result\n  }\n\n  validateAddress(address: string): boolean | string {\n    if (address.length !== 42) return \"Address length should be 42 characters\"\n    if (!address.startsWith(\"0x\")) return \"Address should starts with 0x\"\n\n    return true\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getAddress(): Promise<string> {\n    const identity = await this.getIdentity()\n    return await this.config.assetService.getAddress(identity)\n  }\n\n  async getBalance(): Promise<TokenBalance> {\n    const address = await this.getAddress()\n    const balance = await this.config.assetService.getBalance(address)\n\n    return {\n      balance: balance.balance,\n      balanceinUsd: balance.balanceinUsd,\n    }\n  }\n\n  async getAccountsOptions({\n    currency,\n  }: {\n    currency?: string\n  }): Promise<IGroupedOptions[]> {\n    const address = await this.getAddress()\n    const balance = await this.getBalance()\n\n    return [\n      makeRootAccountGroupedOptions(\n        address,\n        balance.balance?.toString() ?? \"\",\n        `$${balance.balanceinUsd ?? \"0.00\"}`,\n        this.config.tokenStandard,\n      ),\n    ]\n  }\n\n  async getIdentity(): Promise<DelegationIdentity> {\n    const { delegationIdentity } = authState.get()\n\n    return delegationIdentity!\n  }\n}\n","import { Cache } from \"node-ts-cache\"\nimport { Erc20EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/erc20-populate-transaction.service\"\nimport { Token } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, IconERC20 } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { EVMTransferConnector } from \"../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenBalance,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport { makeRootAccountGroupedOptions } from \"../util/options\"\n\nexport class EthERC20TransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenMetadata(currency: string): Promise<Token> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return { ...this.config, ...token }\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getBalance(_?: string, currency?: string): Promise<TokenBalance> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return Promise.resolve({\n      balance: String(token.balance),\n      balanceinUsd: token.balanceinUsd,\n    })\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenCurrencies(): Promise<string[]> {\n    const tokens = await this.getTokens()\n    return tokens.map((token) => token.symbol)\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getTokens(): Promise<Token[]> {\n    const identity = await this.getIdentity()\n    return (await ethereumAsset.getErc20TokensByUser({ identity })).tokens\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokensOptions(): Promise<IGroupedOptions> {\n    const tokens = await this.getTokens()\n    return {\n      label: this.config.blockchain,\n      options: tokens.map((token) => ({\n        icon: token.logo ?? this.config.icon,\n        title: token.symbol,\n        subTitle: token.name,\n        value: `${token.symbol}&${this.config.blockchain}`,\n      })),\n    }\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getAccountsOptions({\n    currency,\n  }: {\n    currency?: string\n  }): Promise<IGroupedOptions[]> {\n    const address = await this.getAddress()\n    const balance = await this.getBalance(\"\", currency)\n\n    return [\n      makeRootAccountGroupedOptions(\n        address,\n        balance.balance?.toString() ?? \"\",\n        balance.balanceinUsd,\n        currency ?? \"\",\n      ),\n    ]\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    amount,\n    contract,\n    currency,\n  }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = currency + \"_transaction\"\n    const identity = await this.getIdentity()\n    const request = new Erc20EstimateTransactionRequest(\n      identity,\n      to,\n      contract,\n      amount,\n    )\n\n    const estimatedTransaction = await ethereumAsset.getEstimatedTransaction(\n      request,\n    )\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const ethereumERC20TransferConnector = new EthERC20TransferConnector({\n  tokenStandard: TokenStandards.ERC20_ETHEREUM,\n  blockchain: Blockchain.ETHEREUM,\n  feeCurrency: NativeToken.ETH,\n  icon: IconERC20,\n  addressPlaceholder: \"Recipient ETH address\",\n  type: TransferModalType.FT20,\n  assetService: ethereumAsset,\n  duration: \"10 min\",\n})\n","import { Cache } from \"node-ts-cache\"\nimport { EthTransferRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/eth-populate-transaction.service\"\n\nimport { IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { EVMTransferConnector } from \"../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\n\nexport class EthTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    amount,\n    currency,\n  }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = currency + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new EthTransferRequest(identity, to, amount)\n    const estimatedTransaction = await ethereumAsset.getEstimatedTransaction(\n      request,\n    )\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const ethereumTransferConnector = new EthTransferConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ETH,\n  blockchain: Blockchain.ETHEREUM,\n  feeCurrency: NativeToken.ETH,\n  addressPlaceholder: \"Recipient ETH address\",\n  type: TransferModalType.FT,\n  assetService: ethereumAsset,\n  isNativeToken: true,\n  duration: \"10 min\",\n})\n","import { Cache } from \"node-ts-cache\"\nimport { Erc20EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/erc20-populate-transaction.service\"\nimport { Token } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, IconERC20 } from \"@nfid-frontend/ui\"\nimport { ethereumGoerliAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { Blockchain, NativeToken } from \"frontend/ui/connnector/types\"\n\nimport { EVMTransferConnector } from \"../../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenBalance,\n  TokenFee,\n  TransferModalType,\n} from \"../../types\"\nimport { makeRootAccountGroupedOptions } from \"../../util/options\"\n\nexport class EthGoerliERC20TransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenMetadata(currency: string): Promise<Token> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return { ...this.config, ...token }\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getBalance(_?: string, currency?: string): Promise<TokenBalance> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return Promise.resolve({\n      balance: String(token.balance),\n      balanceinUsd: token.balanceinUsd,\n    })\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenCurrencies(): Promise<string[]> {\n    const tokens = await this.getTokens()\n    return tokens.map((token) => token.symbol)\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getTokens(): Promise<Token[]> {\n    const identity = await this.getIdentity()\n    return (await ethereumGoerliAsset.getErc20TokensByUser({ identity })).tokens\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokensOptions(): Promise<IGroupedOptions> {\n    const tokens = await this.getTokens()\n    return {\n      label: this.config.blockchain,\n      options: tokens.map((token) => ({\n        icon: token.logo ?? this.config.icon,\n        title: token.symbol,\n        subTitle: token.name,\n        value: `${token.symbol}&${this.config.blockchain}`,\n      })),\n    }\n  }\n\n  @Cache(connectorCache, { ttl: 60 })\n  async getAccountsOptions({\n    currency,\n  }: {\n    currency?: string\n  }): Promise<IGroupedOptions[]> {\n    const address = await this.getAddress()\n    const balance = await this.getBalance(\"\", currency)\n\n    return [\n      makeRootAccountGroupedOptions(\n        address,\n        balance.balance?.toString() ?? \"\",\n        balance.balanceinUsd,\n        currency ?? \"\",\n      ),\n    ]\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    amount,\n    contract,\n    currency,\n  }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = currency + \"_transaction\"\n    const identity = await this.getIdentity()\n    const request = new Erc20EstimateTransactionRequest(\n      identity,\n      to,\n      contract,\n      amount,\n    )\n\n    const estimatedTransaction =\n      await ethereumGoerliAsset.getEstimatedTransaction(request)\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const ethereumGoerliERC20TransferConnector =\n  new EthGoerliERC20TransferConnector({\n    tokenStandard: TokenStandards.ERC20_ETHEREUM,\n    blockchain: Blockchain.ETHEREUM_GOERLI,\n    feeCurrency: NativeToken.ETH,\n    icon: IconERC20,\n    addressPlaceholder: \"Recipient ETH address\",\n    type: TransferModalType.FT20,\n    assetService: ethereumGoerliAsset,\n    duration: \"10 min\",\n  })\n","import { Cache } from \"node-ts-cache\"\nimport { EthTransferRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/eth-populate-transaction.service\"\n\nimport { IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumGoerliAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { Blockchain, NativeToken } from \"frontend/ui/connnector/types\"\n\nimport { EVMTransferConnector } from \"../../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../../types\"\n\nexport class EthGoerliTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    amount,\n    currency,\n  }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = currency + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new EthTransferRequest(identity, to, amount)\n    const estimatedTransaction =\n      await ethereumGoerliAsset.getEstimatedTransaction(request)\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const ethereumGoerliTransferConnector = new EthGoerliTransferConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ETH,\n  blockchain: Blockchain.ETHEREUM_GOERLI,\n  feeCurrency: NativeToken.ETH,\n  addressPlaceholder: \"Recipient ETH address\",\n  type: TransferModalType.FT,\n  assetService: ethereumGoerliAsset,\n  isNativeToken: true,\n  duration: \"10 min\",\n})\n","import { Principal } from \"@dfinity/principal\"\nimport { NonFungibleItem } from \"packages/integration/src/lib/asset/types\"\n\nimport {\n  IGroupOption,\n  IGroupedOptions,\n  IconSvgDfinity,\n  MaticSvg,\n} from \"@nfid-frontend/ui\"\nimport { Application, getWalletName } from \"@nfid/integration\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\nimport { UserNFTDetails } from \"frontend/integration/entrepot/types\"\n\nimport { Blockchain } from \"../../types\"\n\nexport const userNFTDetailsToNFT = (\n  nfts: UserNFTDetails[],\n): UserNonFungibleToken[] => {\n  return nfts.map((nft) => ({\n    ...nft,\n    contractId: nft.canisterId,\n    owner: nft.principal.toString(),\n    blockchainLogo: IconSvgDfinity,\n    blockchain: nft.blockchain,\n  }))\n}\n\nexport const mapUserNFTDetailsToGroupedOptions = (\n  userNFTDetailsArray: UserNonFungibleToken[],\n  applications: Application[],\n): IGroupedOptions[] => {\n  // First, group the UserNFTDetails by wallet name\n  const groupedByWallet = userNFTDetailsArray.reduce(\n    (acc: { [key: string]: UserNonFungibleToken[] }, current) => {\n      const walletName = getWalletName(\n        applications,\n        current.account.domain,\n        current.account.accountId,\n      )\n      if (!acc[walletName]) {\n        acc[walletName] = []\n      }\n      acc[walletName].push(current)\n      return acc\n    },\n    {},\n  )\n\n  // Then, map each group to an IGroupedOptions object\n  const mappedGroups = Object.entries(groupedByWallet).map(\n    ([walletName, userNFTDetails]) => {\n      const options = userNFTDetails.map(\n        (nft) =>\n          ({\n            title: nft.name,\n            subTitle: nft.collection.name,\n            value: nft.tokenId,\n            icon: nft.assetPreview.url,\n          } as IGroupOption),\n      )\n      return {\n        label: walletName,\n        options,\n      }\n    },\n  )\n\n  return mappedGroups\n}\n\nexport function toUserNFT(\n  nft: NonFungibleItem,\n  principal: Principal,\n  defaultLogo: string,\n  address: string,\n  blockchain?: Blockchain,\n): UserNonFungibleToken {\n  return {\n    account: {\n      domain: \"nfid.one\",\n      label: \"account 1\",\n      accountId: \"-1\",\n    },\n    assetFullsize: {\n      url: nft?.image.length === 0 ? defaultLogo : nft?.image,\n      format: \"img\",\n    },\n    assetPreview: {\n      url: nft?.thumbnail || MaticSvg,\n      format: nft?.imageType ?? \"img\",\n    },\n    blockchainLogo: defaultLogo,\n    // @ts-ignore\n    blockchain: blockchain ?? nft?.blockchain,\n    collection: {\n      description: nft?.description,\n      id: nft?.collection || \"N/A\",\n      name: nft?.contractName || \"N/A\",\n      standard: nft?.tokenType,\n    },\n    clipboardText: nft?.image,\n    contractId: nft?.contract || \"N/A\",\n    index: nft?.id,\n    name: nft?.title,\n    principal: principal,\n    tokenId: nft?.tokenId || \"N/A\",\n    owner: address,\n    walletName: \"NFID\",\n  }\n}\n","import { Cache } from \"node-ts-cache\"\nimport { NftErc721EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc721-populate-transaction.service\"\nimport { NftErc1155EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc1155-populate-transaction.service\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumGoerliAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { NativeToken, Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { EVMTransferConnector } from \"../../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferNFTConnector,\n  ITransferNFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../../types\"\nimport { toUserNFT, mapUserNFTDetailsToGroupedOptions } from \"../../util/nfts\"\n\nexport class EthGoerliNFTTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferNFTConnector\n{\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTs(): Promise<UserNonFungibleToken[]> {\n    const identity = await this.getIdentity()\n    const address = await this.getAddress()\n\n    const nfts = await ethereumGoerliAsset.getItemsByUser({ identity })\n    return nfts.items.map((nft) =>\n      toUserNFT(\n        nft,\n        identity.getPrincipal(),\n        this.config.icon,\n        address,\n        this.config.blockchain,\n      ),\n    )\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTOptions(): Promise<IGroupedOptions[]> {\n    const applications = await this.getApplications()\n    const nfts = await this.getNFTs()\n    return mapUserNFTDetailsToGroupedOptions(nfts, applications)\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    tokenId,\n    contract,\n    standard,\n  }: ITransferNFTRequest): Promise<TokenFee> {\n    const cacheKey = \"nft_\" + tokenId + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request =\n      standard === \"ERC721\"\n        ? new NftErc721EstimateTransactionRequest(\n            identity,\n            to,\n            contract,\n            tokenId,\n          )\n        : new NftErc1155EstimateTransactionRequest(\n            identity,\n            to,\n            1,\n            contract,\n            tokenId,\n          )\n\n    let estimatedTransaction: EstimatedTransaction | undefined = undefined\n    try {\n      estimatedTransaction = await ethereumGoerliAsset.getEstimatedTransaction(\n        request,\n      )\n    } catch (e: any) {\n      throw new Error(e)\n    }\n\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const ethereumGoerliNFTTransferConnector =\n  new EthGoerliNFTTransferConnector({\n    icon: IconPngEthereum,\n    tokenStandard: TokenStandards.ETH,\n    blockchain: Blockchain.ETHEREUM_GOERLI,\n    feeCurrency: NativeToken.ETH,\n    addressPlaceholder: \"Recipient ETH address\",\n    type: TransferModalType.NFT,\n    assetService: ethereumGoerliAsset,\n    duration: \"10 min\",\n  })\n","import { Cache } from \"node-ts-cache\"\nimport { NftErc721EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc721-populate-transaction.service\"\nimport { NftErc1155EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc1155-populate-transaction.service\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { EVMTransferConnector } from \"../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferNFTConnector,\n  ITransferNFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport { mapUserNFTDetailsToGroupedOptions, toUserNFT } from \"../util/nfts\"\n\nexport class EthNFTTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferNFTConnector\n{\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTs(): Promise<UserNonFungibleToken[]> {\n    const identity = await this.getIdentity()\n    const address = await this.getAddress()\n\n    const nfts = await ethereumAsset.getItemsByUser({ identity })\n    return nfts.items.map((nft) =>\n      toUserNFT(\n        nft,\n        identity.getPrincipal(),\n        this.config.icon,\n        address,\n        this.config.blockchain,\n      ),\n    )\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTOptions(): Promise<IGroupedOptions[]> {\n    const applications = await this.getApplications()\n    const nfts = await this.getNFTs()\n    return mapUserNFTDetailsToGroupedOptions(nfts, applications)\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    tokenId,\n    contract,\n    standard,\n  }: ITransferNFTRequest): Promise<TokenFee> {\n    const cacheKey = \"nft_\" + tokenId + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request =\n      standard === \"ERC721\"\n        ? new NftErc721EstimateTransactionRequest(\n            identity,\n            to,\n            contract,\n            tokenId,\n          )\n        : new NftErc1155EstimateTransactionRequest(\n            identity,\n            to,\n            1,\n            contract,\n            tokenId,\n          )\n\n    let estimatedTransaction: EstimatedTransaction | undefined = undefined\n    try {\n      estimatedTransaction = await ethereumAsset.getEstimatedTransaction(\n        request,\n      )\n    } catch (e: any) {\n      throw new Error(e)\n    }\n\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const ethereumNFTTransferConnector = new EthNFTTransferConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ETH,\n  blockchain: Blockchain.ETHEREUM,\n  feeCurrency: NativeToken.ETH,\n  addressPlaceholder: \"Recipient ETH address\",\n  type: TransferModalType.NFT,\n  assetService: ethereumAsset,\n  duration: \"10 min\",\n})\n","import { Principal } from \"@dfinity/principal\"\n\nimport { isHex } from \"@nfid-frontend/utils\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport const PRINCIPAL_LENGTH = 63\nexport const IC_ADDRESS_LENGTH = 64\nexport const ETH_ADDRESS_LENGTH = 42\n\nexport const validateAddressField = (string: string) => {\n  if (!string.length) return \"This field cannot be empty\"\n  const value = string.replace(/\\s/g, \"\")\n  if (isHex(value) && value.length === 64) return true\n\n  try {\n    if (!!Principal.fromText(value) && value.length === 63) return true\n  } catch {\n    return \"Incorrect account or principal ID\"\n  }\n}\n\nexport const isNotEmpty = (value: string) => {\n  if (value.length) return true\n  return \"This field cannot be empty\"\n}\n\nexport const isValidAddress = (value: string) => {\n  if (isHex(value)) return true\n  return \"Not a valid address\"\n}\n\nexport const isValidPrincipalId = (value: string) => {\n  try {\n    if (Principal.fromText(value)) return true\n  } catch {\n    return \"Not a valid principal ID\"\n  }\n  return \"Not a valid principal ID\"\n}\n\nexport const validateTransferAmountField =\n  (balance = \"0\", fee = \"0\") =>\n  (value: string | number) => {\n    if (Number(value) < 0) return \"Transfer amount can't be negative value\"\n    if (Number(value) >= 100000000000000000000)\n      return \"The transferred sum cannot be excessively large.\"\n    if (Number(value) === 0) return \"You can't send 0\"\n\n    if (Number(balance) - Number(fee) < Number(value))\n      return \"Insufficient funds\"\n    return true\n  }\n\nexport const makeAddressFieldValidation =\n  (type: TokenStandards) => (value: string) => {\n    if (typeof isNotEmpty(value) !== \"boolean\") return isNotEmpty(value)\n\n    switch (type) {\n      case TokenStandards.ETH:\n        return typeof isHex(value) === \"boolean\" &&\n          value.length === ETH_ADDRESS_LENGTH\n          ? true\n          : \"Incorrect address\"\n      case TokenStandards.ERC20_ETHEREUM:\n        return typeof isHex(value) === \"boolean\" &&\n          value.length === ETH_ADDRESS_LENGTH\n          ? true\n          : \"Incorrect address\"\n      case TokenStandards.ERC20_POLYGON:\n        return typeof isHex(value) === \"boolean\" &&\n          value.length === ETH_ADDRESS_LENGTH\n          ? true\n          : \"Incorrect address\"\n      case TokenStandards.MATIC:\n        return typeof isHex(value) === \"boolean\" &&\n          value.length === ETH_ADDRESS_LENGTH\n          ? true\n          : \"Incorrect address\"\n      case TokenStandards.BTC:\n        return typeof isHex(value) === \"boolean\" &&\n          value.length > 25 &&\n          value.length < 36\n          ? true\n          : \"Incorrect BTC address\"\n      case TokenStandards.DIP20:\n        return typeof isValidPrincipalId(value) === \"boolean\" &&\n          value.length === PRINCIPAL_LENGTH\n          ? true\n          : \"For DIP20 only principal address allowed\"\n      default:\n        return (typeof isHex(value) === \"boolean\" &&\n          value.length === IC_ADDRESS_LENGTH) ||\n          typeof isValidPrincipalId(value) === \"boolean\"\n          ? true\n          : \"Incorrect account or principal ID\"\n    }\n  }\n","export const extIDL = ({ IDL }: any) => {\n  const SubAccount = IDL.Vec(IDL.Nat8)\n  const AccountIdentifier = IDL.Text\n  const TokenIdentifier = IDL.Text\n  const User = IDL.Variant({\n    principal: IDL.Principal,\n    address: AccountIdentifier,\n  })\n  const Balance = IDL.Nat\n  const Memo = IDL.Vec(IDL.Nat8)\n  const MemoExt = IDL.Nat64\n  const TransferRequest = IDL.Record({\n    to: User,\n    token: TokenIdentifier,\n    notify: IDL.Bool,\n    from: User,\n    memo: Memo,\n    subaccount: IDL.Opt(SubAccount),\n    amount: Balance,\n  })\n  const Result = IDL.Variant({\n    ok: Balance,\n    err: IDL.Variant({\n      CannotNotify: AccountIdentifier,\n      InsufficientBalance: IDL.Null,\n      InvalidToken: TokenIdentifier,\n      Rejected: IDL.Null,\n      Unauthorized: AccountIdentifier,\n      Other: IDL.Text,\n    }),\n  })\n  const CommonError = IDL.Variant({\n    InvalidToken: TokenIdentifier,\n    Other: IDL.Text,\n  })\n  const LockResult = IDL.Variant({\n    ok: AccountIdentifier,\n    err: CommonError,\n  })\n  const ListRequest = IDL.Record({\n    token: TokenIdentifier,\n    from_subaccount: IDL.Opt(SubAccount),\n    price: IDL.Opt(IDL.Nat64),\n  })\n  const ICPTs = IDL.Record({ e8s: IDL.Nat64 })\n  const TimeStamp = IDL.Record({ timestamp_nanos: IDL.Nat64 })\n  const BlockHeight = IDL.Nat64\n  const SendArgs = IDL.Record({\n    to: AccountIdentifier,\n    fee: ICPTs,\n    memo: MemoExt,\n    from_subaccount: IDL.Opt(SubAccount),\n    created_at_time: IDL.Opt(TimeStamp),\n    amount: ICPTs,\n  })\n  const Result_3 = IDL.Variant({ ok: IDL.Null, err: CommonError })\n  return IDL.Service({\n    transfer: IDL.Func([TransferRequest], [Result], []),\n    lock: IDL.Func(\n      [TokenIdentifier, IDL.Nat64, AccountIdentifier, SubAccount],\n      [LockResult],\n      [],\n    ),\n    list: IDL.Func([ListRequest], [Result_3], []),\n    send_dfx: IDL.Func([SendArgs], [BlockHeight], []),\n    settle: IDL.Func([TokenIdentifier], [Result_3], []),\n  })\n}\nexport const init = ({ IDL }: any) => {\n  return []\n}\n","import { Identity } from \"@dfinity/agent/lib/cjs/auth\"\nimport { Principal } from \"@dfinity/principal\"\nimport { decodeTokenIdentifier, principalToAddress } from \"ictool\"\n\nimport { isHex } from \"@nfid-frontend/utils\"\nimport { initActor } from \"@nfid/integration\"\n\nimport { extIDL } from \"frontend/integration/_ic_api/ext\"\nimport {\n  AccountIdentifier,\n  Balance,\n  ListResult,\n  LockResult,\n  TransferRequest,\n  TransferResult,\n} from \"frontend/integration/_ic_api/ext.d\"\n\nexport async function transferEXT(\n  token: string,\n  source: Identity,\n  target: string,\n): Promise<Balance> {\n  let actor = await initActor(\n    source,\n    decodeTokenIdentifier(token).canister,\n    extIDL,\n  )\n  let request: TransferRequest = {\n    token: token,\n    from: constructUser(source.getPrincipal().toText()),\n    subaccount: [],\n    to: constructUser(target),\n    amount: 1,\n    memo: [],\n    notify: false,\n  }\n  const result: TransferResult = (await actor.transfer(request).catch((e) => {\n    throw Error(`Transfer failed!: ${e}`, e)\n  })) as TransferResult\n  if (\"err\" in result)\n    throw Error(\"Transfer failed! \" + formatError(result.err))\n  return result.ok\n}\n\nexport async function lockNFT(\n  token: string,\n  identity: Identity,\n  price: number,\n): Promise<AccountIdentifier> {\n  let actor = await initActor(\n    identity,\n    decodeTokenIdentifier(token).canister,\n    extIDL,\n  )\n  const result = (await actor\n    .lock(\n      token,\n      BigInt(price),\n      principalToAddress(identity.getPrincipal() as any),\n      [],\n    )\n    .catch((e) => {\n      throw Error(`Lock failed!: ${e}`, e)\n    })) as LockResult\n  if (\"err\" in result) {\n    throw Error(\"Lock failed! \" + formatError(result.err))\n  }\n  return result.ok\n}\n\nexport async function listNFT(\n  token: string,\n  identity: Identity,\n  price: number,\n): Promise<boolean> {\n  let actor = await initActor(\n    identity,\n    decodeTokenIdentifier(token).canister,\n    extIDL,\n  )\n  const request = {\n    token: token,\n    from_subaccount: [],\n    price: [BigInt(price)],\n  }\n  const result = (await actor.list(request).catch((e) => {\n    throw Error(`List failed!: ${e}`, e)\n  })) as ListResult\n  if (\"err\" in result) throw Error(\"List failed! \" + formatError(result.err))\n  return result.ok === null\n}\n\nexport async function unListNFT(\n  token: string,\n  identity: Identity,\n): Promise<boolean> {\n  let actor = await initActor(\n    identity,\n    decodeTokenIdentifier(token).canister,\n    extIDL,\n  )\n  const request = {\n    token: token,\n    from_subaccount: [],\n    price: [],\n  }\n  const result = (await actor.list(request).catch((e) => {\n    throw Error(`UnList failed!: ${e}`, e)\n  })) as LockResult\n  if (\"err\" in result) throw Error(\"UnList failed! \" + formatError(result.err))\n  return result.ok === null\n}\n\nconst constructUser = (u: string) => {\n  if (isHex(u) && u.length === 64) {\n    return { address: u }\n  } else {\n    return { principal: Principal.fromText(u) }\n  }\n}\n\nfunction formatError(err: { [key: string]: any }) {\n  return Object.keys(err)[0] + \" : \" + Object.values(err)[0]\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport { Cache } from \"node-ts-cache\"\nimport { isHex } from \"packages/utils/src/lib/validation\"\n\nimport { IGroupOption, IGroupedOptions } from \"@nfid-frontend/ui\"\nimport { truncateString } from \"@nfid-frontend/utils\"\nimport {\n  getBalance,\n  getVaults,\n  getWalletName,\n  getWallets,\n  replaceActorIdentity,\n  vault,\n} from \"@nfid/integration\"\nimport { transfer as submitICP } from \"@nfid/integration/token/icp\"\n\nimport { toUSD } from \"frontend/features/fungable-token/accumulate-app-account-balances\"\nimport { fetchVaultWalletsBalances } from \"frontend/features/fungable-token/fetch-balances\"\nimport { PRINCIPAL_LENGTH } from \"frontend/features/transfer-modal/utils/validations\"\nimport { getWalletDelegationAdapter } from \"frontend/integration/adapters/delegations\"\nimport { transferEXT } from \"frontend/integration/entrepot/ext\"\nimport { getExchangeRate } from \"frontend/integration/rosetta/get-exchange-rate\"\nimport {\n  e8sICPToString,\n  stringICPtoE8s,\n} from \"frontend/integration/wallet/utils\"\nimport { keepStaticOrder, sortAlphabetic } from \"frontend/ui/utils/sorting\"\n\nimport { connectorCache } from \"../../cache\"\nimport { TransferModalConnector } from \"../transfer-modal\"\nimport {\n  ITransferConfig,\n  ITransferFTRequest,\n  ITransferNFTRequest,\n  ITransferResponse,\n  TokenBalance,\n} from \"../types\"\n\nexport abstract class ICMTransferConnector<\n  ConfigType extends ITransferConfig,\n> extends TransferModalConnector<ConfigType> {\n  @Cache(connectorCache, { ttl: 30 })\n  async getAccountsOptions({\n    isVault,\n    isRootOnly,\n  }: {\n    currency?: string\n    isVault?: boolean\n    isRootOnly?: boolean\n  }): Promise<IGroupedOptions[]> {\n    if (isVault) {\n      await replaceActorIdentity(vault, await getWalletDelegationAdapter())\n      const rate = await getExchangeRate()\n      const allVaults = await getVaults()\n      const allVaultWallets = await Promise.all(\n        allVaults.map((v) => v.id).map(async (v) => await getWallets(v)),\n      )\n\n      const walletsWithE8SBalances = await Promise.all(\n        allVaultWallets\n          .filter((wallets) => wallets.length > 0)\n          .map(async (wallets) => fetchVaultWalletsBalances(wallets)),\n      )\n\n      const walletsWithBalances = walletsWithE8SBalances.map((vault) =>\n        vault.map((w) => ({\n          ...w,\n          balance: { ICP: e8sICPToString(Number(w?.balance?.ICP)) },\n        })),\n      )\n\n      return walletsWithBalances.map((vaultWallets) => ({\n        label:\n          allVaults.find((v) => v.id === vaultWallets[0].vaults[0])?.name ?? \"\",\n        options: vaultWallets.map((wallet) => ({\n          title: wallet.name ?? \"\",\n          subTitle: truncateString(wallet.address ?? \"\", 6, 4),\n          innerTitle: String(wallet.balance?.ICP) + \" ICP\",\n          innerSubtitle: toUSD(Number(wallet.balance?.ICP), rate),\n          value: wallet.address ?? \"\",\n        })),\n      }))\n    }\n\n    let principals = await this.getAllPrincipals(true)\n    if (isRootOnly) {\n      principals = {\n        \"nfid.one\": [\n          principals[\"nfid.one\"].find((acc) => acc.account.accountId === \"-1\")!,\n        ],\n      }\n    }\n\n    const applications = await this.getApplications()\n\n    const groupedOptions = await Promise.all(\n      Object.entries(principals).map(async ([domain, principals]) => {\n        const options: IGroupOption[] = await Promise.all(\n          principals.map(async ({ account, principal }) => {\n            const { balance, balanceinUsd } = await this.getBalance(\n              principal.toString(),\n            )\n\n            return {\n              title: account.label.length\n                ? account.label\n                : getWalletName(\n                    applications,\n                    account.domain,\n                    account.accountId,\n                  ),\n              subTitle: truncateString(principalToAddress(principal), 6, 4),\n              value: principal.toString(),\n              innerTitle: balance?.toString() + \" \" + this.config.tokenStandard,\n              innerSubtitle: \"$\" + balanceinUsd,\n              badgeText: account.accountId === \"-1\" ? \"WALLET\" : undefined,\n            }\n          }),\n        )\n\n        return {\n          label:\n            applications.find((app) => app.domain === domain)?.name ?? domain,\n          options: options,\n        }\n      }),\n    )\n\n    return keepStaticOrder<IGroupedOptions>(\n      ({ label }) => label,\n      [\"NFID\", \"NNS\"],\n    )(groupedOptions.sort(sortAlphabetic(({ label }) => label)))\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getBalance(address: string): Promise<TokenBalance> {\n    const addressVerified =\n      address.length === PRINCIPAL_LENGTH\n        ? principalToAddress(Principal.fromText(address))\n        : address\n    const balance = await getBalance(addressVerified)\n\n    return Promise.resolve({\n      balance: e8sICPToString(Number(balance)),\n      balanceinUsd: e8sICPToString(Number(Number(balance)?.toFixed(2))),\n    })\n  }\n\n  getAddress(_: string, identity: DelegationIdentity): Promise<string> {\n    return Promise.resolve(identity.getPrincipal().toString())\n  }\n\n  async transfer(\n    request: ITransferFTRequest | ITransferNFTRequest,\n  ): Promise<ITransferResponse> {\n    if (!request.identity)\n      throw new Error(\"Identity not found. Please try again\")\n\n    try {\n      \"tokenId\" in request\n        ? await transferEXT(request.tokenId, request.identity, request.to)\n        : await submitICP(\n            stringICPtoE8s(String(request.amount)),\n            request.to.length === PRINCIPAL_LENGTH\n              ? principalToAddress(Principal.fromText(request.to))\n              : request.to,\n            request.identity,\n          )\n\n      return {}\n    } catch (e: any) {\n      return {\n        errorMessage: e ?? \"Unknown error\",\n      }\n    }\n  }\n\n  validateAddress(address: string): boolean | string {\n    switch (address.length) {\n      case 63:\n        try {\n          Principal.fromText(address)\n          return true\n        } catch {\n          return \"Not a valid principal ID\"\n        }\n      case 64:\n        if (!isHex(address)) return \"Not a valid address\"\n        return true\n      default:\n        return \"Address length should be 63 or 64 characters\"\n    }\n  }\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport { Cache } from \"node-ts-cache\"\n\nimport {\n  IGroupOption,\n  IGroupedOptions,\n  IconSvgDfinity,\n} from \"@nfid-frontend/ui\"\nimport { truncateString } from \"@nfid-frontend/utils\"\nimport { getWalletName } from \"@nfid/integration\"\nimport {\n  TokenMetadata,\n  getDIP20Balance,\n  getMetadata,\n} from \"@nfid/integration/token/dip-20\"\nimport { TOKEN_CANISTER } from \"@nfid/integration/token/dip-20/constants\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { e8sICPToString } from \"frontend/integration/wallet/utils\"\nimport { keepStaticOrder, sortAlphabetic } from \"frontend/ui/utils/sorting\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenBalance,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport { ICMTransferConnector } from \"./icm-transfer-connector\"\n\nexport class DIP20TransferConnector\n  extends ICMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenMetadata(currency: string): Promise<TokenMetadata> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((token) => token.symbol === currency)\n\n    return {\n      ...token,\n      ...this.config,\n      icon: token?.logo ?? this.config.icon,\n    } as any\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getBalance(address?: string, currency?: string): Promise<TokenBalance> {\n    const { canisterId } = await this.getTokenMetadata(currency ?? \"\")\n\n    const balance = await getDIP20Balance({\n      canisterId,\n      principalId: address ?? \"\",\n    })\n\n    return Promise.resolve({\n      balance: e8sICPToString(Number(balance)),\n      balanceinUsd: e8sICPToString(Number(Number(balance)?.toFixed(2))),\n    })\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenCurrencies(): Promise<string[]> {\n    const tokens = await this.getTokens()\n    return tokens.map((token) => token.symbol)\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokens(): Promise<TokenMetadata[]> {\n    return await Promise.all(TOKEN_CANISTER.map(getMetadata))\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokensOptions(): Promise<IGroupedOptions> {\n    const tokens = await this.getTokens()\n\n    return {\n      label: this.config.blockchain,\n      options: tokens.map((token) => ({\n        icon: token.logo ?? this.config.icon,\n        title: token.symbol,\n        subTitle: token.name,\n        value: `${token.symbol}&${this.config.blockchain}`,\n      })),\n    }\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getAccountsOptions({\n    currency,\n  }: {\n    currency: string\n  }): Promise<IGroupedOptions[]> {\n    const { symbol } = await this.getTokenMetadata(currency ?? \"\")\n    const principals = await this.getAllPrincipals(true)\n    const applications = await this.getApplications()\n\n    const groupedOptions = await Promise.all(\n      Object.entries(principals).map(async ([domain, principals]) => {\n        const options: IGroupOption[] = await Promise.all(\n          principals.map(async ({ account, principal }) => {\n            const { balance, balanceinUsd } = await this.getBalance(\n              principal.toString(),\n              currency ?? \"\",\n            )\n\n            return {\n              title: getWalletName(\n                applications,\n                account.domain,\n                account.accountId,\n              ),\n              subTitle: truncateString(principalToAddress(principal), 6, 4),\n              value: principal.toString(),\n              innerTitle: balance?.toString() + \" \" + symbol,\n              innerSubtitle: \"$\" + balanceinUsd,\n            }\n          }),\n        )\n\n        return {\n          label:\n            applications.find((app) => app.domain === domain)?.name ?? domain,\n          options: options,\n        }\n      }),\n    )\n\n    return keepStaticOrder<IGroupedOptions>(\n      ({ label }) => label,\n      [\"NFID\", \"NNS\"],\n    )(groupedOptions.sort(sortAlphabetic(({ label }) => label)))\n  }\n\n  validateAddress(address: string): boolean | string {\n    if (address.length !== 63) return \"Principal length should be 63 characters\"\n    try {\n      Principal.fromText(address)\n    } catch {\n      return \"Not a valid principal ID\"\n    }\n\n    return true\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({ currency }: ITransferFTRequest): Promise<TokenFee> {\n    const tokenMetadata = await this.getTokenMetadata(currency)\n    return Promise.resolve({\n      fee: tokenMetadata.fee.toString(),\n      feeUsd: tokenMetadata.fee.toString(),\n    })\n  }\n}\n\nexport const dip20TransferConnector = new DIP20TransferConnector({\n  tokenStandard: TokenStandards.DIP20,\n  blockchain: Blockchain.IC,\n  feeCurrency: NativeToken.ICP,\n  shouldHavePrincipal: true,\n  addressPlaceholder: \"Recipient principal ID\",\n  icon: IconSvgDfinity,\n  type: TransferModalType.FT20,\n  duration: \"10 sec\",\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\n\nimport { IconSvgDfinity } from \"@nfid-frontend/ui\"\nimport { accessList } from \"@nfid/integration\"\nimport { WALLET_FEE } from \"@nfid/integration/token/icp\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { getWalletDelegationAdapter } from \"frontend/integration/adapters/delegations\"\n\nimport { Blockchain, NativeToken } from \"../../types\"\nimport {\n  ITransferFTConnector,\n  ITransferConfig,\n  TransferModalType,\n  TokenFee,\n} from \"../types\"\nimport { ICMTransferConnector } from \"./icm-transfer-connector\"\n\nexport class ICTransferConnector\n  extends ICMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  async getIdentity(address: string): Promise<DelegationIdentity> {\n    const allAccounts = await this.getAllPrincipals(false)\n\n    const neededAccount = allAccounts.find(\n      (acc) => acc.principal.toString() === address,\n    )\n    if (!neededAccount) throw new Error(\"Account not found\")\n\n    return await getWalletDelegationAdapter(\n      neededAccount.account.domain,\n      neededAccount.account.accountId,\n      accessList,\n    )\n  }\n\n  getFee(): Promise<TokenFee> {\n    return Promise.resolve({\n      fee: `${String(WALLET_FEE)} ${this.config.feeCurrency}`,\n      feeUsd: String(WALLET_FEE),\n    })\n  }\n}\n\nexport const icTransferConnector = new ICTransferConnector({\n  icon: IconSvgDfinity,\n  tokenStandard: TokenStandards.ICP,\n  feeCurrency: NativeToken.ICP,\n  blockchain: Blockchain.IC,\n  title: \"Internet Computer\",\n  shouldHavePrincipal: true,\n  addressPlaceholder: \"Recipient IC address or principal\",\n  type: TransferModalType.FT,\n  isNativeToken: true,\n  duration: \"10 sec\",\n})\n","import { Cache } from \"node-ts-cache\"\n\nimport { IGroupedOptions, IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\nimport { principalTokens } from \"frontend/integration/entrepot\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport {\n  ITransferConfig,\n  ITransferNFTConnector,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport {\n  mapUserNFTDetailsToGroupedOptions,\n  userNFTDetailsToNFT,\n} from \"../util/nfts\"\nimport { ICMTransferConnector } from \"./icm-transfer-connector\"\n\nexport class IcNFTTransferConnector\n  extends ICMTransferConnector<ITransferConfig>\n  implements ITransferNFTConnector\n{\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTs(): Promise<UserNonFungibleToken[]> {\n    const allPrincipals = await this.getAllPrincipals(false)\n    const allNFTs = await principalTokens(allPrincipals)\n    return userNFTDetailsToNFT(allNFTs)\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTOptions(): Promise<IGroupedOptions[]> {\n    const applications = await this.getApplications()\n    const allNFTs = await this.getNFTs()\n    return mapUserNFTDetailsToGroupedOptions(allNFTs, applications)\n  }\n\n  getFee(): Promise<TokenFee> {\n    return Promise.resolve({\n      fee: `0.00 ${this.config.feeCurrency}`,\n      feeUsd: \"0.00\",\n    })\n  }\n}\n\nexport const icNFTTransferConnector = new IcNFTTransferConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ICP,\n  blockchain: Blockchain.IC,\n  addressPlaceholder: \"Recipient IC address\",\n  type: TransferModalType.NFT,\n  feeCurrency: NativeToken.ICP,\n  duration: \"10 sec\",\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Cache } from \"node-ts-cache\"\nimport { Erc20EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/erc20-populate-transaction.service\"\nimport { Token } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, PolygonERC20Svg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { EVMTransferConnector } from \"../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenBalance,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport { makeRootAccountGroupedOptions } from \"../util/options\"\n\nexport class PolygonERC20TransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenMetadata(currency: string): Promise<Token> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return { ...this.config, ...token }\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getAddress(_?: string, identity?: DelegationIdentity): Promise<string> {\n    return await polygonAsset.getAddress(identity)\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getBalance(_?: string, currency?: string): Promise<TokenBalance> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return Promise.resolve({\n      balance: String(token?.balance),\n      balanceinUsd: token?.balanceinUsd,\n    })\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getTokens(): Promise<Token[]> {\n    const identity = await this.getIdentity()\n    return (await polygonAsset.getErc20TokensByUser({ identity })).tokens\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getAccountsOptions({\n    currency,\n  }: {\n    currency?: string\n  }): Promise<IGroupedOptions[]> {\n    const identity = await this.getIdentity()\n    const address = await this.getAddress(\"\", identity)\n    const balance = await this.getBalance(currency)\n\n    return [\n      makeRootAccountGroupedOptions(\n        address,\n        balance.balance?.toString() ?? \"\",\n        balance.balanceinUsd,\n        currency ?? \"\",\n      ),\n    ]\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenCurrencies(): Promise<string[]> {\n    const tokens = await this.getTokens()\n    return tokens.map((token) => token.symbol)\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokensOptions(): Promise<IGroupedOptions> {\n    const tokens = await this.getTokens()\n    return {\n      label: this.config.blockchain,\n      options: tokens.map((token) => ({\n        icon: token.logo ?? this.config.icon,\n        title: token.symbol,\n        subTitle: token.name,\n        value: `${token.symbol}&${this.config.blockchain}`,\n      })),\n    }\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    amount,\n    currency,\n    contract,\n  }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = currency + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new Erc20EstimateTransactionRequest(\n      identity,\n      to,\n      contract,\n      amount,\n    )\n\n    const estimatedTransaction = await polygonAsset.getEstimatedTransaction(\n      request,\n    )\n\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const polygonERC20TransferConnector = new PolygonERC20TransferConnector({\n  tokenStandard: TokenStandards.ERC20_POLYGON,\n  blockchain: Blockchain.POLYGON,\n  feeCurrency: NativeToken.MATIC,\n  icon: PolygonERC20Svg,\n  addressPlaceholder: \"Recipient Polygon address\",\n  type: TransferModalType.FT20,\n  assetService: polygonAsset,\n  duration: \"10 min\",\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Cache } from \"node-ts-cache\"\nimport { Erc20EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/erc20-populate-transaction.service\"\nimport { Token } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, PolygonERC20Svg } from \"@nfid-frontend/ui\"\nimport { polygonMumbaiAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { Blockchain, NativeToken } from \"frontend/ui/connnector/types\"\n\nimport { EVMTransferConnector } from \"../../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenBalance,\n  TokenFee,\n  TransferModalType,\n} from \"../../types\"\nimport { makeRootAccountGroupedOptions } from \"../../util/options\"\n\nexport class PolygonMumbaiERC20TransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenMetadata(currency: string): Promise<Token> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return { ...this.config, ...token }\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getAddress(_?: string, identity?: DelegationIdentity): Promise<string> {\n    return await polygonMumbaiAsset.getAddress(identity)\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getBalance(_?: string, currency?: string): Promise<TokenBalance> {\n    const tokens = await this.getTokens()\n    const token = tokens.find((t) => t.symbol === currency)!\n\n    return Promise.resolve({\n      balance: String(token?.balance),\n      balanceinUsd: token?.balanceinUsd,\n    })\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getTokens(): Promise<Token[]> {\n    const identity = await this.getIdentity()\n    return (await polygonMumbaiAsset.getErc20TokensByUser({ identity })).tokens\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getAccountsOptions({\n    currency,\n  }: {\n    currency?: string\n  }): Promise<IGroupedOptions[]> {\n    const identity = await this.getIdentity()\n    const address = await this.getAddress(\"\", identity)\n    const balance = await this.getBalance(currency)\n\n    return [\n      makeRootAccountGroupedOptions(\n        address,\n        balance.balance?.toString() ?? \"\",\n        balance.balanceinUsd,\n        currency ?? \"\",\n      ),\n    ]\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokenCurrencies(): Promise<string[]> {\n    const tokens = await this.getTokens()\n    return tokens.map((token) => token.symbol)\n  }\n\n  @Cache(connectorCache, { ttl: 600 })\n  async getTokensOptions(): Promise<IGroupedOptions> {\n    const tokens = await this.getTokens()\n\n    return {\n      label: this.config.blockchain,\n      options: tokens.map((token) => ({\n        icon: token.logo ?? this.config.icon,\n        title: token.symbol,\n        subTitle: token.name,\n        value: `${token.symbol}&${this.config.blockchain}`,\n      })),\n    }\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    amount,\n    currency,\n    contract,\n  }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = currency + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new Erc20EstimateTransactionRequest(\n      identity,\n      to,\n      contract,\n      amount,\n    )\n\n    const estimatedTransaction =\n      await polygonMumbaiAsset.getEstimatedTransaction(request)\n\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const polygonMumbaiERC20TransferConnector =\n  new PolygonMumbaiERC20TransferConnector({\n    tokenStandard: TokenStandards.ERC20_POLYGON,\n    blockchain: Blockchain.POLYGON_MUMBAI,\n    feeCurrency: NativeToken.MATIC,\n    icon: PolygonERC20Svg,\n    addressPlaceholder: \"Recipient Polygon address\",\n    type: TransferModalType.FT20,\n    assetService: polygonMumbaiAsset,\n    duration: \"10 min\",\n  })\n","import { Cache } from \"node-ts-cache\"\nimport { NftErc721EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc721-populate-transaction.service\"\nimport { NftErc1155EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc1155-populate-transaction.service\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonMumbaiAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { Blockchain, NativeToken } from \"frontend/ui/connnector/types\"\n\nimport { EVMTransferConnector } from \"../../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferNFTConnector,\n  ITransferNFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../../types\"\nimport { toUserNFT, mapUserNFTDetailsToGroupedOptions } from \"../../util/nfts\"\n\nexport class PolygonMumbaiNFTTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferNFTConnector\n{\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTs(): Promise<UserNonFungibleToken[]> {\n    const address = await this.getAddress()\n    const identity = await this.getIdentity()\n    const nfts = await polygonMumbaiAsset.getItemsByUser({ identity })\n\n    return nfts.items.map((nft) =>\n      toUserNFT(\n        nft,\n        identity.getPrincipal(),\n        this.config.icon,\n        address,\n        this.config.blockchain,\n      ),\n    )\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTOptions(): Promise<IGroupedOptions[]> {\n    const applications = await this.getApplications()\n    const nfts = await this.getNFTs()\n    return mapUserNFTDetailsToGroupedOptions(nfts, applications)\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    tokenId,\n    contract,\n    standard,\n  }: ITransferNFTRequest): Promise<TokenFee> {\n    const cacheKey = \"nft_\" + tokenId + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request =\n      standard === \"ERC721\"\n        ? new NftErc721EstimateTransactionRequest(\n            identity,\n            to,\n            contract,\n            tokenId,\n          )\n        : new NftErc1155EstimateTransactionRequest(\n            identity,\n            to,\n            1,\n            contract,\n            tokenId,\n          )\n\n    let estimatedTransaction: EstimatedTransaction | undefined = undefined\n    try {\n      estimatedTransaction = await polygonMumbaiAsset.getEstimatedTransaction(\n        request,\n      )\n    } catch (e: any) {\n      throw new Error(e?.message)\n    }\n\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const polygonMumbaiNFTTransferConnector =\n  new PolygonMumbaiNFTTransferConnector({\n    icon: MaticSvg,\n    tokenStandard: TokenStandards.MATIC,\n    blockchain: Blockchain.POLYGON_MUMBAI,\n    feeCurrency: NativeToken.MATIC,\n    addressPlaceholder: \"Recipient polygon address\",\n    type: TransferModalType.NFT,\n    assetService: polygonMumbaiAsset,\n    duration: \"10 min\",\n  })\n","import { Cache } from \"node-ts-cache\"\nimport { EthTransferRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/eth-populate-transaction.service\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonMumbaiAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { Blockchain, NativeToken } from \"frontend/ui/connnector/types\"\n\nimport { EVMTransferConnector } from \"../../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferFTConnector,\n  ITransferFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../../types\"\n\nexport class MaticMumbaiTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  async getEstimatedTransaction({\n    to,\n    amount,\n  }: ITransferFTRequest): Promise<EstimatedTransaction> {\n    const cacheKey = this.config.tokenStandard + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new EthTransferRequest(identity, to, amount)\n    const estimatedTransaction =\n      await polygonMumbaiAsset.getEstimatedTransaction(request)\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return estimatedTransaction\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({ to, amount }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = this.config.tokenStandard + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new EthTransferRequest(identity, to, amount)\n    const estimatedTransaction =\n      await polygonMumbaiAsset.getEstimatedTransaction(request)\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const polygonMumbaiTransferConnector = new MaticMumbaiTransferConnector({\n  icon: MaticSvg,\n  tokenStandard: TokenStandards.MATIC,\n  blockchain: Blockchain.POLYGON_MUMBAI,\n  feeCurrency: NativeToken.MATIC,\n  addressPlaceholder: \"Recipient Polygon address\",\n  type: TransferModalType.FT,\n  assetService: polygonMumbaiAsset,\n  isNativeToken: true,\n  duration: \"10 min\",\n})\n","import { Cache } from \"node-ts-cache\"\nimport { NftErc721EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc721-populate-transaction.service\"\nimport { NftErc1155EstimateTransactionRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/nft-erc1155-populate-transaction.service\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { IGroupedOptions, MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { EVMTransferConnector } from \"../evm-transfer-connector\"\nimport {\n  ITransferConfig,\n  ITransferNFTConnector,\n  ITransferNFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\nimport { mapUserNFTDetailsToGroupedOptions, toUserNFT } from \"../util/nfts\"\n\nexport class PolygonNFTTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferNFTConnector\n{\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTs(): Promise<UserNonFungibleToken[]> {\n    const address = await this.getAddress()\n    const identity = await this.getIdentity()\n    const nfts = await polygonAsset.getItemsByUser({ identity })\n\n    return nfts.items.map((nft) =>\n      toUserNFT(\n        nft,\n        identity.getPrincipal(),\n        this.config.icon,\n        address,\n        this.config.blockchain,\n      ),\n    )\n  }\n\n  @Cache(connectorCache, { ttl: 15 })\n  async getNFTOptions(): Promise<IGroupedOptions[]> {\n    const applications = await this.getApplications()\n    const nfts = await this.getNFTs()\n    return mapUserNFTDetailsToGroupedOptions(nfts, applications)\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({\n    to,\n    tokenId,\n    contract,\n    standard,\n  }: ITransferNFTRequest): Promise<TokenFee> {\n    const cacheKey = \"nft_\" + tokenId + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request =\n      standard === \"ERC721\"\n        ? new NftErc721EstimateTransactionRequest(\n            identity,\n            to,\n            contract,\n            tokenId,\n          )\n        : new NftErc1155EstimateTransactionRequest(\n            identity,\n            to,\n            1,\n            contract,\n            tokenId,\n          )\n\n    let estimatedTransaction: EstimatedTransaction | undefined = undefined\n    try {\n      estimatedTransaction = await polygonAsset.getEstimatedTransaction(request)\n    } catch (e: any) {\n      throw new Error(e?.message)\n    }\n\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const polygonNFTTransferConnector = new PolygonNFTTransferConnector({\n  icon: MaticSvg,\n  tokenStandard: TokenStandards.MATIC,\n  blockchain: Blockchain.POLYGON,\n  feeCurrency: NativeToken.MATIC,\n  addressPlaceholder: \"Recipient polygon address\",\n  type: TransferModalType.NFT,\n  assetService: polygonAsset,\n  duration: \"10 min\",\n})\n","import { IGroupedOptions } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { UserNonFungibleToken } from \"frontend/features/non-fungable-token/types\"\n\nimport { Blockchain } from \"../types\"\nimport { btcTransferConnector } from \"./btc/btc-transfer-connector\"\nimport { ethereumERC20TransferConnector } from \"./eth/erc20-transfer-connector\"\nimport { ethereumTransferConnector } from \"./eth/eth-transfer-connector\"\nimport { ethereumGoerliERC20TransferConnector } from \"./eth/goerli/erc20-transfer-connector\"\nimport { ethereumGoerliTransferConnector } from \"./eth/goerli/eth-transfer-connector\"\nimport { ethereumGoerliNFTTransferConnector } from \"./eth/goerli/nft-transfer-connector\"\nimport { ethereumNFTTransferConnector } from \"./eth/nft-transfer-connector\"\nimport { dip20TransferConnector } from \"./ic/dip20-transfer-connector\"\nimport { icTransferConnector } from \"./ic/ic-transfer-connector\"\nimport { icNFTTransferConnector } from \"./ic/nft-transfer-connector\"\nimport { polygonERC20TransferConnector } from \"./polygon/erc20-transfer-connector\"\nimport { polygonMumbaiERC20TransferConnector } from \"./polygon/mumbai/erc20-transfer-connector\"\nimport { polygonMumbaiNFTTransferConnector } from \"./polygon/mumbai/nft-transfer-connector\"\nimport { polygonMumbaiTransferConnector } from \"./polygon/mumbai/polygon-transfer-connector\"\nimport { polygonNFTTransferConnector } from \"./polygon/nft-transfer-connector\"\nimport { polygonTransferConnector } from \"./polygon/polygon-transfer-connector\"\nimport {\n  IConnector,\n  IGetConnector,\n  ITransferConfig,\n  IUniversalConnector,\n  TransferModalType,\n} from \"./types\"\nimport { concatOptionsWithSameLabel } from \"./util/options\"\n\nfunction toMap<T extends { getTokenConfig: () => ITransferConfig }>(\n  assetViews: T[] | T[],\n): Map<string, T> {\n  const assetViewMap = new Map<string, T>()\n  assetViews.forEach((assetView) => {\n    const config = assetView.getTokenConfig()\n    assetViewMap.set(`${config.tokenStandard}&${config.blockchain}`, assetView)\n  })\n  return assetViewMap\n}\n\nconst singleFTConnectors = [\n  btcTransferConnector,\n  polygonTransferConnector,\n  polygonMumbaiTransferConnector,\n  ethereumTransferConnector,\n  ethereumGoerliTransferConnector,\n]\n\nconst multiFTConnectors = [\n  polygonERC20TransferConnector,\n  polygonMumbaiERC20TransferConnector,\n  ethereumERC20TransferConnector,\n  ethereumGoerliERC20TransferConnector,\n  icTransferConnector,\n  dip20TransferConnector,\n]\n\nconst NFTConnectors = [\n  ethereumNFTTransferConnector,\n  ethereumGoerliNFTTransferConnector,\n  polygonNFTTransferConnector,\n  polygonMumbaiNFTTransferConnector,\n  icNFTTransferConnector,\n]\n\nconst allConnectors = [\n  ...singleFTConnectors,\n  ...multiFTConnectors,\n  ...NFTConnectors,\n]\n\nconst ftMappedConnectors = toMap([...singleFTConnectors, ...multiFTConnectors])\nconst nftMappedConnectors = toMap(NFTConnectors)\nexport const getConnector = async <T extends TransferModalType>({\n  type,\n  currency,\n  blockchain,\n  tokenStandard,\n}: IGetConnector<T>): Promise<IConnector<T>> => {\n  const mappedConnectors =\n    type === TransferModalType.FT ? ftMappedConnectors : nftMappedConnectors\n\n  const allConfigs = (\n    await Promise.all(\n      allConnectors.map(async (c: IUniversalConnector) => {\n        try {\n          const config = c.getTokenConfig()\n\n          return {\n            token: config.tokenStandard,\n            blockchain: config.blockchain,\n            currencies: await c.getTokenCurrencies(),\n            type: config.type,\n          }\n        } catch (e) {\n          // FIXME: handle case when request fails\n          console.error(\"getConnector\", e)\n          return null\n        }\n      }),\n    )\n  ).filter(\n    (c) => type === TransferModalType.FT || c?.type === TransferModalType.NFT,\n  )\n\n  if (tokenStandard) {\n    const neededConfig = allConfigs.find(\n      (c) => c?.token === tokenStandard && c?.blockchain === blockchain,\n    )\n\n    return mappedConnectors.get(\n      `${neededConfig?.token}&${neededConfig?.blockchain}`,\n    )! as IConnector<T>\n  }\n\n  if (currency) {\n    const neededConfig = allConfigs.find(\n      (c) => c?.currencies.includes(currency) && c.blockchain === blockchain,\n    )\n\n    return mappedConnectors.get(\n      `${neededConfig?.token}&${neededConfig?.blockchain}`,\n    )! as IConnector<T>\n  }\n\n  if (blockchain) {\n    const neededConfig = allConfigs.find((c) => c?.blockchain === blockchain)\n\n    return mappedConnectors.get(\n      `${neededConfig?.token}&${neededConfig?.blockchain}`,\n    )! as IConnector<T>\n  }\n\n  // UNREACHABLE\n  throw new Error(\"No connector found\")\n}\n\nexport const getNativeTokenStandards = (\n  isVault?: boolean,\n): Array<{\n  token: TokenStandards\n  blockchain: Blockchain\n}> => {\n  const nativeConnectors = isVault\n    ? [icTransferConnector]\n    : allConnectors.filter((c) => c.getTokenConfig()?.isNativeToken)\n\n  return nativeConnectors.map((c) => ({\n    token: c.getTokenStandard(),\n    blockchain: c.getTokenConfig()?.blockchain,\n  }))\n}\n\nexport const getAllTokensOptions = async (\n  isVault?: boolean,\n): Promise<IGroupedOptions[]> => {\n  if (isVault) return [await icTransferConnector.getTokensOptions()]\n  const ftConnectors = [...singleFTConnectors, ...multiFTConnectors]\n  const options = await Promise.all(\n    ftConnectors.map(async (c) => {\n      try {\n        return await c.getTokensOptions()\n      } catch (e) {\n        // FIXME: handle case when request fails\n        console.error(\"getAllTokensOptions\", e)\n        return undefined\n      }\n    }),\n  )\n\n  return concatOptionsWithSameLabel(\n    options.filter((o) => !!o) as IGroupedOptions[],\n  )\n}\n\nexport const getAllNFTOptions = async (): Promise<IGroupedOptions[]> => {\n  const options = await Promise.all(\n    NFTConnectors.map(async (c) => {\n      try {\n        return await c.getNFTOptions()\n      } catch (e) {\n        // FIXME: handle case when request fails\n        console.error(\"getAllNFTOptions\", e)\n        return undefined\n      }\n    }),\n  )\n\n  return options.flat().filter((o) => !!o) as IGroupedOptions[]\n}\n\nexport const getAllNFT = async (): Promise<UserNonFungibleToken[]> => {\n  return (\n    await Promise.all(\n      NFTConnectors.map(async (c) => {\n        try {\n          return await c.getNFTs()\n        } catch (e) {\n          // FIXME: handle case when request fails\n          console.error(\"getAllNFT\", e)\n          return undefined\n        }\n      }),\n    )\n  )\n    .flat()\n    .filter((nft) => !!nft) as UserNonFungibleToken[]\n}\n","import { Cache } from \"node-ts-cache\"\nimport { EthTransferRequest } from \"packages/integration/src/lib/asset/service/populate-transaction-service/eth-populate-transaction.service\"\nimport { EstimatedTransaction } from \"packages/integration/src/lib/asset/types\"\n\nimport { MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { connectorCache } from \"../../cache\"\nimport { Blockchain, NativeToken } from \"../../types\"\nimport { EVMTransferConnector } from \"../evm-transfer-connector\"\nimport {\n  ITransferFTConnector,\n  ITransferConfig,\n  ITransferFTRequest,\n  TokenFee,\n  TransferModalType,\n} from \"../types\"\n\nexport class MaticTransferConnector\n  extends EVMTransferConnector<ITransferConfig>\n  implements ITransferFTConnector\n{\n  async getEstimatedTransaction({\n    to,\n    amount,\n  }: ITransferFTRequest): Promise<EstimatedTransaction> {\n    const cacheKey = this.config.tokenStandard + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new EthTransferRequest(identity, to, amount)\n    const estimatedTransaction = await polygonAsset.getEstimatedTransaction(\n      request,\n    )\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return estimatedTransaction\n  }\n\n  @Cache(connectorCache, { ttl: 10 })\n  async getFee({ to, amount }: ITransferFTRequest): Promise<TokenFee> {\n    const cacheKey = this.config.tokenStandard + \"_transaction\"\n\n    const identity = await this.getIdentity()\n    const request = new EthTransferRequest(identity, to, amount)\n    const estimatedTransaction = await polygonAsset.getEstimatedTransaction(\n      request,\n    )\n    await connectorCache.setItem(cacheKey, estimatedTransaction, {\n      ttl: 10,\n    })\n\n    return {\n      fee: `${estimatedTransaction.fee} ${this.config.feeCurrency}`,\n      feeUsd: estimatedTransaction.feeUsd,\n    }\n  }\n}\n\nexport const polygonTransferConnector = new MaticTransferConnector({\n  icon: MaticSvg,\n  tokenStandard: TokenStandards.MATIC,\n  blockchain: Blockchain.POLYGON,\n  feeCurrency: NativeToken.MATIC,\n  addressPlaceholder: \"Recipient Polygon address\",\n  type: TransferModalType.FT,\n  assetService: polygonAsset,\n  isNativeToken: true,\n  duration: \"10 min\",\n})\n","import useSWR from \"swr\"\n\nimport { IGroupOption } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport {\n  getConnector,\n  getNativeTokenStandards,\n} from \"frontend/ui/connnector/transfer-modal/transfer-factory\"\nimport { TransferModalType } from \"frontend/ui/connnector/transfer-modal/types\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nexport const useNetworkOptions = (isVault?: boolean) => {\n  const supportedNetworks = getNativeTokenStandards(isVault)\n\n  const { data: networkOptions, ...rest } = useSWR<IGroupOption[]>(\n    [supportedNetworks, \"networkOptions\"],\n    ([tokens]) =>\n      Promise.all(\n        tokens.map(\n          async (t: { token: TokenStandards; blockchain: Blockchain }) =>\n            (\n              await getConnector({\n                type: TransferModalType.FT,\n                tokenStandard: t.token,\n                blockchain: t.blockchain,\n              })\n            ).getNetworkOption(),\n        ),\n      ),\n  )\n\n  return { data: [{ label: \"\", options: networkOptions ?? [] }], ...rest }\n}\n","import { IconCmpArrow } from \"@nfid-frontend/ui\"\n\nimport ReceiveModalImage from \"../assets/receive.jpg\"\n\nexport interface IReceiveModal {\n  onBack: () => void\n}\n\nexport const ReceiveModal = ({ onBack }: IReceiveModal) => {\n  return (\n    <div className=\"text-sm\">\n      <div className=\"flex items-center mb-4\">\n        <IconCmpArrow onClick={onBack} className=\"cursor-pointer\" />\n        <p className=\"text-xl font-bold ml-2.5\">NFID token support</p>\n      </div>\n      <p className=\"\">\n        The NFID Wallet currently supports these standards, with additional\n        support coming soon.\n      </p>\n      <div className=\"mt-3 mb-10 space-y-3 font-bold\">\n        <p>\n          Bitcoin:<span className=\"font-normal\"> BTC</span>\n        </p>\n        <p>\n          Ethereum:\n          <span className=\"font-normal\"> ETH, ERC-20, ERC-721, ERC-1155</span>\n        </p>\n        <p>\n          Polygon:\n          <span className=\"font-normal\"> MATIC, ERC-20, ERC-721, ERC-1155</span>\n        </p>\n        <p>\n          Internet Computer:\n          <span className=\"font-normal\"> ICP, DIP-20, EXT</span>\n        </p>\n      </div>\n      <img\n        alt=\"receive\"\n        className=\"absolute bottom-0 right-0\"\n        src={ReceiveModalImage}\n      />\n    </div>\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\nimport clsx from \"clsx\"\nimport { principalToAddress } from \"ictool\"\nimport { useEffect, useMemo, useState } from \"react\"\nimport useSWR from \"swr\"\n\nimport { ChooseModal, Copy, QRCode, BlurredLoader } from \"@nfid-frontend/ui\"\nimport { RootWallet, sendReceiveTracking } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\nimport { CenterEllipsis } from \"frontend/ui/atoms/center-ellipsis\"\nimport { getConnector } from \"frontend/ui/connnector/transfer-modal/transfer-factory\"\nimport { TransferModalType } from \"frontend/ui/connnector/transfer-modal/types\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { useAccountsOptions } from \"../hooks/use-accounts-options\"\nimport { useNetworkOptions } from \"../hooks/use-network-options\"\nimport { PRINCIPAL_LENGTH } from \"../utils/validations\"\nimport { ReceiveModal } from \"./receive-modal\"\n\nexport interface ITransferReceive {\n  isVault: boolean\n  preselectedTokenStandard: string\n  preselectedAccountAddress: string\n  preselectedTokenBlockchain?: string\n}\n\nexport const TransferReceive = ({\n  isVault,\n  preselectedTokenStandard,\n  preselectedAccountAddress,\n  preselectedTokenBlockchain = Blockchain.IC,\n}: ITransferReceive) => {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [selectedTokenStandard, setSelectedTokenStandard] = useState(\n    preselectedTokenStandard,\n  )\n  const [selectedTokenBlockchain, setSelectedTokenBlockchain] = useState(\n    preselectedTokenBlockchain,\n  )\n  const [selectedAccountAddress, setSelectedAccountAddress] = useState(\n    preselectedAccountAddress,\n  )\n\n  const { profile } = useProfile()\n  const { data: networkOptions } = useNetworkOptions(isVault)\n  const { data: accountsOptions, isValidating: isAccountsValidating } =\n    useAccountsOptions(\n      selectedTokenStandard as TokenStandards,\n      selectedTokenBlockchain as Blockchain,\n      isVault,\n      true,\n    )\n\n  const { data: selectedConnector, isLoading: isConnectorLoading } = useSWR(\n    [selectedTokenBlockchain, selectedTokenStandard, \"selectedConnector\"],\n    ([selectedTokenBlockchain, selectedTokenStandard]) =>\n      getConnector({\n        type: TransferModalType.FT,\n        tokenStandard: selectedTokenStandard,\n        blockchain: selectedTokenBlockchain,\n      }),\n  )\n\n  const isPrincipalVisible = useMemo(() => {\n    return !!selectedConnector?.getTokenConfig().shouldHavePrincipal\n  }, [selectedConnector])\n\n  const address = useMemo(() => {\n    if (\n      !isPrincipalVisible ||\n      (isPrincipalVisible &&\n        selectedAccountAddress?.length !== PRINCIPAL_LENGTH)\n    )\n      return selectedAccountAddress\n\n    return principalToAddress(Principal.fromText(selectedAccountAddress))\n  }, [isPrincipalVisible, selectedAccountAddress])\n\n  useEffect(() => {\n    !isVault && setSelectedAccountAddress(accountsOptions[0]?.options[0]?.value)\n  }, [accountsOptions, isVault])\n\n  useEffect(() => {\n    sendReceiveTracking.openModal({ isSending: false })\n  }, [])\n\n  return (\n    <BlurredLoader\n      className=\"mt-4 space-y-3 text-xs\"\n      isLoading={\n        !accountsOptions.length || isConnectorLoading || isAccountsValidating\n      }\n    >\n      <p className=\"text-sm\">\n        Use this address for receiving tokens and NFTs. See which{\" \"}\n        <span\n          className=\"text-sm text-blue-600 cursor-pointer\"\n          onClick={() => setIsModalOpen(true)}\n        >\n          tokens NFID supports.\n        </span>\n      </p>\n      <ChooseModal\n        label=\"Network\"\n        title={\"Choose a network\"}\n        optionGroups={networkOptions}\n        iconClassnames=\"!w-6 !h-auto !object-contain\"\n        preselectedValue={`${selectedTokenStandard}&${selectedTokenBlockchain}`}\n        onSelect={(value) => {\n          const arrayValue = value.split(\"&\")\n          if (arrayValue.length < 2) return\n\n          setSelectedTokenStandard(value.split(\"&\")[0])\n          setSelectedTokenBlockchain(value.split(\"&\")[1])\n        }}\n        type=\"small\"\n        isSmooth\n      />\n      {(isVault || profile?.wallet === RootWallet.II) && (\n        <ChooseModal\n          label=\"Accounts\"\n          title={\"Choose an account\"}\n          optionGroups={accountsOptions}\n          iconClassnames=\"!w-6 !h-auto !object-contain\"\n          preselectedValue={selectedAccountAddress}\n          onSelect={setSelectedAccountAddress}\n          type=\"small\"\n          isSmooth\n        />\n      )}\n      <div>\n        <p className=\"mb-1 text-gray-400\">\n          {isPrincipalVisible ? \"Account ID\" : \"Wallet address\"}\n        </p>\n        <div className=\"rounded-md bg-gray-100 text-gray-400 flex items-center justify-between px-2.5 h-10 text-sm\">\n          <CenterEllipsis\n            value={address ?? \"\"}\n            leadingChars={29}\n            trailingChars={5}\n            id={\"address\"}\n          />\n          <Copy value={address} />\n        </div>\n      </div>\n      {!isVault && isPrincipalVisible && (\n        <div>\n          <p className=\"mb-1 text-gray-400\">Principal ID</p>\n          <div className=\"rounded-md bg-gray-100 text-gray-400 flex items-center justify-between px-2.5 h-10 text-sm\">\n            <CenterEllipsis\n              value={selectedAccountAddress ?? \"\"}\n              leadingChars={29}\n              trailingChars={5}\n              id={\"principal\"}\n            />\n            <Copy value={selectedAccountAddress} />\n          </div>\n        </div>\n      )}\n      <div className=\"mx-auto\">\n        <QRCode\n          options={{ width: isPrincipalVisible ? 140 : 200, margin: 0 }}\n          content={address}\n        />\n      </div>\n\n      <div\n        className={clsx(\n          \"absolute top-0 left-0 z-50 w-full h-full p-5 bg-white transition-all duration-200 ease-in-out\",\n          isModalOpen ? \"translate-x-0\" : \"-translate-x-full\",\n        )}\n      >\n        <ReceiveModal onBack={() => setIsModalOpen(false)} />\n      </div>\n    </BlurredLoader>\n  )\n}\n","import useSWR from \"swr\"\n\nimport { IGroupedOptions } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { getConnector } from \"frontend/ui/connnector/transfer-modal/transfer-factory\"\nimport { TransferModalType } from \"frontend/ui/connnector/transfer-modal/types\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nexport const useAccountsOptions = (\n  token: TokenStandards,\n  blockchain: Blockchain,\n  isVaultWallets?: boolean,\n  isRootOnly?: boolean,\n) => {\n  const { data: accountsOptions, ...rest } = useSWR<IGroupedOptions[]>(\n    [token, blockchain, isVaultWallets, \"accountsOptions\"],\n    async ([token, blockchain, isVault]) =>\n      (\n        await getConnector({\n          type: TransferModalType.FT,\n          tokenStandard: token,\n          blockchain: blockchain,\n        })\n      ).getAccountsOptions({ isVault, isRootOnly }),\n  )\n\n  return { data: accountsOptions ?? [], ...rest }\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { fromHexString, principalToAddress } from \"ictool\"\n\nimport { getVaults, getWallets } from \"@nfid/integration\"\n\nexport const getVaultWalletByAddress = async (walletAddress: string) => {\n  const vaults = await getVaults()\n  const allWallets = (\n    await Promise.all(vaults.map(async (vault) => await getWallets(vault.id)))\n  ).flat()\n\n  const mappedWallets = allWallets.map((w) => ({\n    ...w,\n    address: principalToAddress(\n      Principal.fromText(VAULT_CANISTER_ID),\n      fromHexString(w.uid),\n    ),\n  }))\n\n  return mappedWallets.find((w) => w.address === walletAddress)\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\ninterface SpinnerProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport const Spinner: React.FC<SpinnerProps> = ({ className }) => {\n  return (\n    <svg\n      className={clsx(\"animate-spin\", className ?? \"h-5 w-5 text-black\")}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\nimport clsx from \"clsx\"\nimport { principalToAddress } from \"ictool\"\nimport { Token } from \"packages/integration/src/lib/asset/types\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\nimport useSWR from \"swr\"\n\nimport {\n  Button,\n  ChooseModal,\n  IconCmpArrow,\n  IconCmpArrowRight,\n  Label,\n  BlurredLoader,\n  sumRules,\n} from \"@nfid-frontend/ui\"\nimport { truncateString } from \"@nfid-frontend/utils\"\nimport {\n  RootWallet,\n  registerTransaction,\n  sendReceiveTracking,\n} from \"@nfid/integration\"\nimport { TokenMetadata } from \"@nfid/integration/token/dip-20\"\n\nimport { getVaultWalletByAddress } from \"frontend/features/vaults/utils\"\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\nimport { stringICPtoE8s } from \"frontend/integration/wallet/utils\"\nimport { Spinner } from \"frontend/ui/atoms/loader/spinner\"\nimport { resetCachesByKey } from \"frontend/ui/connnector/cache\"\nimport {\n  getAllTokensOptions,\n  getConnector,\n} from \"frontend/ui/connnector/transfer-modal/transfer-factory\"\nimport {\n  ITransferResponse,\n  TransferModalType,\n} from \"frontend/ui/connnector/transfer-modal/types\"\nimport { ITransferConfig } from \"frontend/ui/connnector/transfer-modal/types\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport {\n  PRINCIPAL_LENGTH,\n  validateTransferAmountField,\n} from \"../utils/validations\"\nimport { ITransferSuccess } from \"./success\"\n\ninterface ITransferFT {\n  isVault: boolean\n  preselectedTokenCurrency: string\n  preselectedAccountAddress: string\n  preselectedTokenBlockchain?: string\n  preselectedTransferDestination?: string\n  onTransferPromise: (data: ITransferSuccess) => void\n}\n\nexport const TransferFT = ({\n  isVault,\n  preselectedTokenCurrency,\n  preselectedAccountAddress = \"\",\n  preselectedTokenBlockchain = Blockchain.IC,\n  preselectedTransferDestination,\n  onTransferPromise,\n}: ITransferFT) => {\n  const [selectedTokenCurrency, setSelectedTokenCurrency] = useState(\n    preselectedTokenCurrency,\n  )\n  const [selectedTokenBlockchain, setSelectedTokenBlockchain] = useState(\n    preselectedTokenBlockchain,\n  )\n  const [selectedAccountAddress, setSelectedAccountAddress] = useState(\n    preselectedAccountAddress,\n  )\n\n  const { profile, isLoading: isLoadingProfile } = useProfile()\n  console.debug(\"TransferFT\", {\n    profile,\n    isLoadingProfile,\n    selectedTokenBlockchain,\n    selectedTokenCurrency,\n  })\n\n  const { data: selectedConnector, isLoading: isConnectorLoading } = useSWR(\n    [selectedTokenCurrency, selectedTokenBlockchain, \"selectedConnector\"],\n    ([selectedTokenCurrency, selectedTokenBlockchain]) =>\n      getConnector({\n        type: TransferModalType.FT,\n        currency: selectedTokenCurrency,\n        blockchain: selectedTokenBlockchain,\n      }),\n    {\n      onSuccess: () => {\n        refetchBalance()\n      },\n    },\n  )\n\n  const { data: tokenMetadata, isLoading: isMetadataLoading } = useSWR<\n    ITransferConfig & (TokenMetadata | Token)\n  >(\n    selectedConnector ? [selectedConnector, \"tokenMetadata\"] : null,\n    async ([selectedConnector]) => {\n      // if it's dip20 token, we need to fetch token metadata\n      if (selectedConnector.getTokenMetadata)\n        return await selectedConnector.getTokenMetadata(selectedTokenCurrency)\n      else return selectedConnector.getTokenConfig()\n    },\n  )\n\n  const {\n    data: accountsOptions,\n    isLoading: isAccountsLoading,\n    isValidating: isAccountsValidating,\n  } = useSWR(\n    selectedConnector ? [selectedConnector, isVault, \"accountsOptions\"] : null,\n    ([connector, isVault]) =>\n      connector.getAccountsOptions({\n        currency: selectedTokenCurrency,\n        isVault,\n      }),\n    {\n      onSuccess: (data) => {\n        resetField(\"to\")\n      },\n    },\n  )\n\n  useEffect(() => {\n    if (!accountsOptions?.length) return\n    !preselectedAccountAddress.length &&\n      setSelectedAccountAddress(accountsOptions[0].options[0].value)\n  }, [accountsOptions, preselectedAccountAddress.length])\n\n  const {\n    data: balance,\n    mutate: refetchBalance,\n    isValidating: isBalanceFetching,\n    isLoading: isBalanceLoading,\n  } = useSWR(\n    selectedConnector && selectedAccountAddress\n      ? [selectedConnector, selectedAccountAddress, \"balance\"]\n      : null,\n    ([connector, selectedAccountAddress]) =>\n      connector.getBalance(selectedAccountAddress, selectedTokenCurrency),\n    { refreshInterval: 10000 },\n  )\n\n  const { data: tokenOptions, isLoading: isTokensLoading } = useSWR(\n    [isVault, \"getAllTokensOptions\"],\n    ([isVault]) => getAllTokensOptions(isVault),\n  )\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    setValue,\n    setError,\n    resetField,\n    getValues,\n  } = useForm({\n    mode: \"all\",\n    defaultValues: {\n      amount: undefined as any as number,\n      to: preselectedTransferDestination ?? \"\",\n    },\n  })\n\n  const {\n    data: transferFee,\n    mutate: calculateFee,\n    isValidating: isFeeLoading,\n  } = useSWR(\n    selectedConnector && tokenMetadata\n      ? [selectedConnector, getValues, tokenMetadata, \"transferFee\"]\n      : null,\n    ([selectedConnector, getValues, token]) =>\n      selectedConnector?.getFee({\n        amount: getValues(\"amount\"),\n        to: getValues(\"to\"),\n        currency: selectedTokenCurrency,\n        contract:\n          \"contractAddress\" in token ? String(token.contractAddress) : \"\",\n      }),\n    {\n      refreshInterval: 5000,\n    },\n  )\n\n  const { data: rate } = useSWR(\n    selectedConnector ? [selectedTokenCurrency, \"rate\"] : null,\n    ([selectedTokenCurrency]) =>\n      selectedConnector?.getRate(selectedTokenCurrency),\n  )\n\n  const handleTrackTransfer = useCallback(\n    (amount: number) => {\n      const token = selectedConnector?.getTokenConfig()\n      if (!token) return\n\n      sendReceiveTracking.sendToken({\n        network: token.blockchain,\n        destinationType: \"address\",\n        tokenName: selectedTokenCurrency,\n        tokenType: \"fungible\",\n        tokenStandard: token.tokenStandard,\n        amount: amount,\n        fee: transferFee?.fee ?? \"0\",\n      })\n    },\n    [selectedConnector, selectedTokenCurrency, transferFee?.fee],\n  )\n\n  const submit = useCallback(\n    async (values: { amount: number; to: string }) => {\n      if (!tokenMetadata) return toast.error(\"Token metadata has not loaded\")\n      if (!selectedConnector) return toast.error(\"No selected connector\")\n      if (values.to === selectedAccountAddress)\n        return setError(\"to\", {\n          type: \"value\",\n          message: \"You can't transfer to the same wallet\",\n        })\n\n      if (isVault) {\n        return onTransferPromise({\n          assetImg: tokenMetadata?.icon ?? \"\",\n          initialPromise: new Promise(async (resolve) => {\n            const wallet = await getVaultWalletByAddress(selectedAccountAddress)\n\n            const address =\n              values.to.length === PRINCIPAL_LENGTH\n                ? principalToAddress(Principal.fromText(values.to))\n                : values.to\n\n            await registerTransaction({\n              address,\n              amount: BigInt(stringICPtoE8s(String(values.amount))),\n              from_sub_account: wallet?.uid ?? \"\",\n            })\n\n            resolve({} as ITransferResponse)\n          }),\n          title: `${values.amount} ${selectedTokenCurrency}`,\n          subTitle: `$${(Number(values.amount) * Number(rate)).toFixed(2)}`,\n          callback: () => {\n            resetCachesByKey(\n              [\n                `${selectedConnector.constructor.name}:getBalance:[\"${selectedAccountAddress}\"]`,\n                `${selectedConnector.constructor.name}:getBalance:[\"${values.to}\"]`,\n                `${selectedConnector.constructor.name}:getBalance:[]`,\n                `${selectedConnector.constructor.name}:getAccountsOptions:[\"${selectedTokenCurrency}\"]`,\n              ],\n              () => refetchBalance(),\n            )\n          },\n          isAssetPadding: true,\n        })\n      }\n\n      onTransferPromise({\n        assetImg: tokenMetadata?.icon ?? \"\",\n        initialPromise: new Promise(async (resolve) => {\n          const res = await selectedConnector.transfer({\n            to: values.to,\n            amount: values.amount,\n            currency: selectedTokenCurrency,\n            identity: await selectedConnector?.getIdentity(\n              selectedAccountAddress,\n            ),\n            contract:\n              \"contractAddress\" in tokenMetadata\n                ? String(tokenMetadata.contractAddress)\n                : \"\",\n          })\n\n          handleTrackTransfer(values.amount)\n          resolve(res)\n        }),\n        title: `${values.amount} ${selectedTokenCurrency}`,\n        subTitle: `$${(Number(values.amount) * Number(rate)).toFixed(2)}`,\n        callback: () => {\n          resetCachesByKey(\n            [\n              `${selectedConnector.constructor.name}:getBalance:[\"${selectedAccountAddress}\"]`,\n              `${selectedConnector.constructor.name}:getBalance:[\"${values.to}\"]`,\n              `${selectedConnector.constructor.name}:getBalance:[]`,\n              `${selectedConnector.constructor.name}:getAccountsOptions:[\"${selectedTokenCurrency}\"]`,\n            ],\n            () => refetchBalance(),\n          )\n        },\n        isAssetPadding: true,\n        duration: tokenMetadata.duration,\n      })\n    },\n    [\n      handleTrackTransfer,\n      isVault,\n      onTransferPromise,\n      rate,\n      refetchBalance,\n      selectedAccountAddress,\n      selectedConnector,\n      selectedTokenCurrency,\n      setError,\n      tokenMetadata,\n    ],\n  )\n\n  const loadingMessage = useMemo(() => {\n    if (isLoadingProfile) return \"Fetching account information...\"\n    if (isTokensLoading) return \"Fetching supported tokens...\"\n    if (isConnectorLoading || isMetadataLoading)\n      return \"Loading token config...\"\n    if (isAccountsLoading || isAccountsValidating) return \"Loading accounts...\"\n  }, [\n    isLoadingProfile,\n    isTokensLoading,\n    isConnectorLoading,\n    isMetadataLoading,\n    isAccountsLoading,\n    isAccountsValidating,\n  ])\n\n  return (\n    <BlurredLoader\n      className=\"text-xs\"\n      overlayClassnames=\"rounded-xl\"\n      isLoading={\n        isConnectorLoading ||\n        isAccountsLoading ||\n        isAccountsValidating ||\n        isMetadataLoading ||\n        isTokensLoading\n      }\n      loadingMessage={loadingMessage}\n    >\n      <p className=\"mb-1\">Amount to send</p>\n      <div className=\"flex flex-col justify-between h-full pb-20\">\n        <div\n          className={clsx(\n            \"border rounded-md flex items-center justify-between pl-4 pr-5 h-14 mb-4\",\n            errors.amount ? \"ring border-red-600 ring-red-100\" : \"border-black\",\n          )}\n        >\n          <input\n            className={clsx(\n              \"min-w-0 text-xl placeholder:text-black font-semibold\",\n              \"outline-none border-none h-[54px] focus:ring-0\",\n              \"p-0\",\n            )}\n            placeholder=\"0.00\"\n            type=\"number\"\n            id=\"amount\"\n            min={0.0}\n            {...register(\"amount\", {\n              required: sumRules.errorMessages.required,\n              validate: validateTransferAmountField(\n                balance?.balance,\n                transferFee?.fee?.replace(/[^0-9.]/g, \"\"),\n              ),\n              valueAsNumber: true,\n              onBlur: calculateFee,\n            })}\n          />\n          <div\n            className={clsx(\n              \"absolute mt-[75px] left-5\",\n              \"text-xs py-1 text-red\",\n            )}\n          >\n            {errors.amount?.message}\n          </div>\n          <ChooseModal\n            optionGroups={tokenOptions ?? []}\n            title=\"Asset to send\"\n            type=\"trigger\"\n            onSelect={(value) => {\n              const arrayValue = value.split(\"&\")\n              if (arrayValue.length < 2) return\n\n              setSelectedTokenCurrency(arrayValue[0])\n              setSelectedTokenBlockchain(arrayValue[1])\n            }}\n            onOpen={sendReceiveTracking.supportedTokenModalOpened}\n            preselectedValue={`${selectedTokenCurrency}&${selectedTokenBlockchain}`}\n            isSmooth\n            trigger={\n              <div\n                id={`token_${selectedTokenCurrency}`}\n                className=\"flex items-center cursor-pointer shrink-0\"\n              >\n                <img\n                  className=\"w-[26px] mr-1.5\"\n                  src={tokenMetadata?.icon}\n                  alt={selectedTokenCurrency}\n                />\n\n                <p className=\"text-lg font-semibold\">{selectedTokenCurrency}</p>\n                <IconCmpArrowRight className=\"ml-4\" />\n              </div>\n            }\n          />\n        </div>\n        {(isVault || profile?.wallet === RootWallet.II) && (\n          <ChooseModal\n            label=\"From\"\n            title=\"From\"\n            optionGroups={accountsOptions ?? []}\n            preselectedValue={selectedAccountAddress}\n            onSelect={setSelectedAccountAddress}\n            warningText={\n              isVault ? undefined : (\n                <div className=\"w-[337px]\">\n                  Starting September 1, 2023, assets from external applications\n                  will not be displayed in NFID. <br /> <br /> To manage those\n                  assets in NFID, transfer them to your NFID Wallet. Otherwise,\n                  you’ll only have access through the application’s website.\n                </div>\n              )\n            }\n          />\n        )}\n        <ChooseModal\n          type=\"input\"\n          label=\"To\"\n          title={\"Choose an account\"}\n          optionGroups={\n            profile?.wallet === RootWallet.NFID ? [] : accountsOptions ?? []\n          }\n          isFirstPreselected={false}\n          placeholder={tokenMetadata?.addressPlaceholder}\n          errorText={errors.to?.message}\n          registerFunction={register(\"to\", {\n            required: \"This field cannot be empty\",\n            validate: (value) => selectedConnector?.validateAddress(value),\n            onBlur: calculateFee,\n          })}\n          onSelect={(value) => {\n            resetField(\"to\")\n            setValue(\"to\", value)\n            calculateFee()\n          }}\n          preselectedValue={preselectedTransferDestination}\n        />\n        <div>\n          <Label>Network fee</Label>\n          <div\n            className={clsx(\n              \"flex items-center justify-between mt-1\",\n              \"px-2.5 text-gray-400 bg-gray-100 rounded-md h-14\",\n            )}\n          >\n            <div>\n              <p className=\"text-sm\">\n                {tokenMetadata?.blockchain === Blockchain.IC\n                  ? \"Instant\"\n                  : \"Estimated\"}\n              </p>\n            </div>\n            {isFeeLoading ? (\n              <Spinner className=\"w-3 h-3 text-gray-400\" />\n            ) : (\n              <div className=\"text-right\">\n                <p className=\"text-sm leading-5\">\n                  ${transferFee?.feeUsd ?? \"0.00\"}\n                </p>\n\n                <p className=\"text-xs leading-5\" id=\"fee\">\n                  {transferFee?.fee ?? `0.00 ${tokenMetadata?.feeCurrency}`}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n        <Button\n          className=\"text-base\"\n          type=\"primary\"\n          id={\"sendFT\"}\n          block\n          onClick={handleSubmit(submit)}\n          icon={<IconCmpArrow className=\"rotate-[135deg]\" />}\n        >\n          Send\n        </Button>\n\n        <div\n          className={clsx(\n            \"bg-gray-50 flex flex-col text-sm text-gray-500\",\n            \"text-xs absolute bottom-0 left-0 w-full px-5 py-3 round-b-xl\",\n          )}\n        >\n          <div className=\"flex items-center justify-between\">\n            <p>{tokenMetadata?.blockchain}</p>\n            <p>Balance</p>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <p>{truncateString(selectedAccountAddress, 6, 4)}</p>\n            <div className=\"flex items-center space-x-0.5\">\n              {!isBalanceLoading &&\n              !isBalanceFetching &&\n              !!balance?.balance?.length ? (\n                <span id=\"balance\">\n                  {balance.balance.toString()} {selectedTokenCurrency}\n                </span>\n              ) : (\n                <Spinner className=\"w-3 h-3 text-gray-400\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </BlurredLoader>\n  )\n}\n","import clsx from \"clsx\"\nimport { useCallback, useMemo, useState } from \"react\"\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\nimport useSWR from \"swr\"\n\nimport {\n  Button,\n  ChooseModal,\n  IconCmpArrow,\n  IconCmpArrowRight,\n  IconCmpNFTPreview,\n  Label,\n  BlurredLoader,\n} from \"@nfid-frontend/ui\"\nimport { sendReceiveTracking } from \"@nfid/integration\"\n\nimport { Spinner } from \"frontend/ui/atoms/loader/spinner\"\nimport { resetCachesByKey } from \"frontend/ui/connnector/cache\"\nimport {\n  getAllNFT,\n  getAllNFTOptions,\n  getConnector,\n} from \"frontend/ui/connnector/transfer-modal/transfer-factory\"\nimport { TransferModalType } from \"frontend/ui/connnector/transfer-modal/types\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { ITransferSuccess } from \"./success\"\n\ninterface ITransferNFT {\n  preselectedNFTId?: string\n  selectedReceiverWallet?: string\n  onTransferPromise: (data: ITransferSuccess) => void\n}\n\nexport const TransferNFT = ({\n  selectedReceiverWallet,\n  onTransferPromise,\n  preselectedNFTId = \"\",\n}: ITransferNFT) => {\n  const [selectedNFTId, setSelectedNFTId] = useState(preselectedNFTId)\n\n  const { data: nfts, mutate: refetchNFTs } = useSWR(\"allNFTS\", getAllNFT)\n  const { data: nftOptions, isLoading: isNFTLoading } = useSWR(\n    \"allNFTSOptions\",\n    getAllNFTOptions,\n  )\n\n  const selectedNFT = useMemo(() => {\n    return nfts?.find((nft) => nft.tokenId === selectedNFTId)\n  }, [nfts, selectedNFTId])\n\n  const { data: selectedConnector } = useSWR(\n    selectedNFT?.blockchain\n      ? [selectedNFT?.blockchain, \"nftSelectedConnector\"]\n      : null,\n    ([chain]) =>\n      getConnector({\n        type: TransferModalType.NFT,\n        blockchain: chain,\n      }),\n    {\n      onSuccess: () => {\n        calculateFee()\n      },\n    },\n  )\n\n  const { data: accountsOptions, isLoading: isAccountsLoading } = useSWR(\n    selectedConnector ? [selectedConnector, \"accountsOptions\"] : null,\n    ([connector]) => connector.getAccountsOptions({}),\n  )\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    setValue,\n    getValues,\n    resetField,\n  } = useForm({\n    mode: \"all\",\n    defaultValues: {\n      to: selectedReceiverWallet ?? \"\",\n    },\n  })\n\n  const {\n    data: transferFee,\n    mutate: calculateFee,\n    isValidating: isFeeValidating,\n    isLoading: isFeeLoading,\n  } = useSWR(\n    selectedConnector ? [selectedConnector, getValues, \"nftTransferFee\"] : null,\n    ([selectedConnector, getValues]) =>\n      selectedConnector?.getFee({\n        to: getValues(\"to\"),\n        contract: selectedNFT?.contractId ?? \"\",\n        tokenId: selectedNFT?.tokenId ?? \"\",\n        standard: selectedNFT?.collection.standard ?? \"\",\n      }),\n    {\n      refreshInterval: 5000,\n    },\n  )\n\n  const handleTrackTransfer = React.useCallback(() => {\n    const token = selectedConnector?.getTokenConfig()\n    if (!token) return\n\n    sendReceiveTracking.sendToken({\n      network: token.blockchain,\n      destinationType: \"address\",\n      tokenName: selectedNFT?.tokenId || \"\",\n      tokenType: \"non-fungible\",\n      tokenStandard: selectedNFT?.collection.standard || \"\",\n      amount: \"1\",\n      fee: transferFee?.fee || \"0\",\n    })\n  }, [\n    selectedConnector,\n    selectedNFT?.collection.standard,\n    selectedNFT?.tokenId,\n    transferFee,\n  ])\n\n  const submit = useCallback(\n    async (values: any) => {\n      if (!selectedNFT) return toast.error(\"No selected NFT\")\n      if (!selectedConnector) return toast.error(\"No selected connector\")\n\n      onTransferPromise({\n        assetImg: selectedNFT?.assetPreview.url,\n        initialPromise: new Promise(async (resolve) => {\n          await selectedConnector?.getFee({\n            to: getValues(\"to\"),\n            contract: selectedNFT?.contractId ?? \"\",\n            tokenId: selectedNFT?.tokenId ?? \"\",\n            standard: selectedNFT?.collection.standard ?? \"\",\n          })\n\n          const res = await selectedConnector.transfer({\n            identity: await selectedConnector.getIdentity(\n              selectedNFT.account.domain,\n              selectedNFT.account.accountId,\n              [selectedNFT.contractId],\n            ),\n            to: values.to,\n            contract: selectedNFT?.contractId ?? \"\",\n            tokenId: selectedNFT?.tokenId ?? \"\",\n            standard: selectedNFT?.collection.standard ?? \"\",\n          })\n\n          handleTrackTransfer()\n          resolve(res)\n        }),\n        title: selectedNFT.name,\n        subTitle: selectedNFT.collection.name,\n        callback: () => {\n          resetCachesByKey(\n            [\n              `${selectedConnector.constructor.name}:getNFTOptions:[]`,\n              `${selectedConnector.constructor.name}:getNFTs:[]`,\n            ],\n            () => refetchNFTs(),\n          )\n        },\n      })\n    },\n    [\n      getValues,\n      handleTrackTransfer,\n      onTransferPromise,\n      refetchNFTs,\n      selectedConnector,\n      selectedNFT,\n    ],\n  )\n\n  const loadingMessage = useMemo(() => {\n    if (isNFTLoading) return \"Fetching your NFTs...\"\n    if (isAccountsLoading) return \"Loading accounts...\"\n  }, [isAccountsLoading, isNFTLoading])\n\n  return (\n    <BlurredLoader\n      overlayClassnames=\"rounded-xl\"\n      isLoading={isNFTLoading || isAccountsLoading}\n      loadingMessage={loadingMessage}\n    >\n      <div className=\"space-y-3 text-xs \">\n        <ChooseModal\n          label=\"NFT to transfer\"\n          optionGroups={nftOptions ?? []}\n          title={\"Choose an NFT\"}\n          onSelect={(value) => {\n            setSelectedNFTId(value)\n            calculateFee()\n          }}\n          preselectedValue={selectedNFTId}\n          iconClassnames=\"!w-12 !h-12 !object-cover rounded-md\"\n          trigger={\n            <div\n              className=\"flex items-center justify-between w-full h-[90px] pl-0.5 p-2 pr-5 border border-black rounded-md\"\n              id=\"choose-nft\"\n            >\n              <div className=\"flex items-center\">\n                <div className=\"relative flex items-center mr-2.5\">\n                  {selectedNFT?.assetPreview ? (\n                    <img\n                      className=\"object-cover rounded-sm w-[84px] h-[84px]\"\n                      src={selectedNFT?.assetPreview.url}\n                      alt={\"\"}\n                    />\n                  ) : (\n                    <IconCmpNFTPreview className=\"text-gray-100 rounded-sm w-[84px] h-[84px]\" />\n                  )}\n\n                  <div\n                    className={clsx(\n                      \"absolute w-6 h-6 bg-white rounded-full bottom-1 right-1\",\n                      \"flex items-center justify-center\",\n                      !selectedNFT && \"hidden\",\n                    )}\n                  >\n                    <img\n                      className=\"w-4\"\n                      src={selectedNFT?.blockchainLogo}\n                      alt=\"\"\n                    />\n                  </div>\n                </div>\n                {!selectedNFT ? (\n                  <p className=\"leading-3 text-gray-400\">Choose NFT</p>\n                ) : (\n                  <div>\n                    <p className=\"mb-1 text-sm\">{selectedNFT.name}</p>\n                    <p className=\"text-xs leading-3 text-gray-400\">\n                      {selectedNFT.collection.name}\n                    </p>\n                  </div>\n                )}\n              </div>\n              <div className=\"cursor-pointer\">\n                <IconCmpArrowRight />\n              </div>\n            </div>\n          }\n          type=\"trigger\"\n        />\n        <ChooseModal\n          label=\"To\"\n          optionGroups={accountsOptions ?? []}\n          title={\"Choose an account\"}\n          onSelect={(value) => {\n            resetField(\"to\")\n            setValue(\"to\", value)\n            calculateFee()\n          }}\n          type=\"input\"\n          placeholder={`Recipient ${\n            selectedNFT?.blockchain ?? \"blockchain\"\n          } address`}\n          isFirstPreselected={false}\n          errorText={errors.to?.message}\n          registerFunction={register(\"to\", {\n            required: \"This field cannot be empty\",\n            validate: (value) => selectedConnector?.validateAddress(value),\n            onBlur: calculateFee,\n          })}\n        />\n        <div>\n          <Label>Network fee</Label>\n          <div\n            className={clsx(\n              \"flex items-center justify-between mt-1\",\n              \"px-2.5 text-gray-400 bg-gray-100 rounded-md h-14\",\n            )}\n          >\n            <div>\n              <p className=\"text-sm\">\n                {selectedNFT?.blockchain === Blockchain.IC\n                  ? \"Instant\"\n                  : \"Estimated\"}\n              </p>\n            </div>\n            {!transferFee || isFeeLoading || isFeeValidating ? (\n              <Spinner className=\"w-3 h-3 text-gray-400\" />\n            ) : (\n              <div className=\"text-right\">\n                <p className=\"text-sm leading-5\">${transferFee?.feeUsd}</p>\n\n                <p className=\"text-xs leading-5\" id=\"fee\">\n                  {transferFee?.fee}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n        <Button\n          className=\"text-base\"\n          type=\"primary\"\n          block\n          onClick={handleSubmit(submit)}\n          icon={<IconCmpArrow className=\"rotate-[135deg]\" />}\n        >\n          Send\n        </Button>\n      </div>\n    </BlurredLoader>\n  )\n}\n","import clsx from \"clsx\"\nimport React, { useMemo } from \"react\"\nimport { Fade } from \"react-awesome-reveal\"\n\nimport { LottieAnimation } from \"@nfid-frontend/ui\"\nimport { Button, H5 } from \"@nfid-frontend/ui\"\n\nimport Fail from \"../assets/error.json\"\nimport Success1 from \"../assets/success_1.json\"\nimport Success2 from \"../assets/success_2.json\"\nimport Success3 from \"../assets/success_3.json\"\nimport Success4 from \"../assets/success_4.json\"\n\nexport interface ITransferModalSuccess {\n  title: string\n  subTitle: string\n  url?: string\n  onClose: () => void\n  assetImg: string\n  isAssetPadding?: boolean\n  step: 0 | 1 | 2 | 3 | 4\n  duration: string\n}\n\nconst allAnimations = [Success1, Success2, Success3, Success4, Fail]\n\nexport const Success: React.FC<ITransferModalSuccess> = ({\n  title,\n  subTitle,\n  url,\n  onClose,\n  assetImg,\n  isAssetPadding = false,\n  step = 0,\n  duration,\n}) => {\n  const animation = useMemo(() => {\n    return allAnimations[step]\n  }, [step])\n\n  const isCompleted = useMemo(() => {\n    return step >= 3\n  }, [step])\n\n  const isFailed = useMemo(() => {\n    return step === 4\n  }, [step])\n\n  return (\n    <div\n      id={\"success_window_\" + step}\n      className={clsx(\n        \"text-black text-center relative\",\n        \"flex flex-grow flex-col justify-between\",\n      )}\n    >\n      <div className=\"flex-grow text-center\">\n        <H5 className=\"mt-5 text-xl leading-6\">\n          {isFailed\n            ? \"Transaction failed\"\n            : isCompleted\n            ? \"Sent successfully\"\n            : \"Processing...\"}\n        </H5>\n\n        <p className=\"mt-2 text-sm leading-5\">\n          {isFailed\n            ? \"Please make sure you have enough funds and try again\"\n            : isCompleted\n            ? \"\"\n            : `This usually takes less than ${duration}.`}\n        </p>\n\n        <div className=\"absolute flex items-center justify-center w-full px-3 -top-0\">\n          <LottieAnimation\n            animationData={animation}\n            loop={step === 0 || step === 2}\n          />\n          <img\n            alt=\"assetImg\"\n            src={assetImg}\n            className={clsx(\n              \"absolute h-[120px] w-[120px] object-contain -mt-[123px] ml-[1px] rounded-full object-center\",\n              isAssetPadding && \"p-4\",\n            )}\n          />\n        </div>\n      </div>\n      <div className=\"relative z-20\">\n        <p className=\"font-bold\" id=\"title\">\n          {title}\n        </p>\n        <p className=\"mt-1 text-sm text-gray-400\" id=\"subTitle\">\n          {subTitle}\n        </p>\n        <Button type=\"primary\" block className=\"mt-10\" onClick={onClose}>\n          Done\n        </Button>\n        {url && (\n          <>\n            {/* @ts-ignore: no solution yet */}\n            <Fade bottom>\n              <Button\n                block\n                type=\"ghost\"\n                className=\"mt-2.5\"\n                onClick={() => window.open(url, \"_blank\")}\n              >\n                View transaction\n              </Button>\n            </Fade>\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport { toast } from \"react-toastify\"\nimport useSWR from \"swr\"\n\nimport { ITransferResponse } from \"frontend/ui/connnector/transfer-modal/types\"\n\nimport { Success } from \"../ui/success\"\n\nexport interface ITransferSuccess {\n  onClose?: () => void\n  initialPromise: Promise<ITransferResponse>\n  callback?: () => void\n  title: string\n  subTitle: string\n  assetImg: string\n  isAssetPadding?: boolean\n  duration?: string\n}\n\nexport const TransferSuccess: React.FC<ITransferSuccess> = ({\n  onClose,\n  initialPromise,\n  title,\n  subTitle,\n  assetImg,\n  isAssetPadding,\n  callback,\n  duration = \"10 min\",\n}) => {\n  const [currentState, setCurrentState] = React.useState<0 | 1 | 2 | 3 | 4>(0)\n\n  const { data } = useSWR(\n    [initialPromise, \"initialTransferPromise\"],\n    ([initialPromise]) => initialPromise,\n    {\n      onSuccess: async (data) => {\n        if (\"errorMessage\" in data) {\n          toast.error(data.errorMessage?.message ?? \"Unknown error\", {\n            toastId: \"failedTransfer\",\n          })\n          return setCurrentState(4)\n        }\n        setCurrentState(1)\n        setTimeout(async () => {\n          if (!data?.verifyPromise) {\n            setCurrentState(3)\n          } else {\n            setCurrentState(2)\n            await data.verifyPromise\n            setCurrentState(3)\n          }\n          toast.success(`Transaction ${title} successful`, {\n            toastId: \"successTransfer\",\n          })\n          callback && callback()\n        }, 5000)\n      },\n      onError: () => {\n        toast.error(\"Something went wrong\")\n        setCurrentState(4)\n      },\n      revalidateOnFocus: false,\n    },\n  )\n  return (\n    <Success\n      title={title}\n      subTitle={subTitle}\n      url={data?.url}\n      onClose={onClose!}\n      assetImg={assetImg}\n      step={currentState}\n      isAssetPadding={isAssetPadding}\n      duration={duration}\n    />\n  )\n}\n","import { IconCmpArrow, ITab } from \"@nfid-frontend/ui\"\n\nexport const transferTabs: ITab[] = [\n  {\n    label: \"Send\",\n    value: \"send\",\n    icon: <IconCmpArrow className=\"rotate-[135deg]\" />,\n  },\n  {\n    label: \"Receive\",\n    value: \"receive\",\n    icon: <IconCmpArrow className=\"-rotate-[45deg]\" />,\n  },\n]\n","import clsx from \"clsx\"\nimport { PropsWithChildren } from \"react\"\n\nexport interface ITransferTemplate extends PropsWithChildren {\n  onClickOutside?: () => void\n}\n\nexport const TransferTemplate: React.FC<ITransferTemplate> = ({\n  children,\n  onClickOutside,\n}) => {\n  return (\n    <div\n      className={clsx([\n        \"transition ease-in-out delay-150 duration-300\",\n        \"z-40 top-0 left-0 w-full h-screen\",\n        \"fixed bg-opacity-75 bg-gray-600\",\n      ])}\n      style={{ margin: 0 }}\n      onClick={onClickOutside}\n    >\n      <div\n        className={clsx(\n          \"rounded-xl shadow-lg p-5 text-black overflow-hidden\",\n          \"z-20 bg-white absolute flex flex-col\",\n          \"left-1/2 -translate-x-1/2 top-1/2 -translate-y-1/2\",\n          \"w-[95%] sm:w-[450px] h-[610px]\",\n        )}\n        onClick={(e) => e.stopPropagation()}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n","import { useActor } from \"@xstate/react\"\nimport { ToggleButton } from \"packages/ui/src/molecules/toggle-button\"\nimport React, { useCallback, useContext, useMemo } from \"react\"\nimport { toast } from \"react-toastify\"\n\nimport { BlurredLoader, Tabs } from \"@nfid-frontend/ui\"\n\nimport { ProfileContext } from \"frontend/provider\"\n\nimport { TransferReceive } from \"./components/receive\"\nimport { TransferFT } from \"./components/send-ft\"\nimport { TransferNFT } from \"./components/send-nft\"\nimport { ITransferSuccess, TransferSuccess } from \"./components/success\"\nimport { transferTabs } from \"./constants\"\nimport { TransferTemplate } from \"./ui/template\"\n\nexport const TransferModalCoordinator = () => {\n  const globalServices = useContext(ProfileContext)\n\n  const [state, send] = useActor(globalServices.transferService)\n\n  React.useEffect(\n    () =>\n      console.log(\"TransferModalCoordinator\", {\n        context: state.context,\n        state: state.value,\n      }),\n    [state.value, state.context],\n  )\n\n  React.useEffect(() => {\n    if (state.context.error?.message?.length) {\n      toast.error(state.context?.error.message, {\n        toastId: \"unexpectedTransferError\",\n      })\n\n      setTimeout(() => {\n        send({ type: \"ASSIGN_ERROR\", data: \"\" })\n      }, 5000)\n    }\n  }, [send, state.context.error])\n\n  const Component = useMemo(() => {\n    switch (true) {\n      case state.matches(\"SendMachine.SendFT\"):\n        return (\n          <TransferFT\n            isVault={state.context.isOpenedFromVaults}\n            preselectedTokenCurrency={state.context.tokenCurrency}\n            preselectedAccountAddress={state.context.sourceWalletAddress}\n            preselectedTokenBlockchain={state.context.tokenBlockchain}\n            preselectedTransferDestination={state.context.receiverWallet}\n            onTransferPromise={(message: ITransferSuccess) =>\n              send({ type: \"ON_TRANSFER_PROMISE\", data: message })\n            }\n          />\n        )\n      case state.matches(\"SendMachine.SendNFT\"):\n        return (\n          <TransferNFT\n            preselectedNFTId={state.context.selectedNFTId}\n            onTransferPromise={(message: ITransferSuccess) =>\n              send({ type: \"ON_TRANSFER_PROMISE\", data: message })\n            }\n          />\n        )\n      case state.matches(\"ReceiveMachine\"):\n        return (\n          <TransferReceive\n            isVault={state.context.isOpenedFromVaults}\n            preselectedTokenStandard={state.context.tokenStandard}\n            preselectedAccountAddress={state.context.sourceWalletAddress}\n            preselectedTokenBlockchain={state.context.tokenBlockchain}\n          />\n        )\n      case state.matches(\"Success\"):\n        return (\n          <TransferSuccess\n            onClose={() => send({ type: \"HIDE\" })}\n            {...state.context.transferObject!}\n          />\n        )\n      default:\n        return <BlurredLoader overlayClassnames=\"z-10 rounded-xl\" isLoading />\n    }\n  }, [send, state])\n\n  const onModalTypeChange = useCallback(\n    (value: string) => {\n      // TODO: send receive\n      return send({ type: \"CHANGE_DIRECTION\", data: value as any })\n    },\n    [send],\n  )\n\n  const onTokenTypeChange = useCallback(\n    (isNFT: boolean) => {\n      return send({ type: \"CHANGE_TOKEN_TYPE\", data: isNFT ? \"nft\" : \"ft\" })\n    },\n    [send],\n  )\n\n  if (state.matches(\"Hidden\")) return null\n\n  return (\n    <TransferTemplate onClickOutside={() => send({ type: \"HIDE\" })}>\n      {!state.matches(\"Success\") && (\n        <Tabs\n          tabs={transferTabs}\n          defaultValue={state.context.direction}\n          onValueChange={onModalTypeChange}\n          isFitLine={false}\n        />\n      )}\n      {state.context.direction === \"send\" && !state.matches(\"Success\") && (\n        <ToggleButton\n          firstValue=\"Token\"\n          secondValue=\"Collectible\"\n          className=\"mb-6\"\n          onChange={onTokenTypeChange}\n          defaultValue={state.context.tokenType === \"nft\"}\n          id=\"send_type_toggle\"\n        />\n      )}\n      {Component}\n    </TransferTemplate>\n  )\n}\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgSendReceive(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.99999 2.00001L10 2.00001M10 2.00001L10 7.00002M10 2.00001L2.49998 9.50003\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 11L8 16M8 16L13 16M8 16L15.5 8.49998\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSendReceive);\nexport default __webpack_public_path__ + \"static/media/send_receive.2189706c6d7fa8a1b884ebd5e7bce44d.svg\";\nexport { ForwardRef as ReactComponent };","import { useActor } from \"@xstate/react\"\nimport clsx from \"clsx\"\nimport { useContext } from \"react\"\n\nimport { Button } from \"@nfid-frontend/ui\"\nimport { sendReceiveTracking } from \"@nfid/integration\"\n\nimport { ProfileContext } from \"frontend/provider\"\n\nimport SendReceiveIcon from \"./send_receive.svg\"\n\nexport const SendReceiveButton = () => {\n  const globalServices = useContext(ProfileContext)\n\n  const [, send] = useActor(globalServices.transferService)\n\n  const handleOpenSendReceive = () => {\n    sendReceiveTracking.openModal()\n    send({ type: \"ASSIGN_VAULTS\", data: false })\n    send({ type: \"ASSIGN_SOURCE_WALLET\", data: \"\" })\n    send(\"SHOW\")\n  }\n  return (\n    <div id=\"sendReceiveButton\">\n      <Button\n        className={clsx(\"px-[10px] py-[11px] hidden md:flex z-10\")}\n        id=\"sendReceiveButton\"\n        onClick={handleOpenSendReceive}\n        icon={<img src={SendReceiveIcon} alt=\"send/receive\" />}\n      >\n        Send / Receive\n      </Button>\n      <div\n        className={clsx(\n          \"md:hidden fixed bottom-3 right-3 w-12 h-12\",\n          \"bg-blue-600 flex items-center justify-center\",\n          \"rounded-full shadow-blueLight shadow-blue-600\",\n          \"cursor-pointer z-30\",\n        )}\n        onClick={handleOpenSendReceive}\n        id=\"sendReceiveButton\"\n      >\n        <img className=\"w-6 h-6\" src={SendReceiveIcon} alt=\"transaction\" />\n      </div>\n    </div>\n  )\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\ninterface LogoTextProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport const LogoText: React.FC<LogoTextProps> = ({ className }) => {\n  return (\n    <svg\n      width=\"70\"\n      height=\"37\"\n      viewBox=\"0 0 70 37\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={clsx(\"\", className)}\n    >\n      <path\n        d=\"M13.9423 10.0312C14.2583 10.0312 14.4163 10.0312 14.537 10.0956C14.6432 10.1521 14.7295 10.2424 14.7836 10.3534C14.8451 10.4796 14.8451 10.6448 14.8451 10.9752V25.4014C14.8451 25.7319 14.8451 25.8971 14.7836 26.0233C14.7295 26.1343 14.6432 26.2245 14.537 26.2811C14.4163 26.3454 14.2583 26.3454 13.9423 26.3454H11.6363C11.4803 26.3454 11.4023 26.3454 11.3301 26.325C11.2661 26.307 11.2056 26.2772 11.1515 26.2372C11.0904 26.1921 11.0406 26.1293 10.9411 26.0036L4.80368 18.2574C4.65611 18.0711 4.58232 17.978 4.51784 17.9682C4.46199 17.9598 4.40579 17.9809 4.36795 18.0247C4.32426 18.0753 4.32426 18.1962 4.32426 18.438V25.4014C4.32426 25.7319 4.32426 25.8971 4.26276 26.0233C4.20866 26.1343 4.12234 26.2245 4.01617 26.2811C3.89547 26.3454 3.73746 26.3454 3.42144 26.3454H0.902817C0.586801 26.3454 0.428793 26.3454 0.308091 26.2811C0.201919 26.2245 0.115598 26.1343 0.0615007 26.0233C0 25.8971 0 25.7319 0 25.4014V10.9752C0 10.6448 0 10.4796 0.0615007 10.3534C0.115598 10.2424 0.201919 10.1521 0.308091 10.0956C0.428793 10.0312 0.586801 10.0312 0.902816 10.0312H3.20881C3.36481 10.0312 3.44281 10.0312 3.51506 10.0516C3.57906 10.0697 3.63952 10.0994 3.69367 10.1394C3.75477 10.1846 3.80453 10.2474 3.90405 10.373L10.0415 18.1193C10.189 18.3055 10.2628 18.3987 10.3273 18.4084C10.3831 18.4169 10.4393 18.3957 10.4772 18.352C10.5209 18.3014 10.5209 18.1805 10.5209 17.9386V10.9752C10.5209 10.6448 10.5209 10.4796 10.5824 10.3534C10.6365 10.2424 10.7228 10.1521 10.829 10.0956C10.9497 10.0312 11.1077 10.0312 11.4237 10.0312H13.9423Z\"\n        fill=\"black\"\n      />\n      <path\n        d=\"M22.4022 13.5971C22.3074 13.5971 22.26 13.5971 22.2237 13.6164C22.1919 13.6333 22.166 13.6604 22.1498 13.6937C22.1313 13.7316 22.1313 13.7811 22.1313 13.8802V16.903C22.1313 17.0021 22.1313 17.0517 22.1498 17.0895C22.166 17.1228 22.1919 17.1499 22.2237 17.1669C22.26 17.1862 22.3074 17.1862 22.4022 17.1862H28.1161C28.4321 17.1862 28.5901 17.1862 28.7108 17.2505C28.817 17.307 28.9033 17.3973 28.9574 17.5083C29.0189 17.6345 29.0189 17.7997 29.0189 18.1301V19.808C29.0189 20.1384 29.0189 20.3036 28.9574 20.4299C28.9033 20.5409 28.817 20.6311 28.7108 20.6877C28.5901 20.752 28.4321 20.752 28.1161 20.752H22.4022C22.3074 20.752 22.26 20.752 22.2237 20.7713C22.1919 20.7882 22.166 20.8153 22.1498 20.8486C22.1313 20.8865 22.1313 20.936 22.1313 21.0352V25.4014C22.1313 25.7319 22.1313 25.8971 22.0698 26.0233C22.0157 26.1343 21.9294 26.2245 21.8232 26.2811C21.7025 26.3454 21.5445 26.3454 21.2285 26.3454H18.6207C18.3047 26.3454 18.1467 26.3454 18.026 26.2811C17.9198 26.2245 17.8335 26.1343 17.7794 26.0233C17.7179 25.8971 17.7179 25.7319 17.7179 25.4014V10.9752C17.7179 10.6448 17.7179 10.4796 17.7794 10.3534C17.8335 10.2424 17.9198 10.1521 18.026 10.0956C18.1467 10.0312 18.3047 10.0312 18.6207 10.0312H29.0523C29.3683 10.0312 29.5263 10.0312 29.647 10.0956C29.7532 10.1521 29.8395 10.2424 29.8936 10.3534C29.9551 10.4796 29.9551 10.6448 29.9551 10.9752V12.6531C29.9551 12.9835 29.9551 13.1487 29.8936 13.2749C29.8395 13.3859 29.7532 13.4762 29.647 13.5328C29.5263 13.5971 29.3683 13.5971 29.0523 13.5971H22.4022Z\"\n        fill=\"black\"\n      />\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M44.2751 2.05897C44.7399 2.00715 45.0766 1.57116 45.027 1.08516C44.9774 0.599165 44.5605 0.24719 44.0957 0.299006L42.3671 0.491699C41.4815 0.590417 40.7712 0.669594 40.1943 0.778949C39.6 0.891604 39.0907 1.0456 38.6177 1.32278C37.8497 1.77281 37.213 2.43227 36.7756 3.23088C36.5062 3.72285 36.3545 4.25376 36.2418 4.87364C36.1323 5.47528 36.0507 6.21649 35.9489 7.14043L35.9445 7.18023L35.7748 8.94512C35.7281 9.43142 36.0672 9.86528 36.5323 9.91418C36.9974 9.96308 37.4123 9.6085 37.4591 9.1222L37.6276 7.37003C37.7335 6.40833 37.8085 5.73352 37.9047 5.20436C37.9992 4.68504 38.1047 4.36599 38.2447 4.11035C38.5296 3.59007 38.9445 3.16021 39.4453 2.86678C39.6914 2.72253 39.9981 2.61494 40.4963 2.52049C41.005 2.42406 41.6536 2.3512 42.5785 2.2481L44.2751 2.05897ZM60.744 1.08516C60.6944 1.57116 61.0311 2.00715 61.4959 2.05897L63.1925 2.2481C64.1174 2.3512 64.766 2.42406 65.2747 2.52049C65.7729 2.61494 66.0796 2.72253 66.3257 2.86678C66.8265 3.16021 67.2414 3.59007 67.5263 4.11035C67.6663 4.36599 67.7718 4.68504 67.8663 5.20436C67.9625 5.73352 68.0375 6.40833 68.1434 7.37003L68.3119 9.1222C68.3587 9.6085 68.7736 9.96308 69.2387 9.91418C69.7038 9.86528 70.0429 9.43142 69.9962 8.94512L69.8265 7.18023L69.8221 7.14043C69.7203 6.21649 69.6387 5.47528 69.5292 4.87364C69.4165 4.25376 69.2648 3.72285 68.9953 3.23088C68.558 2.43227 67.9213 1.77281 67.1533 1.32278C66.6803 1.0456 66.171 0.891604 65.5767 0.778949C64.9998 0.669594 64.2895 0.590417 63.4039 0.491699L61.6753 0.299006C61.2105 0.24719 60.7935 0.599165 60.744 1.08516ZM60.7435 35.2913C60.6939 34.8053 61.0306 34.3693 61.4954 34.3175L63.192 34.1284C64.1169 34.0253 64.7655 33.9524 65.2742 33.856C65.7724 33.7615 66.0791 33.6539 66.3252 33.5097C66.826 33.2163 67.2409 32.7864 67.5259 32.2661C67.6658 32.0105 67.7713 31.6914 67.8658 31.1721C67.962 30.6429 68.037 29.9681 68.1429 29.0064L68.3114 27.2543C68.3582 26.768 68.7731 26.4134 69.2382 26.4623C69.7033 26.5112 70.0425 26.945 69.9957 27.4313L69.826 29.1962L69.8216 29.236C69.7198 30.16 69.6382 30.9012 69.5287 31.5028C69.416 32.1227 69.2643 32.6536 68.9949 33.1456C68.5575 33.9442 67.9208 34.6037 67.1528 35.0537C66.6798 35.3309 66.1705 35.4849 65.5762 35.5975C64.9993 35.7069 64.289 35.786 63.4034 35.8848L61.6749 36.0775C61.21 36.1293 60.7931 35.7773 60.7435 35.2913ZM45.027 35.2912C45.0766 34.8052 44.7399 34.3692 44.2751 34.3174L42.5785 34.1283C41.6536 34.0252 41.005 33.9523 40.4963 33.8559C39.9981 33.7614 39.6914 33.6538 39.4453 33.5096C38.9445 33.2162 38.5296 32.7863 38.2447 32.266C38.1047 32.0104 37.9992 31.6913 37.9047 31.172C37.8085 30.6428 37.7335 29.968 37.6276 29.0063L37.4591 27.2542C37.4123 26.7679 36.9974 26.4133 36.5323 26.4622C36.0672 26.5111 35.7281 26.9449 35.7748 27.4312L35.9445 29.1961L35.9489 29.2359C36.0507 30.1599 36.1323 30.9011 36.2418 31.5027C36.3545 32.1226 36.5062 32.6535 36.7756 33.1455C37.213 33.9441 37.8497 34.6036 38.6177 35.0536C39.0907 35.3308 39.6 35.4848 40.1943 35.5974C40.7712 35.7068 41.4815 35.7859 42.3671 35.8847L44.0957 36.0774C44.5605 36.1292 44.9774 35.7772 45.027 35.2912ZM44.8358 11.3653C44.2836 11.3653 43.8358 11.813 43.8358 12.3653V24.2729C43.8358 24.8252 44.2836 25.2729 44.8358 25.2729H46.5982C47.1505 25.2729 47.5982 24.8252 47.5982 24.2729V12.3653C47.5982 11.813 47.1505 11.3653 46.5982 11.3653H44.8358ZM51.0701 11.3653C50.5178 11.3653 50.0701 11.813 50.0701 12.3653V24.2729C50.0701 24.8252 50.5178 25.2729 51.0701 25.2729H56.3597C57.8166 25.2729 59.1087 24.9881 60.2361 24.4186C61.3636 23.849 62.2377 23.041 62.8584 21.9947C63.4791 20.9483 63.7895 19.7231 63.7895 18.3191C63.7895 16.9151 63.4791 15.6899 62.8584 14.6435C62.2377 13.5971 61.3636 12.7891 60.2361 12.2196C59.1087 11.65 57.8166 11.3653 56.3597 11.3653H51.0701ZM58.944 21.1205C58.2599 21.796 57.3478 22.1337 56.2077 22.1337H54.1325C53.9668 22.1337 53.8325 21.9994 53.8325 21.8337V14.8044C53.8325 14.6387 53.9668 14.5044 54.1325 14.5044H56.2077C57.3478 14.5044 58.2599 14.8422 58.944 15.5177C59.6407 16.1932 59.9891 17.127 59.9891 18.3191C59.9891 19.5111 59.6407 20.4449 58.944 21.1205Z\"\n        fill=\"url(#paint0_linear_2608_11359)\"\n      />\n      <defs>\n        <linearGradient\n          id=\"paint0_linear_2608_11359\"\n          x1=\"43.9989\"\n          y1=\"12.2042\"\n          x2=\"56.4702\"\n          y2=\"29.5414\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"#CC5CDC\" />\n          <stop offset=\"0.244792\" stopColor=\"#7B66FF\" />\n          <stop offset=\"0.520833\" stopColor=\"#1F8AF0\" />\n          <stop offset=\"0.760417\" stopColor=\"#00D1FF\" />\n          <stop offset=\"1\" stopColor=\"#3DEDD7\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  )\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { LogoText } from \"./logo-text\"\n\ninterface LogoProps extends React.HTMLAttributes<HTMLDivElement> {\n  nav?: boolean\n}\n\nexport const Logo: React.FC<LogoProps> = ({ className, nav = false }) => {\n  return (\n    <a\n      href={nav ? \"/\" : \"#\"}\n      className={clsx(\n        \"flex items-center space-x-2 font-black tracking-wide text-black select-none\",\n        nav\n          ? \"hover:scale-110 transition-all duration-300 text-2xl\"\n          : \"pointer-events-none text-3xl\",\n        className,\n      )}\n    >\n      <LogoText />\n    </a>\n  )\n}\n","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgMenu(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23 20H1\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20 12H1\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23 4H1\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMenu);\nexport default __webpack_public_path__ + \"static/media/menu.29cb4cd98126e26e0cdc0154987b1478.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from \"clsx\"\nimport React from \"react\"\nimport { Link } from \"react-router-dom\"\n\ninterface IProfileSidebarItem extends React.HTMLAttributes<HTMLDivElement> {\n  icon?: string\n  title: string\n  to: string\n  isActive?: boolean\n}\n\nconst ProfileSidebarItem: React.FC<IProfileSidebarItem> = ({\n  icon,\n  title,\n  onClick,\n  className,\n  isActive,\n  to,\n  id,\n}) => {\n  return (\n    <Link\n      id={id}\n      to={to}\n      className={clsx(\n        \"h-[50px] flex items-center space-x-2.5 px-2.5 rounded-[4px]\",\n        \"hover:bg-gray-100 transition-colors cursor-pointer\",\n        \"md:w-[50px] md:justify-center\",\n        \"lg:w-auto lg:justify-start\",\n        isActive && \"bg-gray-100\",\n      )}\n    >\n      <div\n        className={clsx(\"w-6 h-6\", isActive ? \"bg-blue-600\" : \"bg-gray-700\")}\n        style={{\n          mask: `url(${icon})`,\n          WebkitMask: `url(${icon})`,\n        }}\n      />\n      <span\n        className={clsx(\n          className ?? \"text-sm font-semibold text-gray-700\",\n          \"sm:block md:hidden lg:block\",\n        )}\n      >\n        {title}\n      </span>\n    </Link>\n  )\n}\n\nexport default ProfileSidebarItem\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { profileSidebarItems } from \"frontend/apps/identity-manager/profile/routes\"\n\nimport ProfileSidebarItem from \"./sidebar-item\"\n\ninterface IProfileSidebar extends React.HTMLAttributes<HTMLDivElement> {\n  id: string\n}\n\nconst ProfileSidebar: React.FC<IProfileSidebar> = ({ id, className }) => {\n  return (\n    <div id={id} className={clsx(\"sticky top-4\", className)}>\n      {profileSidebarItems.map((item, index) => (\n        <ProfileSidebarItem\n          icon={item.icon}\n          title={item.title}\n          to={item.link}\n          key={`sidebarItem_${index}`}\n          isActive={window.location.pathname.includes(item.link)}\n          id={item.id}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default ProfileSidebar\n","import clsx from \"clsx\"\nimport React from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport User from \"src/assets/userpics/userpic_6.svg\"\n\nimport { useAuthentication } from \"frontend/apps/authentication/use-authentication\"\nimport { SendReceiveButton } from \"frontend/apps/identity-manager/profile/send-receive-button\"\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\nimport { Accordion } from \"frontend/ui/atoms/accordion\"\nimport { Logo } from \"frontend/ui/atoms/images/logo\"\nimport { ButtonMenu } from \"frontend/ui/atoms/menu\"\nimport useClickOutside from \"frontend/ui/utils/use-click-outside\"\n\nimport MenuIcon from \"./assets/menu.svg\"\n\nimport AuthenticatedPopup from \"../navigation-popup\"\nimport ProfileSidebar from \"../profile-sidebar\"\n\ninterface IProfileHeader extends React.HTMLAttributes<HTMLDivElement> {\n  anchor?: number\n}\n\nconst ProfileHeader: React.FC<IProfileHeader> = ({ className }) => {\n  const [isPopupVisible, setIsPopupVisible] = React.useState(false)\n  const popupRef = useClickOutside(() => setIsPopupVisible(false))\n  const { profile } = useProfile()\n  const { logout } = useAuthentication()\n  const navigate = useNavigate()\n\n  return (\n    <div\n      className={clsx(\n        \"w-full h-28 flex justify-between items-center pt-14\",\n        \"md:h-[70px] md:pt-0\",\n        className,\n      )}\n    >\n      <Logo />\n      <div className={clsx(\"hidden\", \"md:flex md:space-x-5 md:h-10\")}>\n        <SendReceiveButton />\n        <div className={clsx(\"relative\")} ref={popupRef} id=\"profile\">\n          <img\n            className={clsx(\"cursor-pointer w-10\")}\n            src={User}\n            alt=\"profile icon\"\n            onClick={() => setIsPopupVisible(!isPopupVisible)}\n          />\n          {isPopupVisible && (\n            <AuthenticatedPopup\n              onSignOut={logout}\n              anchor={profile?.anchor ?? 0}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"md:hidden\">\n        <ButtonMenu\n          buttonElement={\n            <img\n              id=\"mobile-menu\"\n              src={MenuIcon}\n              alt=\"menu\"\n              className={clsx(\"transform rotate-180\", \"md:hidden\")}\n            />\n          }\n        >\n          {(toggleMenu) => (\n            <div\n              className={clsx(\n                \"pl-2 pt-20 font-bold bg-white rounded w-[70vw] z-50\",\n              )}\n            >\n              <Accordion\n                isBorder={false}\n                style={{ padding: 0 }}\n                detailsClassName=\"pb-0\"\n                title={\n                  <div\n                    className=\"h-[60px] items-center flex p-2.5\"\n                    id=\"profile-mobile\"\n                  >\n                    <div\n                      className=\"flex items-center justify-center w-10 h-10 rounded-full bg-blue-base shrink-0\"\n                      onClick={toggleMenu}\n                    >\n                      <img src={User} alt=\"user\" className=\"cursor-pointer\" />\n                    </div>\n                    <p className=\"text-sm text-gray-700 px-2.5 w-full\">\n                      {profile?.name ?? profile?.anchor ?? \"\"}\n                    </p>\n                  </div>\n                }\n                details={\n                  <div\n                    className=\"text-sm font-light text-black pl-[60px]\"\n                    id=\"profile-mobile-details\"\n                  >\n                    <div\n                      className=\"flex items-center h-10\"\n                      onClick={() => navigate(`/faq`)}\n                    >\n                      Help\n                    </div>\n                    <div className=\"flex items-center h-10\" onClick={logout}>\n                      Log out\n                    </div>\n                  </div>\n                }\n              />\n              <ProfileSidebar id=\"mobile\" className=\"mt-5\" />\n            </div>\n          )}\n        </ButtonMenu>\n        <SendReceiveButton />\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileHeader\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { ArrowButton, Tooltip } from \"@nfid-frontend/ui\"\n\nimport { TransferModalCoordinator } from \"frontend/features/transfer-modal/coordinator\"\nimport { Loader } from \"frontend/ui/atoms/loader\"\nimport ProfileHeader from \"frontend/ui/organisms/profile-header\"\nimport ProfileSidebar from \"frontend/ui/organisms/profile-sidebar\"\n\ninterface IProfileTemplate extends React.HTMLAttributes<HTMLDivElement> {\n  pageTitle?: string\n  icon?: string\n  showBackButton?: boolean\n  onIconClick?: () => void\n  headerClassName?: string\n  containerClassName?: string\n  isLoading?: boolean\n  headerMenu?: React.ReactNode\n  iconTooltip?: string\n  iconId?: string\n  className?: string\n}\n\nconst ProfileTemplate: React.FC<IProfileTemplate> = ({\n  pageTitle,\n  icon,\n  showBackButton,\n  onIconClick,\n  children,\n  className,\n  headerClassName,\n  containerClassName,\n  isLoading = false,\n  headerMenu,\n  iconTooltip,\n  iconId,\n}) => {\n  const handleNavigateBack = React.useCallback(() => {\n    window.history.back()\n  }, [])\n\n  return (\n    <div className={clsx(\"relative min-h-screen overflow-hidden\", className)}>\n      <ProfileHeader className={clsx(\"px-4 sm:px-[30px]\", headerClassName)} />\n      <TransferModalCoordinator />\n      <div\n        className={clsx(\n          \"h-[calc(100vh-70px)] relative z-1 px-4\",\n          \"sm:gap-[30px] sm:px-[30px]\",\n          \"md:grid md:grid-cols-[50px,1fr]\",\n          \"lg:grid-cols-[256px,1fr]\",\n          \"overflow-auto\",\n          containerClassName,\n        )}\n      >\n        <div className={clsx(\"hidden mt-5 -ml-3 md:block relative\")}>\n          <ProfileSidebar id=\"desktop\" />\n        </div>\n        <section className={clsx(\"relative\", className)}>\n          <div className=\"flex justify-between h-[70px] items-start mt-5\">\n            <div className=\"sticky left-0 flex items-center space-x-2\">\n              {showBackButton && <ArrowButton onClick={handleNavigateBack} />}\n              <p className=\"text-[28px] block\" id={\"page_title\"}>\n                {pageTitle}\n              </p>\n            </div>\n\n            {icon && onIconClick && (\n              <Tooltip tip={iconTooltip}>\n                <img\n                  id={iconId}\n                  src={icon}\n                  alt=\"icon\"\n                  onClick={onIconClick}\n                  className=\"w-6 h-6 transition-all cursor-pointer hover:opacity-70\"\n                />\n              </Tooltip>\n            )}\n            {headerMenu}\n          </div>\n          {children}\n        </section>\n      </div>\n      <Loader isLoading={isLoading} />\n    </div>\n  )\n}\n\nexport default ProfileTemplate\n","/**\n * sort alphabetically\n *\n * @param accessor - extract the value to sort by\n */\nexport const sortAlphabetic =\n  <T>(accessor: (item: T) => string) =>\n  (a: T, b: T) =>\n    accessor(a).localeCompare(accessor(b), \"en\", { sensitivity: \"base\" })\n\n/**\n * keep the order of predefined static items\n *\n * @param accessor - extract the value to sort by\n * @param staticOrder - the order of the items that should be kept static\n */\nexport const keepStaticOrder =\n  <T>(accessor: (item: T) => string, staticOrder: string[]) =>\n  (items: T[]) => {\n    const start = staticOrder\n      .map((comparator) =>\n        items.find((item) => accessor(item).includes(comparator)),\n      )\n      .filter((item: T | undefined): item is T => Boolean(item))\n    return [\n      ...start,\n      ...items.filter(\n        (item) => !start.find((i) => accessor(i) === accessor(item)),\n      ),\n    ]\n  }\n","import fetch from \"node-fetch\"\n\nimport { integrationCache } from \"../../cache\"\nimport {\n  BlockCypherAddressFullResponse,\n  BlockCypherAddressResponse,\n  BlockCypherTx,\n} from \"./types\"\n\nconst tokenBTC = BLOCK_CYPHER_TOKEN\n\nconst mainnet = \"https://api.blockcypher.com/v1/btc/main\"\nconst testnet = \"https://api.blockcypher.com/v1/btc/test3\"\n\nexport async function bcPushTransaction(signedTx: string) {\n  return fetch(`${getUrl()}/txs/push`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ tx: signedTx }),\n  }).then(async (response) => {\n    return await response.json()\n  })\n}\n\nexport async function bcTransactionInfo(\n  address: string,\n): Promise<BlockCypherAddressFullResponse> {\n  const cachedNftConfig = (await integrationCache.getItem(\n    \"bcTransactionInfo\",\n  )) as BlockCypherAddressFullResponse\n  if (cachedNftConfig) {\n    return cachedNftConfig\n  }\n  const url = `${getUrl()}/addrs/${address}/full?token=${tokenBTC}`\n  const response = await fetch(url)\n  const result = await response.json()\n  await integrationCache.setItem(\"bcTransactionInfo\", result, {\n    ttl: 120,\n  })\n  return result\n}\n\nexport async function bcAddressInfo(\n  address: string,\n): Promise<BlockCypherAddressResponse> {\n  const cachedNftConfig = (await integrationCache.getItem(\n    \"bcAddressInfo\",\n  )) as BlockCypherAddressResponse\n  if (cachedNftConfig) {\n    return cachedNftConfig\n  }\n  const url = `${getUrl()}/addrs/${address}?token=${tokenBTC}`\n  const response = await fetch(url)\n  const result = await response.json()\n  await integrationCache.setItem(\"bcAddressInfo\", result, {\n    ttl: 120,\n  })\n  return result\n}\n\nexport async function bcComputeFee(\n  address: string,\n  targetAddress: string,\n  transactionValue: number,\n) {\n  return bcComputeTransaction(address, targetAddress, transactionValue).then(\n    (l) => l.tx.fees,\n  )\n}\n\nexport async function bcComputeTransaction(\n  address: string,\n  targetAddress: string,\n  transactionValue: number,\n): Promise<BlockCypherTx> {\n  const cacheKey = \"bcComputeTransaction\" + targetAddress + transactionValue\n  const cachedNftConfig = await integrationCache.getItem(cacheKey)\n  if (cachedNftConfig) {\n    return cachedNftConfig as BlockCypherTx\n  }\n  const url = `${getUrl()}/txs/new?includeToSignTx=true?token=${tokenBTC}`\n  const data = {\n    inputs: [\n      {\n        addresses: [address],\n      },\n    ],\n    outputs: [\n      {\n        addresses: [targetAddress],\n        value: transactionValue,\n      },\n    ],\n  }\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  })\n  const result = await response.json()\n  await integrationCache.setItem(cacheKey, result, {\n    ttl: 120,\n  })\n  return result\n}\n\nfunction getUrl(): string {\n  let rootUrl\n  if (\"mainnet\" == CHAIN_NETWORK) {\n    rootUrl = mainnet\n  } else {\n    rootUrl = testnet\n  }\n  return rootUrl\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { toBn } from \"@rarible/utils\"\nimport BigNumber from \"bignumber.js\"\nimport { format } from \"date-fns\"\n\nimport { E8S } from \"@nfid/integration/token/icp\"\n\nimport { Asset } from \"../asset/asset\"\nimport { getPrice } from \"../asset/asset-util\"\nimport {\n  Activity,\n  ChainBalance,\n  FungibleActivityRecord,\n  FungibleActivityRecords,\n  FungibleActivityRequest,\n  FungibleTransactionRequest,\n  FungibleTxs,\n  Token,\n  TokenBalanceSheet,\n  TokenPrice,\n  TransactionRow,\n} from \"../asset/types\"\nimport { bcAddressInfo, bcTransactionInfo } from \"./blockcypher-adapter\"\nimport { BtcWallet } from \"./btc-wallet\"\nimport {\n  BlockCypherAddressResponse,\n  BlockCypherTransactionOutput,\n} from \"./types\"\n\nexport class BtcAsset extends Asset<string> {\n  override getTransactionHistory(\n    identity: DelegationIdentity,\n    contract?: string | undefined,\n  ): Promise<FungibleTxs> {\n    throw new Error(\"Method not implemented.\")\n  }\n  getAddress(identity: DelegationIdentity): Promise<string> {\n    return new BtcWallet(identity).getBitcoinAddress()\n  }\n\n  getBalance(\n    address: string | undefined,\n    delegation: DelegationIdentity | undefined,\n  ): Promise<ChainBalance> {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  getBlockchain(): string {\n    return \"Bitcoin\"\n  }\n\n  async transfer(\n    identity: DelegationIdentity,\n    request: FungibleTransactionRequest,\n  ): Promise<string> {\n    try {\n      const satoshi = BigNumber(request.amount).multipliedBy(E8S).toNumber()\n      const response = await new BtcWallet(identity).sendSatoshi(\n        request.to,\n        satoshi,\n      )\n      return response.tx.hash\n    } catch (e: any) {\n      throw new Error(\n        e?.message ??\n          \"Unexpected error: The BTC transaction has been cancelled\",\n      )\n    }\n  }\n\n  async getRootAccount(\n    delegation?: DelegationIdentity,\n    logo?: string,\n  ): Promise<TokenBalanceSheet> {\n    if (!delegation) {\n      throw Error(\"Give me delegation. It's cached!\")\n    }\n    const wallet = new BtcWallet(delegation)\n    const address: string = await wallet.getBitcoinAddress()\n    const json: BlockCypherAddressResponse = await bcAddressInfo(address)\n    const balance = json.final_balance\n    let price: TokenPrice[]\n    const balanceBN = toBn(balance / E8S)\n    try {\n      price = await getPrice([\"BTC\"])\n    } catch (e) {\n      price = [{ price: \"0.0\", token: \"BTC\" }]\n    }\n    const balanceinUsd = toBn(price[0].price).multipliedBy(balanceBN)\n    const token: Token = {\n      address: address,\n      balance: balanceBN.toString(),\n      balanceinUsd: \"$\" + (balanceinUsd?.toFixed(2) ?? \"0.00\"),\n      logo,\n      name: this.getBlockchain(),\n      symbol: \"BTC\",\n    }\n\n    return super.computeSheetForRootAccount(\n      token,\n      delegation.getPrincipal().toText(),\n      logo,\n      \"0\",\n    )\n  }\n\n  async getActivityByUser(identity: DelegationIdentity): Promise<Activity[]> {\n    const address = await new BtcWallet(identity).getBitcoinAddress()\n    const txs = await this.getTransactions(address)\n\n    return txs.map((tx) => ({\n      id: \"\",\n      date: new Date(tx.date),\n      from: tx.from,\n      to: tx.to,\n      transactionHash: \"\",\n      action: tx.type,\n      asset: {\n        type: \"ft\", // Assuming all transactions are \"ft\". You can modify this based on the requirement.\n        currency: tx.asset,\n        amount: tx.quantity,\n      },\n    }))\n  }\n\n  private async getTransactions(address: string): Promise<TransactionRow[]> {\n    try {\n      const data = await bcTransactionInfo(address)\n\n      const allTransactions = data.txs ? data.txs : []\n      const sentTransactions: TransactionRow[] = []\n      const receivedTransactions: TransactionRow[] = []\n      for (let i = 0; i < allTransactions.length; i++) {\n        const transaction = allTransactions[i]\n        //check input or output transaction\n        const isInput = transaction.inputs.some((l) => {\n          return l.addresses && l.addresses.includes(address)\n        })\n        if (isInput) {\n          const output: BlockCypherTransactionOutput[] =\n            transaction.outputs.filter((l) => {\n              return !l.addresses.includes(address)\n            })\n          if (output.length !== 0) {\n            const row: TransactionRow = {\n              type: \"Sent\",\n              asset: \"BTC\",\n              quantity: this.formatPrice(output[0].value),\n              date: transaction.confirmed.toString(),\n              from: address,\n              to: output[0].addresses.join(\", \"),\n            }\n            sentTransactions.push(row)\n          }\n        } else {\n          const output: BlockCypherTransactionOutput[] =\n            transaction.outputs.filter((l) => {\n              return l.addresses.includes(address)\n            })\n          if (output.length === 0) break\n          const row: TransactionRow = {\n            type: \"Received\",\n            asset: \"BTC\",\n            quantity: this.formatPrice(output[0].value),\n            date: transaction.confirmed.toString(),\n            from: transaction.inputs[0].addresses.join(\", \"),\n            to: output[0].addresses.join(\", \"),\n          }\n          receivedTransactions.push(row)\n        }\n      }\n\n      return sentTransactions.concat(receivedTransactions)\n    } catch (error) {\n      console.error(\"Error retrieving BTC transactions:\", error)\n      return []\n    }\n  }\n\n  protected formatDateInt(date: number): string {\n    return format(new Date(date), \"MMM dd, yyyy - hh:mm:ss aaa\")\n  }\n\n  protected override formatPrice(price: number) {\n    return parseFloat((price / E8S).toFixed(8))\n  }\n\n  async getFungibleActivityByTokenAndUser(\n    request: FungibleActivityRequest,\n    delegation?: DelegationIdentity,\n  ): Promise<FungibleActivityRecords> {\n    throw Error(\"Not implemented.\")\n  }\n}\n\nexport const btcAsset = new BtcAsset()\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { networks, payments, TransactionBuilder } from \"bitcoinjs-lib\"\nimport { Cache } from \"node-ts-cache\"\n\nimport { integrationCache } from \"../../cache\"\nimport { Chain, ecdsaSign, getPublicKey } from \"../lambda/ecdsa\"\nimport {\n  bcComputeFee,\n  bcComputeTransaction,\n  bcPushTransaction,\n} from \"./blockcypher-adapter\"\nimport { BlockCypherTx } from \"./types\"\n\nexport class BtcWallet {\n  private readonly walletIdentity: DelegationIdentity\n  private readonly isMainNet: boolean\n\n  constructor(identity: DelegationIdentity, isMainNet?: boolean) {\n    this.walletIdentity = identity\n    if (typeof isMainNet === \"undefined\") {\n      this.isMainNet = \"mainnet\" == CHAIN_NETWORK\n    } else {\n      this.isMainNet = isMainNet\n    }\n  }\n\n  @Cache(integrationCache, { ttl: 3600 })\n  async getBitcoinAddress(): Promise<string> {\n    const publicKey = await getPublicKey(this.walletIdentity, Chain.BTC)\n    const network =\n      \"mainnet\" == CHAIN_NETWORK ? networks.bitcoin : networks.testnet\n    const { address } = payments.p2pkh({\n      pubkey: Buffer.from(publicKey, \"hex\"),\n      network,\n    })\n    if (!address) {\n      throw new Error(`getBitcoinAddress: not able to calculate`)\n    }\n    return address\n  }\n\n  async sendSatoshi(\n    targetAddress: string,\n    satoshi: number,\n  ): Promise<BlockCypherTx> {\n    const source = await this.getBitcoinAddress()\n    const tx = await this.computeTransactionHex(source, satoshi, targetAddress)\n    let signedTx\n    try {\n      signedTx = await ecdsaSign(tx, this.walletIdentity, Chain.BTC)\n    } catch (e: any) {\n      throw new Error(\"sendSatoshi: \" + e.message)\n    }\n    return bcPushTransaction(signedTx)\n  }\n\n  async getFee(target: string, value: number): Promise<number> {\n    const source = await this.getBitcoinAddress()\n    return await bcComputeFee(source, target, value)\n  }\n\n  async computeTransactionHex(\n    address: string,\n    transactionValue: number,\n    targetAddress: string,\n  ) {\n    const result: BlockCypherTx = await bcComputeTransaction(\n      address,\n      targetAddress,\n      transactionValue,\n    )\n    const network =\n      \"mainnet\" == CHAIN_NETWORK ? networks.bitcoin : networks.testnet\n    const txb = new TransactionBuilder(network)\n    result.tx.inputs.forEach((input: any) => {\n      txb.addInput(input.prev_hash, input.output_index)\n    })\n    result.tx.outputs.forEach((output: any) => {\n      txb.addOutput(output.addresses[0], output.value)\n    })\n    const builtTx = txb.buildIncomplete()\n    return builtTx.toHex()\n  }\n}\n","import { HttpAgent, SignIdentity } from \"@dfinity/agent\"\n\nimport { DIP20, DIP20IDLFactory } from \".\"\nimport { actor, agentBaseConfig } from \"../../actors\"\n\nexport const makeDip20Actor = (canisterId: string, identity?: SignIdentity) =>\n  actor<DIP20>(\n    canisterId,\n    DIP20IDLFactory,\n    identity\n      ? { agent: new HttpAgent({ ...agentBaseConfig, identity }) }\n      : undefined,\n  )\n","import { makeDip20Actor } from \"./actor\"\nimport { Metadata } from \"./dip-20.d\"\n\nexport interface TokenMetadata extends Metadata {\n  canisterId: string\n}\n\nexport async function getMetadata(canisterId: string): Promise<TokenMetadata> {\n  const dip20 = makeDip20Actor(canisterId)\n  return dip20\n    .getMetadata()\n    .then((metadata) => ({\n      canisterId,\n      ...metadata,\n    }))\n    .catch((e) => {\n      throw new Error(`getMetadata: ${e.message}`)\n    })\n}\n","import { TOKEN_CANISTER } from \"./constants\"\nimport { getMetadata, TokenMetadata } from \"./get-metadata\"\n\nconst mapToToken = ({ decimals, ...rest }: TokenMetadata) => ({\n  decimals,\n  toPresentation: (value = BigInt(0)) => {\n    return Number(value) / Number(BigInt(10 ** decimals))\n  },\n  transformAmount: (value: string) =>\n    Number(parseFloat(value) * 10 ** decimals),\n  ...rest,\n})\n\nexport async function getAllToken() {\n  return await Promise.all(TOKEN_CANISTER.map(getMetadata)).then((token) =>\n    token.map(mapToToken),\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\n\nimport { makeDip20Actor } from \"./actor\"\n\ninterface GetBalanceParams {\n  canisterId: string\n  principalId: string\n}\n\nexport const getDIP20Balance = async ({\n  canisterId,\n  principalId,\n}: GetBalanceParams) => {\n  const dip20 = makeDip20Actor(canisterId)\n  return dip20.balanceOf(Principal.fromText(principalId)).catch((e) => {\n    throw new Error(`getBalance: ${e.message}`)\n  })\n}\n","import { SignIdentity } from \"@dfinity/agent\"\nimport { Principal } from \"@dfinity/principal\"\n\nimport { makeDip20Actor } from \"./actor\"\n\ntype TransferArgs = {\n  canisterId: string\n  to: string\n  amount: number\n  sourceIdentity: SignIdentity\n}\n\nexport async function transfer({\n  canisterId,\n  to,\n  amount,\n  sourceIdentity,\n}: TransferArgs) {\n  console.debug(\"transfer\", { canisterId, to, amount })\n  const dip20Actor = makeDip20Actor(canisterId, sourceIdentity)\n  const response = await dip20Actor\n    .transfer(Principal.fromText(to), BigInt(amount))\n    .catch((e) => {\n      throw Error(`transfer failed: ${e}`)\n    })\n\n  if (\"Err\" in response) {\n    if (\"Other\" in response.Err) {\n      throw Error(response.Err.Other)\n    }\n    throw Error(Object.keys(response.Err)[0])\n  }\n\n  console.debug(\"transfer\", { response })\n  return response.Ok\n}\n","export const idlFactory = ({ IDL }: any) => {\n  const TxError = IDL.Variant({\n    InsufficientAllowance: IDL.Null,\n    InsufficientBalance: IDL.Null,\n    ErrorOperationStyle: IDL.Null,\n    Unauthorized: IDL.Null,\n    LedgerTrap: IDL.Null,\n    ErrorTo: IDL.Null,\n    Other: IDL.Text,\n    BlockUsed: IDL.Null,\n    AmountTooSmall: IDL.Null,\n  })\n  const Result = IDL.Variant({ Ok: IDL.Nat, Err: TxError })\n  const Metadata = IDL.Record({\n    fee: IDL.Nat,\n    decimals: IDL.Nat8,\n    owner: IDL.Principal,\n    logo: IDL.Text,\n    name: IDL.Text,\n    totalSupply: IDL.Nat,\n    symbol: IDL.Text,\n  })\n  const TokenInfo = IDL.Record({\n    holderNumber: IDL.Nat64,\n    deployTime: IDL.Nat64,\n    metadata: Metadata,\n    historySize: IDL.Nat64,\n    cycles: IDL.Nat64,\n    feeTo: IDL.Principal,\n  })\n  return IDL.Service({\n    allowance: IDL.Func([IDL.Principal, IDL.Principal], [IDL.Nat], [\"query\"]),\n    approve: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n    balanceOf: IDL.Func([IDL.Principal], [IDL.Nat], [\"query\"]),\n    burn: IDL.Func([IDL.Nat], [Result], []),\n    decimals: IDL.Func([], [IDL.Nat8], [\"query\"]),\n    getAllowanceSize: IDL.Func([], [IDL.Nat64], [\"query\"]),\n    getHolders: IDL.Func(\n      [IDL.Nat64, IDL.Nat64],\n      [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n      [\"query\"],\n    ),\n    getMetadata: IDL.Func([], [Metadata], [\"query\"]),\n    getTokenInfo: IDL.Func([], [TokenInfo], [\"query\"]),\n    getUserApprovals: IDL.Func(\n      [IDL.Principal],\n      [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n      [\"query\"],\n    ),\n    historySize: IDL.Func([], [IDL.Nat64], [\"query\"]),\n    logo: IDL.Func([], [IDL.Text], [\"query\"]),\n    mint: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n    name: IDL.Func([], [IDL.Text], [\"query\"]),\n    owner: IDL.Func([], [IDL.Principal], [\"query\"]),\n    setFee: IDL.Func([IDL.Nat], [], []),\n    setFeeTo: IDL.Func([IDL.Principal], [], []),\n    setLogo: IDL.Func([IDL.Text], [], []),\n    setName: IDL.Func([IDL.Text], [], []),\n    setOwner: IDL.Func([IDL.Principal], [], []),\n    symbol: IDL.Func([], [IDL.Text], [\"query\"]),\n    totalSupply: IDL.Func([], [IDL.Nat], [\"query\"]),\n    transfer: IDL.Func([IDL.Principal, IDL.Nat], [Result], []),\n    transferFrom: IDL.Func(\n      [IDL.Principal, IDL.Principal, IDL.Nat],\n      [Result],\n      [],\n    ),\n  })\n}\nexport const init = ({ IDL }: any) => {\n  return [\n    IDL.Text,\n    IDL.Text,\n    IDL.Text,\n    IDL.Nat8,\n    IDL.Nat,\n    IDL.Principal,\n    IDL.Nat,\n    IDL.Principal,\n    IDL.Principal,\n  ]\n}\n","interface Validation {\n  min?: number\n  max?: number\n  toLowError?: string\n  toBigError?: string\n}\nexport const minMax =\n  ({\n    min,\n    max,\n    toLowError = \"value is too small\",\n    toBigError = \"value is too big\",\n  }: Validation) =>\n  (value: number) => {\n    if (min !== undefined && Number(value) < min) return toLowError\n    if (max !== undefined && Number(value) > max) return toBigError\n    return true\n  }\n\nexport const isHex = (h: string) => {\n  const re = /[0-9A-Fa-f]{6}/g\n  return re.test(h)\n}\n"],"names":["async","fetchBalances","principals","dip20Token","Promise","all","map","principal","account","token","getICPBalance","principalToAddress","symbol","canisterId","getDIP20Balance","principalId","toText","balance","reduce","acc","cur","fetchVaultsWalletsBalances","wallets","Principal","VAULT_CANISTER_ID","address","fromHexString","wallet","uid","domain","label","name","accountId","ICP","vaultId","vaultName","fetchVaultWalletsBalances","getWalletDelegationAdapter","targetCanisters","profile","fetchProfile","RootWallet","getWalletDelegation","anchor","getGlobalKeys","authState","delegationIdentity","Chain","accessList","API","collectionsCache","fetchCollection","collection","fetch","then","r","json","agg","x","id","fetchCollections","Error","entrepotAsset","fullSize","index","decodeTokenIdentifier","tokenId","icpbunnyimg","Date","now","assetPreview","assetFullsize","url","_format","detailpage","getEntrepotDisplayFormat","format","getDisplayFormat","getImageDetailsUrl","getVideoDetailsUrl","response","blob","result","text","replace","match","regExp","simplifiedText","includes","fetchNFTsOfPrincipals","inputData","_token","_collection","entrepotNFT","e","console","log","filter","nft","mapToNFTData","flat","blockchain","Blockchain","tokens","encodeTokenIdentifier","find","link","canister","getTokenLink","principalTokens","userNumber","hostName","personaId","scope","WALLET_SCOPE","getScope","delegationState","BigInt","getLocalStorageOverride","WALLET_SESSION_TTL_2_MIN_IN_NS","CenterEllipsis","React","ref","value","leadingChars","trailingChars","divProps","splitAt","length","className","clsx","slice","connectorCache","CacheContainer","MemoryStorage","resetCachesByKey","keys","callback","key","setItem","undefined","ToggleButton","firstValue","secondValue","onChange","defaultValue","setValue","useState","useEffect","onClick","TransferModalType","TransferModalConnector","Cache","ttl","constructor","config","this","getTokenConfig","currency","getTokenCurrencies","resolve","tokenStandard","getNetworkOption","title","icon","getTokensOptions","options","subTitle","getTokenStandard","shouldHavePrincipal","groupedById","getProfile","accounts","getAccounts","fetchPrincipals","groupedAccounts","push","extendWithFixedAccounts","fetchAccounts","getApplications","app","isNftStorage","applicationToAccount","a","fetchApplications","getPrice","t","price","makeRootAccountGroupedOptions","usdBalance","badgeText","truncateString","innerTitle","innerSubtitle","btcTransferConnector","getIdentity","reject","identity","BtcAsset","getAddress","tokenSheet","getRootAccount","e8sICPToString","Number","tokenBalance","balanceinUsd","getBalance","toString","validateAddress","to","amount","fee","BtcWallet","getFee","toBn","multipliedBy","E8S","toNumber","rate","feeCurrency","feeUsd","String","request","transfer","errorMessage","message","IconSvgBTC","TokenStandards","NativeToken","addressPlaceholder","type","FT","isNativeToken","duration","EVMTransferConnector","cacheKey","transaction","assetService","verifyPromise","waitOnChain","etherscanTransactionUrl","startsWith","ethereumERC20TransferConnector","getTokens","_","ethereumAsset","logo","contract","Erc20EstimateTransactionRequest","estimatedTransaction","IconERC20","FT20","ethereumTransferConnector","EthTransferRequest","IconPngEthereum","ethereumGoerliERC20TransferConnector","ethereumGoerliAsset","ethereumGoerliTransferConnector","mapUserNFTDetailsToGroupedOptions","userNFTDetailsArray","applications","groupedByWallet","current","walletName","getWalletName","Object","entries","userNFTDetails","toUserNFT","defaultLogo","image","thumbnail","MaticSvg","imageType","blockchainLogo","description","contractName","standard","tokenType","clipboardText","contractId","owner","ethereumGoerliNFTTransferConnector","items","getPrincipal","nfts","getNFTs","NftErc721EstimateTransactionRequest","NftErc1155EstimateTransactionRequest","NFT","ethereumNFTTransferConnector","validateTransferAmountField","extIDL","IDL","SubAccount","Vec","Nat8","AccountIdentifier","Text","TokenIdentifier","User","Variant","Balance","Nat","Memo","MemoExt","Nat64","TransferRequest","Record","notify","Bool","from","memo","subaccount","Opt","Result","ok","err","CannotNotify","InsufficientBalance","Null","InvalidToken","Rejected","Unauthorized","Other","CommonError","LockResult","ListRequest","from_subaccount","ICPTs","e8s","TimeStamp","timestamp_nanos","BlockHeight","SendArgs","created_at_time","Result_3","Service","Func","lock","list","send_dfx","settle","constructUser","u","isHex","formatError","values","ICMTransferConnector","isVault","isRootOnly","replaceActorIdentity","vault","getExchangeRate","allVaults","getVaults","allVaultWallets","v","getWallets","w","vaultWallets","vaults","toUSD","getAllPrincipals","groupedOptions","keepStaticOrder","sort","sortAlphabetic","addressVerified","toFixed","source","target","actor","initActor","catch","transferEXT","submitICP","stringICPtoE8s","dip20TransferConnector","getTokenMetadata","TOKEN_CANISTER","getMetadata","tokenMetadata","IconSvgDfinity","icTransferConnector","neededAccount","WALLET_FEE","icNFTTransferConnector","allPrincipals","allNFTs","polygonERC20TransferConnector","polygonAsset","PolygonERC20Svg","polygonMumbaiERC20TransferConnector","polygonMumbaiAsset","polygonMumbaiNFTTransferConnector","polygonMumbaiTransferConnector","polygonNFTTransferConnector","toMap","assetViews","assetViewMap","Map","forEach","assetView","set","singleFTConnectors","multiFTConnectors","NFTConnectors","allConnectors","ftMappedConnectors","nftMappedConnectors","getConnector","mappedConnectors","allConfigs","c","currencies","error","neededConfig","get","getAllTokensOptions","ftConnectors","mergedTokens","item","concat","concatOptionsWithSameLabel","o","getAllNFTOptions","getNFTOptions","getAllNFT","useNetworkOptions","supportedNetworks","getNativeTokenStandards","data","networkOptions","rest","useSWR","ReceiveModal","onBack","alt","src","ReceiveModalImage","TransferReceive","preselectedTokenStandard","preselectedAccountAddress","preselectedTokenBlockchain","isModalOpen","setIsModalOpen","selectedTokenStandard","setSelectedTokenStandard","selectedTokenBlockchain","setSelectedTokenBlockchain","selectedAccountAddress","setSelectedAccountAddress","useProfile","accountsOptions","isValidating","isAccountsValidating","isVaultWallets","getAccountsOptions","useAccountsOptions","selectedConnector","isLoading","isConnectorLoading","isPrincipalVisible","useMemo","sendReceiveTracking","isSending","optionGroups","iconClassnames","preselectedValue","onSelect","split","isSmooth","width","margin","content","Spinner","xmlns","fill","viewBox","cx","cy","stroke","strokeWidth","d","TransferFT","preselectedTokenCurrency","preselectedTransferDestination","onTransferPromise","selectedTokenCurrency","setSelectedTokenCurrency","isLoadingProfile","debug","onSuccess","refetchBalance","isMetadataLoading","isAccountsLoading","connector","resetField","mutate","isBalanceFetching","isBalanceLoading","refreshInterval","tokenOptions","isTokensLoading","register","formState","errors","handleSubmit","setError","getValues","useForm","mode","defaultValues","transferFee","calculateFee","isFeeLoading","contractAddress","getRate","handleTrackTransfer","useCallback","network","destinationType","tokenName","submit","assetImg","initialPromise","walletAddress","getVaultWalletByAddress","registerTransaction","from_sub_account","isAssetPadding","res","toast","loadingMessage","overlayClassnames","placeholder","min","required","sumRules","validate","valueAsNumber","onBlur","arrayValue","onOpen","trigger","warningText","isFirstPreselected","errorText","registerFunction","block","TransferNFT","selectedReceiverWallet","preselectedNFTId","selectedNFTId","setSelectedNFTId","refetchNFTs","nftOptions","isNFTLoading","selectedNFT","chain","isFeeValidating","allAnimations","Fail","Success","onClose","step","animation","isCompleted","isFailed","H5","animationData","loop","bottom","window","open","TransferSuccess","currentState","setCurrentState","toastId","setTimeout","onError","revalidateOnFocus","transferTabs","TransferTemplate","children","onClickOutside","style","stopPropagation","TransferModalCoordinator","globalServices","useContext","ProfileContext","state","send","useActor","transferService","context","Component","matches","isOpenedFromVaults","tokenCurrency","sourceWalletAddress","tokenBlockchain","receiverWallet","transferObject","onModalTypeChange","onTokenTypeChange","isNFT","tabs","direction","onValueChange","isFitLine","SendReceiveButton","handleOpenSendReceive","SendReceiveIcon","LogoText","height","fillRule","clipRule","x1","y1","x2","y2","gradientUnits","stopColor","offset","Logo","nav","href","isActive","mask","WebkitMask","profileSidebarItems","location","pathname","isPopupVisible","setIsPopupVisible","popupRef","useClickOutside","logout","useAuthentication","navigate","useNavigate","onSignOut","buttonElement","MenuIcon","toggleMenu","isBorder","padding","detailsClassName","details","pageTitle","showBackButton","onIconClick","headerClassName","containerClassName","headerMenu","iconTooltip","iconId","handleNavigateBack","history","back","tip","accessor","b","localeCompare","sensitivity","staticOrder","start","comparator","Boolean","i","tokenBTC","BLOCK_CYPHER_TOKEN","bcPushTransaction","signedTx","getUrl","method","headers","body","JSON","stringify","tx","bcTransactionInfo","cachedNftConfig","integrationCache","bcAddressInfo","bcComputeFee","targetAddress","transactionValue","bcComputeTransaction","l","fees","inputs","addresses","outputs","rootUrl","CHAIN_NETWORK","Asset","getTransactionHistory","getBitcoinAddress","delegation","getBlockchain","satoshi","BigNumber","sendSatoshi","hash","final_balance","balanceBN","super","computeSheetForRootAccount","getTransactions","date","transactionHash","action","asset","quantity","allTransactions","txs","sentTransactions","receivedTransactions","some","output","row","formatPrice","confirmed","join","formatDateInt","parseFloat","btcAsset","isMainNet","walletIdentity","publicKey","getPublicKey","networks","payments","pubkey","Buffer","computeTransactionHex","ecdsaSign","txb","TransactionBuilder","input","addInput","prev_hash","output_index","addOutput","buildIncomplete","toHex","makeDip20Actor","DIP20IDLFactory","agent","HttpAgent","agentBaseConfig","metadata","mapToToken","decimals","toPresentation","transformAmount","getAllToken","balanceOf","sourceIdentity","dip20Actor","Err","Ok","idlFactory","TxError","InsufficientAllowance","ErrorOperationStyle","LedgerTrap","ErrorTo","BlockUsed","AmountTooSmall","Metadata","totalSupply","TokenInfo","holderNumber","deployTime","historySize","cycles","feeTo","allowance","approve","burn","getAllowanceSize","getHolders","Tuple","getTokenInfo","getUserApprovals","mint","setFee","setFeeTo","setLogo","setName","setOwner","transferFrom","minMax","max","toLowError","toBigError","h","test"],"sourceRoot":""}