{"version":3,"file":"static/js/732.95f2db17.chunk.js","mappings":"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","sources":["ui/connnector/fungible-asset-details/fungible-asset-detail.ts","ui/connnector/fungible-asset-details/btc/btc-asset-details.ts","ui/connnector/fungible-asset-details/eth/erc20-asset-details.ts","ui/connnector/fungible-asset-details/eth/eth-asset-details.ts","ui/connnector/fungible-asset-details/polygon/erc20-asset-details.ts","ui/connnector/fungible-asset-details/polygon/matic-asset-details.ts","ui/connnector/fungible-asset-details/fungible-asset-details-factory.tsx","ui/atoms/token-icon/index.tsx","ui/molecules/token-detail/index.tsx","ui/organisms/app-acc-balance-sheet/index.tsx","ui/pages/new-profile/internet-computer-wallets/index.tsx","apps/identity-manager/profile/internet-computer-wallets/index.tsx","ui/connnector/fungible-asset-details/hooks/use-account-config.ts","ui/atoms/application-icon/index.tsx","ui/atoms/table/index.tsx"],"sourcesContent":["import { DelegationIdentity } from \"@dfinity/identity\"\nimport { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { getWalletDelegation } from \"src/integration/facade/wallet\"\nimport { fetchProfile } from \"src/integration/identity-manager\"\nimport {\n  IFungibleAssetDetailsConnector,\n  TokenDetailsConfig,\n} from \"src/ui/connnector/types\"\n\nimport { loadProfileFromLocalStorage } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport abstract class FungibleAssetDetailsConnector\n  implements IFungibleAssetDetailsConnector\n{\n  protected config: TokenDetailsConfig\n\n  constructor(config: TokenDetailsConfig) {\n    this.config = config\n  }\n\n  abstract getAssetDetails(): Promise<Array<TokenBalanceSheet>>\n\n  getTokenStandard(): TokenStandards {\n    return this.config.tokenStandard\n  }\n\n  protected getIdentity = async (): Promise<DelegationIdentity> => {\n    const profile = loadProfileFromLocalStorage() ?? (await fetchProfile())\n    return await getWalletDelegation(profile.anchor, \"nfid.one\", \"0\")\n  }\n\n  getCacheTtl(): number {\n    return 30\n  }\n}\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { btcAsset } from \"packages/integration/src/lib/bitcoin-wallet/btc-asset\"\nimport { FungibleAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/fungible-asset-detail\"\n\nimport { IconSvgBTC } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class BtcAssetDetailsConnector extends FungibleAssetDetailsConnector {\n  async getAssetDetails(): Promise<Array<TokenBalanceSheet>> {\n    const principal = await this.getIdentity()\n    return btcAsset\n      .getRootAccount(principal, this.config.icon)\n      .then((token) => {\n        return [token]\n      })\n  }\n}\n\nexport const btcAssetDetailsConnector = new BtcAssetDetailsConnector({\n  tokenStandard: TokenStandards.BTC,\n  icon: IconSvgBTC,\n})\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { FungibleAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/fungible-asset-detail\"\n\nimport { IconERC20 } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class EthereumERC20AssetDetailsConnector extends FungibleAssetDetailsConnector {\n  async getAssetDetails(): Promise<Array<TokenBalanceSheet>> {\n    const principal = await this.getIdentity()\n    return ethereumAsset.getAccounts(principal, this.config.icon)\n  }\n}\n\nexport const ethereumERC20AssetDetailsConnector =\n  new EthereumERC20AssetDetailsConnector({\n    tokenStandard: TokenStandards.ERC20_ETHEREUM,\n    icon: IconERC20,\n  })\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { FungibleAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/fungible-asset-detail\"\n\nimport { IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class EthAssetDetailsConnector extends FungibleAssetDetailsConnector {\n  async getAssetDetails(): Promise<Array<TokenBalanceSheet>> {\n    const principal = await this.getIdentity()\n    return ethereumAsset\n      .getNativeAccount(principal, this.config.icon)\n      .then((l) => [l])\n  }\n}\n\nexport const ethAssetDetailsConnector = new EthAssetDetailsConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ETH,\n})\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { FungibleAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/fungible-asset-detail\"\n\nimport { PolygonERC20Svg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class PolygonERC20AssetDetailsConnector extends FungibleAssetDetailsConnector {\n  async getAssetDetails(): Promise<Array<TokenBalanceSheet>> {\n    const principal = await this.getIdentity()\n    return polygonAsset.getAccounts(principal, this.config.icon)\n  }\n}\n\nexport const polygonERC20AssetDetailsConnector =\n  new PolygonERC20AssetDetailsConnector({\n    tokenStandard: TokenStandards.ERC20_POLYGON,\n    icon: PolygonERC20Svg,\n  })\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { FungibleAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/fungible-asset-detail\"\n\nimport { MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class MaticAssetDetailsConnector extends FungibleAssetDetailsConnector {\n  async getAssetDetails(): Promise<Array<TokenBalanceSheet>> {\n    const principal = await this.getIdentity()\n    return polygonAsset\n      .getNativeAccount(principal, this.config.icon)\n      .then((l) => [l])\n  }\n}\n\nexport const maticAssetDetailsConnector = new MaticAssetDetailsConnector({\n  icon: MaticSvg,\n  tokenStandard: TokenStandards.MATIC,\n})\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { ConnectorFactory } from \"src/ui/connnector/connector-factory\"\nimport { btcAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/btc/btc-asset-details\"\nimport { ethereumERC20AssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/eth/erc20-asset-details\"\nimport { ethAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/eth/eth-asset-details\"\nimport { FungibleAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/fungible-asset-detail\"\nimport { polygonERC20AssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/polygon/erc20-asset-details\"\nimport { maticAssetDetailsConnector } from \"src/ui/connnector/fungible-asset-details/polygon/matic-asset-details\"\n\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class FungibleAssetDetailsFactory extends ConnectorFactory<\n  TokenStandards,\n  FungibleAssetDetailsConnector\n> {\n  getAssetDetails = async (\n    key: TokenStandards,\n  ): Promise<Array<TokenBalanceSheet>> => {\n    return this.process(key, [])\n  }\n\n  getCacheKey(key: TokenStandards, functionToCall: Function, args: []): string {\n    return functionToCall.name + key\n  }\n\n  getFunctionToCall(connector: FungibleAssetDetailsConnector): Function {\n    return connector.getAssetDetails\n  }\n}\n\nexport const fungibleAssetDetailsFactory = new FungibleAssetDetailsFactory([\n  btcAssetDetailsConnector,\n  maticAssetDetailsConnector,\n  polygonERC20AssetDetailsConnector,\n  ethAssetDetailsConnector,\n  ethereumERC20AssetDetailsConnector,\n])\n","import clsx from \"clsx\"\n\nimport { Image } from \"@nfid-frontend/ui\"\n\nexport const TokenIcon: React.FC<{ src: string; token: string }> = ({\n  src,\n  token,\n}) => {\n  return (\n    <Image\n      src={src}\n      alt={`token-icon-${token}`}\n      className={clsx(\"w-10 h-10\")}\n    />\n  )\n}\n","import clsx from \"clsx\"\n\nimport { Balance } from \"@nfid/integration\"\n\nimport { TokenIcon } from \"frontend/ui/atoms/token-icon\"\n\ninterface TokenDetailBalanceProps {\n  tokenConfig?: {\n    toPresentation: (balance?: bigint) => number\n  }\n  token: string\n  label: string\n  icon: string\n  tokenBalance?: Balance\n  usdBalance: string\n}\n\nexport const TokenDetailBalance: React.FC<TokenDetailBalanceProps> = ({\n  token,\n  label,\n  icon,\n  tokenBalance,\n  usdBalance,\n  tokenConfig,\n}) => {\n  return (\n    <div\n      className={clsx(\n        \"h-20 border border-gray-200 rounded-xl\",\n        \"px-6\",\n        \"flex items-center space-x-6\",\n      )}\n    >\n      <div>\n        <TokenIcon src={icon} token={token} />\n      </div>\n      <div className=\"flex-grow\">\n        <div className=\"text-sm font-semibold\" id={\"label\"}>\n          {label}\n        </div>\n        <div className=\"text-xs text-secondary\" id={\"token\"}>\n          {token}\n        </div>\n      </div>\n      <div className=\"text-sm font-semibold\" id={\"token_info\"}>\n        {tokenBalance && tokenConfig\n          ? tokenConfig.toPresentation(tokenBalance)\n          : 0}{\" \"}\n        {token}\n      </div>\n      <div className=\"text-sm font-semibold\">{usdBalance}</div>\n    </div>\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\nimport clsx from \"clsx\"\nimport { principalToAddress } from \"ictool\"\nimport {\n  AccountBalance,\n  AppBalance,\n} from \"packages/integration/src/lib/asset/types\"\nimport { ReactNode } from \"react\"\nimport React from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { toast } from \"react-toastify\"\n\nimport { Tooltip } from \"@nfid-frontend/ui\"\n\nimport { ProfileConstants } from \"frontend/apps/identity-manager/profile/routes\"\nimport { ApplicationIcon } from \"frontend/ui/atoms/application-icon\"\nimport { CenterEllipsis } from \"frontend/ui/atoms/center-ellipsis\"\nimport { TableBase, TableHead, TableWrapper } from \"frontend/ui/atoms/table\"\n\ninterface GridCellProps {\n  className?: string\n  children: ReactNode | ReactNode[]\n  id?: string\n}\n\nconst GridCell = React.forwardRef<HTMLTableCellElement, GridCellProps>(\n  ({ children, className, id, ...props }, ref) => (\n    <td\n      ref={ref}\n      className={clsx(\"relative px-3 h-14 hover:bg-gray-200\", className)}\n      {...props}\n      id={id}\n    >\n      {children}\n    </td>\n  ),\n)\n\nconst AppRow: React.FC<\n  Pick<AppBalance, \"accounts\" | \"appName\" | \"icon\"> & {\n    currency: string\n    blockchain: string\n    toPresentation?: (balance?: bigint) => number\n  }\n> = ({ appName, icon, accounts, currency, blockchain, toPresentation }) => {\n  const navigate = useNavigate()\n  const copyToClipboard = React.useCallback(\n    (type: string, value: string) => (e: React.SyntheticEvent) => {\n      e.preventDefault()\n      e.stopPropagation()\n      toast.info(`${type} copied to clipboard`, {\n        toastId: `copied_${type}_${value}`,\n      })\n      navigator.clipboard.writeText(value)\n    },\n    [],\n  )\n\n  const navigateToTransactions = React.useCallback(\n    (account: AccountBalance) => () => {\n      navigate(`${ProfileConstants.base}/${ProfileConstants.transactions}`, {\n        state: {\n          wallet: {\n            label: `${appName} ${account.accountName}`,\n            value: principalToAddress(Principal.fromText(account.principalId)),\n          },\n          blockchain,\n        },\n      })\n    },\n    [appName, navigate, blockchain],\n  )\n\n  return (\n    <tbody className={clsx(\"border-b border-grey-200 group\")}>\n      {accounts.map((account, i) => (\n        <tr\n          key={account.address}\n          className=\"pl-10 cursor-pointer hover:bg-gray-200\"\n          onClick={navigateToTransactions(account)}\n          id={`account_row_${i}`}\n        >\n          {i === 0 && (\n            <GridCell\n              // @ts-ignore FIXME: type doesn't exist\n              rowSpan={accounts.length}\n              className={clsx(\n                \"align-top whitespace-nowrap overflow-hidden text-ellipsis group-hover:bg-gray-200\",\n              )}\n              id={`app_name_${i}`}\n            >\n              <div\n                className=\"flex items-center\"\n                style={{ height: `calc(1/${accounts.length} * 100%)` }}\n              >\n                <ApplicationIcon appName={appName} icon={icon} />\n                <div className=\"ml-4 font-semibold\">{appName}</div>\n              </div>\n            </GridCell>\n          )}\n          <GridCell id={`acc_name_${i}`}>{account.accountName}</GridCell>\n          <GridCell id={`token_balance_${i}`}>\n            {toPresentation ? toPresentation(account.tokenBalance) : 0}{\" \"}\n            {currency}\n          </GridCell>\n          <GridCell id={`usd_balance_${i}`}>{account.usdBalance}</GridCell>\n          <Tooltip tip=\"Copy to clipboard\">\n            <GridCell id={`account_id_${i}`}>\n              <CenterEllipsis\n                onClick={copyToClipboard(\"Account ID\", account.address)}\n                value={account.address}\n                trailingChars={3}\n                leadingChars={4}\n              />\n            </GridCell>\n          </Tooltip>\n          <Tooltip tip=\"Copy to clipboard\">\n            <GridCell id={`principal_id_${i}`}>\n              <CenterEllipsis\n                onClick={copyToClipboard(\"Principal ID\", account.principalId)}\n                value={account.principalId}\n                trailingChars={3}\n                leadingChars={4}\n              />\n            </GridCell>\n          </Tooltip>\n        </tr>\n      ))}\n    </tbody>\n  )\n}\n\ninterface AppAccountBalanceSheetProps {\n  apps: AppBalance[]\n  currency?: string\n  blockchain?: string\n  toPresentation?: (balance?: bigint) => number\n}\n\nexport const AppAccountBalanceSheet: React.FC<AppAccountBalanceSheetProps> = ({\n  apps,\n  currency = \"ICP\",\n  blockchain = \"Internet Computer\",\n  toPresentation,\n}) => {\n  const headings = [\n    \"Application\",\n    \"Account\",\n    `${currency} balance`,\n    \"USD balance\",\n    \"Account ID\",\n    \"Principal ID\",\n  ]\n\n  return (\n    <TableWrapper>\n      <TableBase>\n        <TableHead headings={headings} />\n        {apps.map((app) => (\n          <AppRow\n            key={app.appName}\n            currency={currency}\n            appName={app.appName}\n            accounts={app.accounts}\n            icon={app.icon}\n            blockchain={blockchain}\n            toPresentation={toPresentation}\n          />\n        ))}\n      </TableBase>\n    </TableWrapper>\n  )\n}\n","import {\n  AppBalance,\n  TokenBalanceSheet,\n} from \"packages/integration/src/lib/asset/types\"\nimport React from \"react\"\n\nimport { useAllToken } from \"frontend/features/fungable-token/use-all-token\"\nimport { rmProto } from \"frontend/integration/identity-manager\"\nimport { TokenDetailBalance } from \"frontend/ui/molecules/token-detail\"\nimport { AppAccountBalanceSheet } from \"frontend/ui/organisms/app-acc-balance-sheet\"\nimport ProfileTemplate from \"frontend/ui/templates/profile-template/Template\"\nimport {\n  keepStaticOrder,\n  sortAlphabetic as alphabetic,\n} from \"frontend/ui/utils/sorting\"\n\nconst getSortedBalanceSheet = (balanceSheet?: TokenBalanceSheet) => {\n  if (!balanceSheet) return null\n  const applications = Object.values(balanceSheet.applications).filter(\n    (a: AppBalance | undefined): a is AppBalance => !!a,\n  )\n\n  const sortedAlphabetic = applications.sort(\n    alphabetic<AppBalance>(({ appName }) => rmProto(appName)),\n  )\n  const staticOrdered = keepStaticOrder<AppBalance>(\n    ({ appName }) => appName,\n    [\"NFID\", \"NNS\"],\n  )(sortedAlphabetic)\n\n  return staticOrdered\n}\n\ninterface IProfileTransactionsPage\n  extends React.HTMLAttributes<HTMLDivElement> {\n  balanceSheet?: TokenBalanceSheet\n  isLoading?: boolean\n}\n\nconst TokenWalletsDetailPage: React.FC<IProfileTransactionsPage> = ({\n  balanceSheet,\n  isLoading,\n}) => {\n  const { token } = useAllToken()\n  const apps: AppBalance[] | null = React.useMemo(\n    () => getSortedBalanceSheet(balanceSheet),\n\n    [balanceSheet],\n  )\n  const tokenConfig = React.useMemo(\n    () => token.find((t) => t.currency === balanceSheet?.token),\n    [token, balanceSheet?.token],\n  )\n\n  return (\n    <ProfileTemplate\n      pageTitle={`Your ${balanceSheet?.label} accounts`}\n      className=\"w-full min-w-fit z-[1]\"\n      containerClassName=\"overflow-x-auto\"\n      showBackButton\n      isLoading={isLoading}\n    >\n      <TokenDetailBalance\n        token={balanceSheet?.token || \"\"}\n        tokenConfig={tokenConfig}\n        label={balanceSheet?.label || \"\"}\n        icon={balanceSheet?.icon || \"\"}\n        tokenBalance={balanceSheet?.tokenBalance}\n        usdBalance={balanceSheet?.usdBalance || \"\"}\n      />\n      <div className=\"mt-5\">\n        {apps && (\n          <AppAccountBalanceSheet\n            apps={apps}\n            currency={balanceSheet?.token}\n            blockchain={balanceSheet?.blockchain}\n            toPresentation={tokenConfig?.toPresentation}\n          />\n        )}\n      </div>\n    </ProfileTemplate>\n  )\n}\n\nexport default TokenWalletsDetailPage\n","import React, { useMemo } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { fungibleAssetDetailsFactory } from \"src/ui/connnector/fungible-asset-details/fungible-asset-details-factory\"\nimport { useAssetDetails } from \"src/ui/connnector/fungible-asset-details/hooks/use-account-config\"\n\nimport { useBalanceICPAll } from \"frontend/features/fungable-token/icp/hooks/use-balance-icp-all\"\nimport TokenWalletsDetailPage from \"frontend/ui/pages/new-profile/internet-computer-wallets\"\n\nconst ProfileTokenWalletsDetailPage = () => {\n  const { appAccountBalance } = useBalanceICPAll()\n  const tokens = fungibleAssetDetailsFactory.getKeys()\n  const { assets: details, isLoading: isLoadingDetails } = useAssetDetails({\n    tokens,\n  })\n\n  const { token } = useParams()\n\n  const balance = useMemo(() => {\n    if (!token) return undefined\n    if (appAccountBalance && appAccountBalance[token]) {\n      return appAccountBalance[token]\n    }\n    if (details) {\n      return details.find((l) => l.token === token)\n    }\n  }, [appAccountBalance, token, details])\n  console.debug(\">> ProfileIWallets\", { balance })\n\n  return (\n    <TokenWalletsDetailPage\n      balanceSheet={balance}\n      isLoading={isLoadingDetails}\n    />\n  )\n}\n\nexport default ProfileTokenWalletsDetailPage\n","import { fungibleAssetDetailsFactory } from \"src/ui/connnector/fungible-asset-details/fungible-asset-details-factory\"\nimport useSWR from \"swr\"\n\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\ntype UseAssetDetails = {\n  tokens: TokenStandards[]\n}\n\nexport const useAssetDetails = ({ tokens }: UseAssetDetails) => {\n  const { data: assets, ...rest } = useSWR(\n    [tokens, \"assetDetails\"],\n    ([tokens]) =>\n      Promise.all(\n        tokens.map(async (token) => {\n          try {\n            return await fungibleAssetDetailsFactory.getAssetDetails(token)\n          } catch (e) {\n            // FIXME: handle case when request fails\n            console.error(\"useAssetDetails\", e)\n            return []\n          }\n        }),\n      ),\n  )\n  return { assets: assets?.flat() || [], ...rest }\n}\n","import clsx from \"clsx\"\n\nimport { Image } from \"@nfid-frontend/ui\"\n\ninterface ApplicationIconProps {\n  appName: string\n  icon?: string\n  className?: string\n}\n\nexport const ApplicationIcon: React.FC<ApplicationIconProps> = ({\n  appName,\n  icon,\n  className,\n}) => {\n  return (\n    <div\n      className={clsx(\n        \"bg-white rounded-full w-[40px] h-[40px] text-blue\",\n        \"flex items-center justify-center\",\n        \"text-xl font-medium\",\n        className,\n      )}\n    >\n      {icon ? (\n        <Image\n          className=\"rounded-full w-[26px] h-[26px] object-contain object-center\"\n          src={icon}\n          alt=\"app icon\"\n        />\n      ) : (\n        <div>{appName[0].toUpperCase()}</div>\n      )}\n    </div>\n  )\n}\n","import clsx from \"clsx\"\nimport React, { ReactNode } from \"react\"\nimport { BsArrowDown } from \"react-icons/bs\"\n\ninterface TableData {\n  headings: string[]\n  rows: { val: React.ReactNode[]; key: string }[]\n  sort?: string[]\n  reverse?: boolean\n  handleHeaderClick?: (col: string) => void\n}\n\nexport const TableWrapper: React.FC<{ children: React.ReactElement }> = ({\n  children,\n}) => <div className={clsx(\"overflow-x-scroll\")}>{children}</div>\n\nexport const TableBase: React.FC<{\n  children: ReactNode[] | ReactNode\n  className?: string\n}> = ({ children, className }) => (\n  <table\n    className={clsx(\n      \"w-full text-left min-w-[640px]\",\n      className ?? \"table-auto\",\n    )}\n  >\n    {children}\n  </table>\n)\n\nexport const TableHead: React.FC<{\n  headings: string[]\n  sort?: string[]\n  reverse?: boolean\n  handleHeaderClick?: (col: string) => void\n}> = ({ sort, reverse, headings, handleHeaderClick }) => (\n  <thead className=\"contents\">\n    <tr className={clsx(`border-b border-gray-900`)}>\n      {headings.map((heading, i) => (\n        <th\n          className={clsx(\n            \"h-16 px-3\",\n            i === 0 && \"pl-[30px]\",\n            i === heading.length - 1 && \"pr-[30px]\",\n            sort?.includes(heading) && \"cursor-pointer hover:bg-gray-100\",\n          )}\n          key={`heading${heading}`}\n          onClick={() => handleHeaderClick && handleHeaderClick(heading)}\n        >\n          <div\n            className={clsx(\n              `flex h-full gap-2 items-center group whitespace-nowrap`,\n            )}\n          >\n            {heading}\n            {sort?.[0] === heading && (\n              <BsArrowDown className={clsx(reverse && `rotate-180`)} />\n            )}\n            {sort?.includes(heading) && sort?.[0] !== heading && (\n              <div className={clsx(`invisible group-hover:visible`)}>\n                <BsArrowDown />\n              </div>\n            )}\n          </div>\n        </th>\n      ))}\n    </tr>\n  </thead>\n)\n\nexport const TableBody: React.FC<{\n  rows: { val: React.ReactNode[]; key: string }[]\n  headings: string[]\n}> = ({ rows, headings }) => (\n  <tbody>\n    {rows.map((row, j) => (\n      <tr key={`row${row.key}`} className={clsx(`border-b border-grey-200`)}>\n        {row.val.map((cell, i) => (\n          <td\n            className={clsx(\n              \"h-[85px] px-3\",\n              i === 0 && \"pl-[30px]\",\n              i === row.val.length - 1 && \"pr-[30px]\",\n            )}\n            key={`row${row.key}cell${headings[i]}`}\n          >\n            {cell}\n          </td>\n        ))}\n      </tr>\n    ))}\n  </tbody>\n)\n\nexport default function Table({\n  headings,\n  rows,\n  sort,\n  reverse,\n  handleHeaderClick,\n}: TableData) {\n  return (\n    <TableWrapper>\n      <TableBase>\n        <TableHead\n          headings={headings}\n          sort={sort}\n          reverse={reverse}\n          handleHeaderClick={handleHeaderClick}\n        />\n        <TableBody rows={rows} headings={headings} />\n      </TableBase>\n    </TableWrapper>\n  )\n}\n"],"names":["FungibleAssetDetailsConnector","constructor","config","getIdentity","async","profile","loadProfileFromLocalStorage","fetchProfile","getWalletDelegation","anchor","this","getTokenStandard","tokenStandard","getCacheTtl","btcAssetDetailsConnector","principal","btcAsset","icon","then","token","TokenStandards","IconSvgBTC","ethereumERC20AssetDetailsConnector","ethereumAsset","IconERC20","ethAssetDetailsConnector","l","IconPngEthereum","polygonERC20AssetDetailsConnector","polygonAsset","PolygonERC20Svg","maticAssetDetailsConnector","MaticSvg","FungibleAssetDetailsFactory","ConnectorFactory","getAssetDetails","process","key","getCacheKey","functionToCall","args","name","getFunctionToCall","connector","fungibleAssetDetailsFactory","TokenIcon","src","alt","className","clsx","TokenDetailBalance","label","tokenBalance","usdBalance","tokenConfig","id","toPresentation","GridCell","React","ref","children","props","AppRow","appName","accounts","currency","blockchain","navigate","useNavigate","copyToClipboard","type","value","e","preventDefault","stopPropagation","toast","toastId","navigator","clipboard","writeText","navigateToTransactions","account","ProfileConstants","state","wallet","accountName","principalToAddress","Principal","principalId","map","i","onClick","rowSpan","length","style","height","A","tip","address","trailingChars","leadingChars","AppAccountBalanceSheet","apps","headings","app","balanceSheet","isLoading","useAllToken","sortedAlphabetic","Object","values","applications","filter","a","sort","alphabetic","rmProto","keepStaticOrder","getSortedBalanceSheet","find","t","pageTitle","containerClassName","showBackButton","appAccountBalance","useBalanceICPAll","tokens","getKeys","assets","details","isLoadingDetails","data","rest","useSWR","Promise","all","console","error","flat","useAssetDetails","useParams","balance","useMemo","debug","ApplicationIcon","toUpperCase","TableWrapper","TableBase","TableHead","reverse","handleHeaderClick","heading","includes","TableBody","rows","row","j","val","cell","Table"],"sourceRoot":""}