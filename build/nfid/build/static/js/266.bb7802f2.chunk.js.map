{"version":3,"file":"static/js/266.bb7802f2.chunk.js","mappings":"0PAeO,MAAMA,EAET,IAA8B,IAA7B,oBAAEC,GAAqB,EAC1B,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,MACrB,2BAAEC,IAA+BC,EAAAA,EAAAA,MACjC,aAAEC,IAAiBC,EAAAA,EAAAA,MACnB,gBAAEC,IAAoBH,EAAAA,EAAAA,KAEtBI,GAAWC,EAAAA,EAAAA,OAEX,MAAEC,IAAUC,EAAAA,EAAAA,MACZC,EAAaC,OAAQH,EAAiCE,YAEtDE,EAAcC,EAAAA,aAAkBC,UACpC,IAAKJ,EACH,MAAM,IAAIK,MAAM,8CAElBd,GAA2B,SAErBF,EAAeW,GAAY,GAEjCJ,EAASH,EAAaL,GAAqB,GAC1C,CACDK,EACAG,EACAP,EACAD,EACAG,EACAS,IAWF,OARAM,EAAAA,EAAAA,YAAU,KACHX,EAIAO,IAHHN,EACG,GAAEW,EAAAA,EAAAA,QAAmCA,EAAAA,EAAAA,sBAExB,GACjB,CAACL,EAAaP,EAAiBC,KAGhC,SAAC,KAAgB,WACf,SAAC,KAAa,CAACY,UAAU,gBAAgBC,WAAS,KACjC,EAIvB,G","sources":["apps/device/register-device-decider/index.tsx"],"sourcesContent":["import React, { useEffect } from \"react\"\nimport { useLocation, useNavigate } from \"react-router-dom\"\n\nimport { BlurredLoader, ScreenResponsive } from \"@nfid-frontend/ui\"\n\nimport { RecoverNFIDRoutesConstants } from \"frontend/apps/authentication/recover-nfid/routes\"\nimport { useAuthentication } from \"frontend/apps/authentication/use-authentication\"\nimport { useAccount } from \"frontend/integration/identity-manager/account/hooks\"\nimport { useNFIDNavigate } from \"frontend/ui/utils/use-nfid-navigate\"\n\ninterface AppScreenRegisterDeviceDeciderProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  registerSuccessPath: string\n}\n\nexport const RouterRegisterDeviceDecider: React.FC<\n  AppScreenRegisterDeviceDeciderProps\n> = ({ registerSuccessPath }) => {\n  const { recoverAccount } = useAccount()\n  const { setShouldStoreLocalAccount } = useAuthentication()\n  const { generatePath } = useNFIDNavigate()\n  const { isAuthenticated } = useAuthentication()\n\n  const navigate = useNavigate()\n\n  const { state } = useLocation()\n  const userNumber = BigInt((state as { userNumber: string }).userNumber)\n\n  const handleLogin = React.useCallback(async () => {\n    if (!userNumber)\n      throw new Error(\"userNumber is not defined. Not authorized.\")\n\n    setShouldStoreLocalAccount(false)\n\n    await recoverAccount(userNumber, false)\n\n    navigate(generatePath(registerSuccessPath))\n  }, [\n    generatePath,\n    navigate,\n    recoverAccount,\n    registerSuccessPath,\n    setShouldStoreLocalAccount,\n    userNumber,\n  ])\n\n  useEffect(() => {\n    if (!isAuthenticated)\n      navigate(\n        `${RecoverNFIDRoutesConstants.base}/${RecoverNFIDRoutesConstants.enterRecoveryPhrase}`,\n      )\n    else handleLogin()\n  }, [handleLogin, isAuthenticated, navigate])\n\n  return (\n    <ScreenResponsive>\n      <BlurredLoader className=\"w-full h-full\" isLoading />\n    </ScreenResponsive>\n  )\n}\n\nexport default RouterRegisterDeviceDecider\n"],"names":["RouterRegisterDeviceDecider","registerSuccessPath","recoverAccount","useAccount","setShouldStoreLocalAccount","useAuthentication","generatePath","useNFIDNavigate","isAuthenticated","navigate","useNavigate","state","useLocation","userNumber","BigInt","handleLogin","React","async","Error","useEffect","RecoverNFIDRoutesConstants","className","isLoading"],"sourceRoot":""}