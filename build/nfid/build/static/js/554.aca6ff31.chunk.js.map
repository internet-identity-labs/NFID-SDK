{"version":3,"file":"static/js/554.aca6ff31.chunk.js","mappings":"gUAaO,MAAMA,EAAoB,IAKN,IALO,WAChCC,EAAU,OACVC,EAAM,QACNC,EAAO,UACPC,GAAY,GACO,EACnB,OACE,UAAC,KAAa,CAACA,UAAWA,EAAWC,UAAU,MAAK,WAClD,cAAGA,UAAU,yBAAwB,SAClCJ,EAAa,oBAAsB,2BAEtC,cAAGI,UAAU,UAAS,SACnBJ,EACG,sGACA,6EAEN,SAAC,KAAK,CACJI,UAAU,kCACVC,IAAKL,EAAaM,EAAWC,EAC7BC,IAAI,cAEN,iBAAKJ,UAAU,6BAA4B,WACzC,SAAC,KAAM,CAACK,KAAK,SAASL,UAAU,SAASM,QAAST,EAAO,2BAGzD,SAAC,KAAM,CAACQ,KAAK,UAAUL,UAAU,SAASM,QAASR,EAAQ,8BAI/C,EClCL,SAASS,IACtB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,eAASC,IAE/CC,EAAAA,EAAAA,YAAU,KACRC,OAAOC,YAAY,CAAEC,OAAO,GAAO,GAClC,KAEHH,EAAAA,EAAAA,YAAU,KACR,MAAMI,EAAoBC,IACpB,YAAc,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGC,QAASV,IAC3BC,EAAeQ,EAAEC,KAAKC,SACtBN,OAAOO,oBAAoB,UAAWJ,GACxC,EAKF,OAFAH,OAAOQ,iBAAiB,UAAWL,GAE5B,IAAMH,OAAOO,oBAAoB,UAAWJ,EAAiB,GACnE,CAACR,IAEJ,MAAMZ,GAAa0B,EAAAA,EAAAA,UAAQ,KAClBC,EAAAA,EAAAA,OACN,IAEGC,GAAmBC,EAAAA,EAAAA,cAAYC,UACnC,IACE,MAAMC,QAAiBC,EAAAA,GAAAA,OAAwB,CAC7CC,WAAWC,EAAAA,EAAAA,IAAgBtB,KAE7BK,OAAOC,YACL,CACEiB,iBAAiB,EACjBJ,SAAUK,KAAKC,UAAUN,EAASO,UAClCtC,cAEFiB,OAAOsB,OAAOC,OAMlB,CAJE,MACAvB,OAAOC,YAAY,CAAEiB,iBAAiB,GAAQlB,OAAOsB,OAAOC,OAC9D,CAAC,QACCvB,OAAOwB,OACT,IACC,CAACzC,EAAYY,IAEVX,GAAS4B,EAAAA,EAAAA,cAAY,KACzBZ,OAAOC,YAAY,CAAEiB,iBAAiB,GAASlB,OAAOsB,OAAOC,QAC7DvB,OAAOwB,OAAO,GACb,IAEH,OACE,SAAC1C,EAAiB,CAChBI,WAAYS,EACZZ,WAAYA,EACZC,OAAQA,EACRC,QAAS0B,GAGf,C","sources":["features/iframe/iframe-trust-device/index.tsx","features/iframe/iframe-trust-device/coordinator.tsx"],"sourcesContent":["import { BlurredLoader, Button } from \"@nfid-frontend/ui\"\nimport { Image } from \"@nfid-frontend/ui\"\n\nimport securityKey from \"./assets/security-key.png\"\nimport webauthn from \"./assets/webauthn.png\"\n\nexport interface IIframeTrustDevice {\n  isWebAuthN: boolean\n  onSkip: () => void\n  onTrust: () => void\n  isLoading?: boolean\n}\n\nexport const IframeTrustDevice = ({\n  isWebAuthN,\n  onSkip,\n  onTrust,\n  isLoading = false,\n}: IIframeTrustDevice) => {\n  return (\n    <BlurredLoader isLoading={isLoading} className=\"p-0\">\n      <p className=\"mb-4 text-xl font-bold\">\n        {isWebAuthN ? \"Trust this device\" : \"Register security key\"}\n      </p>\n      <p className=\"text-sm\">\n        {isWebAuthN\n          ? \"Add a passkey for this browser on this device to sign in to NFID faster with a look, touch, or PIN.\"\n          : \"Add a passkey on your security key to sign in to NFID faster next time.\"}\n      </p>\n      <Image\n        className=\"max-h-[200px] mx-auto mt-6 mb-7\"\n        src={isWebAuthN ? webauthn : securityKey}\n        alt=\"webauthn\"\n      />\n      <div className=\"flex justify-between gap-5\">\n        <Button type=\"stroke\" className=\"w-full\" onClick={onSkip}>\n          Skip for now\n        </Button>\n        <Button type=\"primary\" className=\"w-full\" onClick={onTrust}>\n          Add passkey\n        </Button>\n      </div>\n    </BlurredLoader>\n  )\n}\n","import { WebAuthnIdentity } from \"@dfinity/identity\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\n\nimport { isWebAuthNSupported } from \"frontend/integration/device\"\nimport { creationOptions } from \"frontend/integration/webauthn/creation-options\"\n\nimport { IframeTrustDevice } from \".\"\n\nexport default function IframeTrustDeviceCoordinator() {\n  const [userDevices, setUserDevices] = useState(undefined)\n\n  useEffect(() => {\n    window.postMessage({ ready: true })\n  }, [])\n\n  useEffect(() => {\n    const getPostedDevices = (e: MessageEvent<any>) => {\n      if (\"devices\" in e?.data && !userDevices) {\n        setUserDevices(e.data.devices)\n        window.removeEventListener(\"message\", getPostedDevices)\n      }\n    }\n\n    window.addEventListener(\"message\", getPostedDevices)\n\n    return () => window.removeEventListener(\"message\", getPostedDevices)\n  }, [userDevices])\n\n  const isWebAuthN = useMemo(() => {\n    return isWebAuthNSupported()\n  }, [])\n\n  const onCreateIdentity = useCallback(async () => {\n    try {\n      const identity = await WebAuthnIdentity.create({\n        publicKey: creationOptions(userDevices),\n      })\n      window.postMessage(\n        {\n          isDeviceTrusted: true,\n          identity: JSON.stringify(identity.toJSON()),\n          isWebAuthN,\n        },\n        window.opener.origin,\n      )\n    } catch {\n      window.postMessage({ isDeviceTrusted: true }, window.opener.origin)\n    } finally {\n      window.close()\n    }\n  }, [isWebAuthN, userDevices])\n\n  const onSkip = useCallback(() => {\n    window.postMessage({ isDeviceTrusted: false }, window.opener.origin)\n    window.close()\n  }, [])\n\n  return (\n    <IframeTrustDevice\n      isLoading={!userDevices}\n      isWebAuthN={isWebAuthN}\n      onSkip={onSkip}\n      onTrust={onCreateIdentity}\n    />\n  )\n}\n"],"names":["IframeTrustDevice","isWebAuthN","onSkip","onTrust","isLoading","className","src","webauthn","securityKey","alt","type","onClick","IframeTrustDeviceCoordinator","userDevices","setUserDevices","useState","undefined","useEffect","window","postMessage","ready","getPostedDevices","e","data","devices","removeEventListener","addEventListener","useMemo","isWebAuthNSupported","onCreateIdentity","useCallback","async","identity","WebAuthnIdentity","publicKey","creationOptions","isDeviceTrusted","JSON","stringify","toJSON","opener","origin","close"],"sourceRoot":""}