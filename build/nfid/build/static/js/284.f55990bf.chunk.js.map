{"version":3,"file":"static/js/284.f55990bf.chunk.js","mappings":"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","sources":["features/activity/components/activity-table-row.tsx","features/activity/components/activity-table-group.tsx","features/activity/connector/activity.ts","features/activity/connector/btc/btc-activity-connector.ts","features/activity/connector/evm/eth/eth-activity-connector.ts","features/activity/connector/evm/goerli-eth/eth-activity-connector.ts","features/activity/connector/evm/polygon-mumbai/polygon-mumbai-activity-connector.ts","features/activity/connector/evm/polygon/polygon-activity-connector.ts","integration/rosetta/util.ts","integration/rosetta/transactions/map-to-transaction-history.ts","integration/rosetta/transactions/index.ts","features/activity/types.ts","features/activity/util/activity.ts","features/activity/connector/ic/ic-activity-connector.ts","integration/rosetta/transactions/get-all-transaction-history.ts","integration/rosetta/transactions/reduce-all-transactions.ts","features/activity/connector/activity-factory.ts","features/activity/util/row.ts","features/activity/index.tsx","ui/templates/profile-container/Container.tsx"],"sourcesContent":["import { format } from \"date-fns\"\nimport { useCallback } from \"react\"\nimport { toast } from \"react-toastify\"\n\nimport {\n  IconCmpArrow,\n  IconCmpStatusSuccess,\n  IconCmpTinyBTC,\n  IconCmpTinyETH,\n  IconCmpTinyIC,\n} from \"@nfid-frontend/ui\"\nimport { truncateString } from \"@nfid-frontend/utils\"\n\nimport { IActivityRow } from \"../types\"\n\ninterface IActivityTableRow extends IActivityRow {\n  id: string\n}\n\nexport const ChainIcons = {\n  BTC: <IconCmpTinyBTC />,\n  ETH: <IconCmpTinyETH />,\n  IC: <IconCmpTinyIC />,\n}\n\nexport const StatusIcons = {\n  Success: <IconCmpStatusSuccess />,\n}\n\nexport const ActivityTableRow = ({\n  action,\n  asset,\n  from,\n  chain,\n  timestamp,\n  to,\n  id,\n}: IActivityTableRow) => {\n  const onCopy = useCallback((text: string) => {\n    toast.success(\"Address copied to clipboard\")\n    navigator.clipboard.writeText(text)\n  }, [])\n\n  return (\n    <tr\n      id={id}\n      className=\"items-center text-sm transition-all border-b border-gray-200 hover:bg-gray-100 activity-row\"\n    >\n      <td className=\"flex items-center py-2.5\">\n        <div className=\"w-10 h-10 rounded-[9px] bg-gray-50 flex items-center justify-center relative\">\n          <IconCmpArrow className=\"rotate-[135deg] text-gray-400\" />\n          <div className=\"absolute w-[18px] h-[18px] right-0 bottom-0\">\n            {ChainIcons[chain]}\n          </div>\n        </div>\n        <div className=\"ml-2.5\">\n          <p className=\"font-bold\">{action}</p>\n          <p className=\"text-xs text-gray-400\">\n            {format(new Date(timestamp), \"HH:mm:ss aaa\")}\n          </p>\n        </div>\n      </td>\n      {asset?.type === \"ft\" ? (\n        <td className=\"leading-5\">\n          <p className=\"font-medium\">\n            {asset.amount} {asset.currency}\n          </p>\n        </td>\n      ) : (\n        <td className=\"leading-5\">\n          <div className=\"flex items-center\">\n            <img src={asset.preview} className=\"object-cover w-10 h-10\" />\n            <p className=\"ml-2.5 font-semibold\">{asset.name}</p>\n          </div>\n        </td>\n      )}\n      <td\n        className=\"transition-opacity cursor-pointer hover:opacity-50\"\n        onClick={() => onCopy(from)}\n      >\n        {truncateString(from, 6, 4)}\n      </td>\n      <td\n        className=\"transition-opacity cursor-pointer hover:opacity-50\"\n        onClick={() => onCopy(to)}\n      >\n        {truncateString(to, 6, 4)}\n      </td>\n    </tr>\n  )\n}\n","import { useCallback } from \"react\"\n\nimport { IActivityRow, IActivityRowGroup } from \"../types\"\nimport { ActivityTableRow } from \"./activity-table-row\"\n\ninterface IActivityTableGroup extends IActivityRowGroup {\n  groupIndex: number\n}\n\nexport const ActivityTableGroup = ({\n  date,\n  rows,\n  groupIndex,\n}: IActivityTableGroup) => {\n  const getRowId = useCallback((row: IActivityRow) => {\n    if (row.asset.type === \"ft\")\n      return `tx-${row.action}-${row.network}-${row.asset.currency}-${\n        row.asset.type\n      }-${row.asset.amount}-${row.asset.currency}-${row.timestamp.getTime()}-${\n        row.from\n      }-${row.to}`.replace(\".\", \"_\")\n    else\n      return `tx-${row.action}-${row.network}-${row.asset.type}-${\n        row.asset.name\n      }-${row.timestamp.getTime()}-${row.from}-${row.to}`.replace(\".\", \"_\")\n  }, [])\n\n  return (\n    <>\n      <tr id={`group_${groupIndex}`}>\n        <td className=\"pt-5 text-sm font-bold text-gray-400\">{date}</td>\n      </tr>\n      {rows.map((row, i) => (\n        <ActivityTableRow\n          {...row}\n          id={getRowId(row)}\n          key={`group_${groupIndex}_activity_${i}`}\n        />\n      ))}\n    </>\n  )\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { Cache } from \"node-ts-cache\"\nimport { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { applicationToAccount } from \"packages/integration/src/lib/identity-manager/application/application-to-account\"\n\nimport {\n  Account,\n  Application,\n  PrincipalAccount,\n  Profile,\n  RootWallet,\n  authState,\n  fetchPrincipals,\n  loadProfileFromLocalStorage,\n} from \"@nfid/integration\"\n\nimport {\n  fetchAccounts,\n  fetchApplications,\n  fetchProfile,\n} from \"frontend/integration/identity-manager\"\nimport { connectorCache } from \"frontend/ui/connnector/cache\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { IActivityRow } from \"../types\"\nimport { IActivityConfig, IActivityConnector } from \"./activity-connector-types\"\n\nexport abstract class ActivityClass<T extends IActivityConfig>\n  implements IActivityConnector\n{\n  public config: T\n\n  constructor(config: T) {\n    this.config = config\n  }\n\n  getTokenConfig(): T {\n    return this.config\n  }\n\n  getBlockchain(): Blockchain {\n    return this.config.network\n  }\n\n  getIdentity(): DelegationIdentity {\n    return authState.get().delegationIdentity as DelegationIdentity\n  }\n\n  mapActivitiesToRows(\n    activities: Activity[],\n    config: IActivityConfig,\n  ): IActivityRow[] {\n    return activities.map((activity: Activity) => ({\n      action: activity.action,\n      network: config.network,\n      chain: config.chain,\n      asset: activity.asset,\n      type: activity.asset.type,\n      timestamp: activity.date,\n      from: activity.from,\n      to: activity.to,\n    }))\n  }\n\n  async getActivitiesRows(): Promise<IActivityRow[]> {\n    const activities = await this.getActivities()\n    const activitiesRows = this.mapActivitiesToRows(activities, this.config)\n\n    return activitiesRows\n  }\n\n  @Cache(connectorCache, { ttl: 3600 })\n  protected async getAllPrincipals<T extends boolean>(\n    groupedById: T,\n  ): Promise<\n    T extends true ? Record<string, PrincipalAccount[]> : PrincipalAccount[]\n  > {\n    const profile = await this.getProfile()\n    const accounts = await this.getAccounts(true)\n\n    const principals = await fetchPrincipals(\n      BigInt(profile.anchor),\n      accounts,\n      profile.wallet === RootWallet.NFID,\n    )\n    if (!groupedById) return principals as any\n\n    return principals.reduce(\n      (\n        groupedAccounts: Record<string, PrincipalAccount[]>,\n        principal: PrincipalAccount,\n      ) => {\n        !!groupedAccounts[principal.account.domain]\n          ? groupedAccounts[principal.account.domain].push(principal)\n          : (groupedAccounts[principal.account.domain] = [principal])\n\n        return groupedAccounts\n      },\n      {},\n    ) as any\n  }\n\n  @Cache(connectorCache, { ttl: 3600 })\n  protected async getProfile(): Promise<Profile> {\n    return loadProfileFromLocalStorage() ?? (await fetchProfile())\n  }\n\n  @Cache(connectorCache, { ttl: 3600 })\n  protected async getAccounts(\n    extendWithFixedAccounts: boolean = false,\n  ): Promise<Account[]> {\n    const accounts = await fetchAccounts()\n    if (!extendWithFixedAccounts) return accounts\n\n    const applications = await this.getApplications()\n    const fixedAccounts = applications\n      .filter((app) => app.isNftStorage)\n      .map(applicationToAccount)\n\n    return fixedAccounts.reduce((acc, account) => {\n      const accountAlreadyAdded = acc.find(\n        (a) => a.domain === account.domain && a.accountId === account.accountId,\n      )\n      if (accountAlreadyAdded) {\n        return acc\n      }\n      return [...acc, account]\n    }, accounts)\n  }\n\n  @Cache(connectorCache, { ttl: 180 })\n  protected async getApplications(): Promise<Application[]> {\n    return await fetchApplications()\n  }\n\n  abstract getActivities(): Promise<Activity[]>\n}\n","import { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { BtcAsset } from \"packages/integration/src/lib/bitcoin-wallet/btc-asset\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { ActivityClass } from \"../activity\"\nimport { IActivityConfig } from \"../activity-connector-types\"\n\nexport class BTCActivityConnector extends ActivityClass<IActivityConfig> {\n  async getActivities(): Promise<Activity[]> {\n    const identity = this.getIdentity()\n    return await new BtcAsset().getActivityByUser(identity)\n  }\n}\n\nexport const btcActivityConnector = new BTCActivityConnector({\n  chain: Chain.BTC,\n  network: Blockchain.BITCOIN,\n  tokenStandard: TokenStandards.BTC,\n})\n","import { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { ActivityClass } from \"../../activity\"\nimport { IActivityConfig } from \"../../activity-connector-types\"\n\nexport class EthActivityConnector extends ActivityClass<IActivityConfig> {\n  async getActivities(): Promise<Activity[]> {\n    const identity = this.getIdentity()\n    return await ethereumAsset.getActivityByUser(identity)\n  }\n}\n\nexport const ethActivityConnector = new EthActivityConnector({\n  chain: Chain.ETH,\n  network: Blockchain.ETHEREUM,\n  tokenStandard: TokenStandards.ETH,\n})\n","import { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { ethereumGoerliAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { ActivityClass } from \"../../activity\"\nimport { IActivityConfig } from \"../../activity-connector-types\"\n\nexport class EthGoerliActivityConnector extends ActivityClass<IActivityConfig> {\n  async getActivities(): Promise<Activity[]> {\n    const identity = this.getIdentity()\n    return await ethereumGoerliAsset.getActivityByUser(identity)\n  }\n}\n\nexport const ethGoerliActivityConnector = new EthGoerliActivityConnector({\n  chain: Chain.ETH,\n  network: Blockchain.ETHEREUM,\n  tokenStandard: TokenStandards.ETH,\n})\n","import { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { polygonMumbaiAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { ActivityClass } from \"../../activity\"\nimport { IActivityConfig } from \"../../activity-connector-types\"\n\nexport class PolygonMumbaiActivityConnector extends ActivityClass<IActivityConfig> {\n  async getActivities(): Promise<Activity[]> {\n    const identity = this.getIdentity()\n    return await polygonMumbaiAsset.getActivityByUser(identity)\n  }\n}\n\nexport const polygonMumbaiActivityConnector =\n  new PolygonMumbaiActivityConnector({\n    chain: Chain.ETH,\n    network: Blockchain.POLYGON_MUMBAI,\n    tokenStandard: TokenStandards.MATIC,\n  })\n","import { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { ActivityClass } from \"../../activity\"\nimport { IActivityConfig } from \"../../activity-connector-types\"\n\nexport class PolygonActivityConnector extends ActivityClass<IActivityConfig> {\n  async getActivities(): Promise<Activity[]> {\n    const identity = this.getIdentity()\n    return await polygonAsset.getActivityByUser(identity)\n  }\n}\n\nexport const polygonActivityConnector = new PolygonActivityConnector({\n  chain: Chain.ETH,\n  network: Blockchain.POLYGON,\n  tokenStandard: TokenStandards.MATIC,\n})\n","import { camelCase } from \"lodash\"\n\nexport function camelizeKeys(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.map((v) => camelizeKeys(v))\n  } else if (obj != null && obj.constructor === Object) {\n    return Object.keys(obj).reduce(\n      (result, key) => ({\n        ...result,\n        [camelCase(key)]: camelizeKeys(obj[key]),\n      }),\n      {},\n    )\n  }\n  return obj\n}\n","import { TransactionHistory } from \"../rosetta_interface\"\nimport { camelizeKeys } from \"../util\"\n\nexport async function mapToTransactionHistory(\n  response: Response,\n): Promise<TransactionHistory> {\n  return await response\n    .json()\n    .then((data) => camelizeKeys(data) as TransactionHistory)\n    .then((data) => {\n      // PASHUNYA REFACTOR. LOOKS WEIRD\n      return {\n        totalCount: data.totalCount,\n        transactions: data.transactions.map((transaction) => ({\n          blockIdentifier: transaction.blockIdentifier,\n          transaction: {\n            metadata: transaction.transaction.metadata,\n            transactionIdentifier:\n              transaction.transaction.transactionIdentifier,\n            operations: transaction.transaction.operations.map((operation) => ({\n              ...operation,\n              amount: {\n                currency: operation.amount.currency,\n                value: (Number(operation.amount.value) / 10 ** 8).toString(),\n              },\n            })),\n          },\n        })),\n      } as TransactionHistory\n    })\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\n\nimport { getRosettaRequest, restCall, rosetta } from \"@nfid/integration\"\n\nimport { TransactionHistory } from \"frontend/integration/rosetta/rosetta_interface\"\n\nimport { mapToTransactionHistory } from \"./map-to-transaction-history\"\n\nexport async function getTransactionHistory(\n  principal: Principal,\n): Promise<TransactionHistory> {\n  let request = getRosettaRequest(principalToAddress(principal))\n  return await restCall(\"POST\", `${rosetta}/search/transactions`, request).then(\n    mapToTransactionHistory,\n  )\n}\n","import {\n  ActivityAssetFT,\n  ActivityAssetNFT,\n} from \"packages/integration/src/lib/asset/types\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nexport enum IActivityAction {\n  SENT = \"Sent\",\n  RECEIVED = \"Received\",\n}\n\nexport enum IActivityStatus {\n  PENDING = \"Pending\",\n  SUCCESS = \"Success\",\n  FAILED = \"Failed\",\n  CANCELLED = \"Cancelled\",\n}\n\nexport interface IActivityRow {\n  action: IActivityAction\n  chain: Chain\n  network: Blockchain\n  timestamp: Date\n  asset: ActivityAssetFT | ActivityAssetNFT\n  from: string\n  to: string\n}\n\nexport interface IActivityRowGroup {\n  date: string\n  rows: IActivityRow[]\n}\n","import { Activity } from \"packages/integration/src/lib/asset/types\"\n\nimport { Transaction } from \"frontend/integration/rosetta/rosetta_interface\"\n\nimport { IActivityAction } from \"../types\"\n\nexport const mapToActivity = (\n  tx: Transaction,\n  type: IActivityAction,\n): Activity => {\n  return {\n    id: tx.transaction.transactionIdentifier.hash,\n    date: new Date(Math.floor(tx.transaction.metadata.timestamp / 1000000)),\n    from: tx.transaction.operations[0].account.address,\n    to: tx.transaction.operations[1].account.address,\n    transactionHash: tx.transaction.transactionIdentifier.hash,\n    action: type,\n    asset: {\n      type: \"ft\",\n      currency: \"ICP\",\n      amount: Math.abs(Number(tx.transaction.operations[0].amount.value)),\n      amountUSD: `${Math.abs(\n        Number(tx.transaction.operations[0].amount.value),\n      )}`,\n    },\n  }\n}\n\nexport const icFungibleTxsToActivity = (\n  txs: Transaction[],\n  accounts: string[],\n): Activity[] => {\n  const mappedTxs = txs.map((tx) => {\n    if (\n      accounts.includes(tx.transaction.operations[0].account.address) &&\n      accounts.includes(tx.transaction.operations[1].account.address)\n    )\n      return [\n        mapToActivity(tx, IActivityAction.RECEIVED),\n        mapToActivity(tx, IActivityAction.SENT),\n      ]\n\n    return [\n      mapToActivity(\n        tx,\n        accounts.includes(tx.transaction.operations[1].account.address)\n          ? IActivityAction.RECEIVED\n          : IActivityAction.SENT,\n      ),\n    ]\n  })\n\n  return mappedTxs.flat()\n}\n","import { principalToAddress } from \"ictool\"\nimport { Activity } from \"packages/integration/src/lib/asset/types\"\nimport { Chain } from \"packages/integration/src/lib/lambda/ecdsa\"\n\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nimport { getAllTransactionHistory } from \"frontend/integration/rosetta/transactions/get-all-transaction-history\"\nimport { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { icFungibleTxsToActivity } from \"../../util/activity\"\nimport { ActivityClass } from \"../activity\"\nimport { IActivityConfig } from \"../activity-connector-types\"\n\nexport class ICActivityConnector extends ActivityClass<IActivityConfig> {\n  async getActivities(): Promise<Activity[]> {\n    const allPrincipals = await this.getAllPrincipals(false)\n    const allAccounts = allPrincipals.map((p) =>\n      principalToAddress(p.principal),\n    )\n\n    const icpTransactions = await getAllTransactionHistory(\n      allPrincipals.map((p) => p.principal),\n    )\n\n    return icFungibleTxsToActivity(icpTransactions.transactions, allAccounts)\n  }\n}\n\nexport const icActivityConnector = new ICActivityConnector({\n  chain: Chain.IC,\n  network: Blockchain.IC,\n  tokenStandard: TokenStandards.ICP,\n})\n","import { Principal } from \"@dfinity/principal\"\n\nimport { TransactionHistory } from \"frontend/integration/rosetta/rosetta_interface\"\n\nimport { getTransactionHistory } from \".\"\nimport { reduceAllTransactions } from \"./reduce-all-transactions\"\n\nexport async function getAllTransactionHistory(\n  principals: Principal[],\n): Promise<TransactionHistory> {\n  return reduceAllTransactions(\n    await Promise.all(principals.map(getTransactionHistory)),\n  )\n}\n","import { TransactionHistory } from \"../rosetta_interface\"\n\nexport const reduceAllTransactions = (transactions: TransactionHistory[]) => {\n  return transactions.reduce<TransactionHistory>(\n    (acc, current) => {\n      const accumulatedBlockIdentifier = acc.transactions.map(\n        (tx) => tx.blockIdentifier.hash,\n      )\n      const newBlockIdentifiers = current.transactions\n        .filter(\n          (tx) =>\n            accumulatedBlockIdentifier.indexOf(tx.blockIdentifier.hash) === -1,\n        )\n        .map((tx) => tx.blockIdentifier.hash)\n\n      if (!newBlockIdentifiers.length) return acc\n\n      const filteredTransactions = current.transactions.filter(\n        (tx) => newBlockIdentifiers.indexOf(tx.blockIdentifier.hash) !== -1,\n      )\n      return {\n        totalCount: acc.totalCount + filteredTransactions.length,\n        transactions: [...acc.transactions, ...filteredTransactions],\n      }\n    },\n    { totalCount: 0, transactions: [] } as TransactionHistory,\n  )\n}\n","import { Blockchain } from \"frontend/ui/connnector/types\"\n\nimport { IActivityRow, IActivityRowGroup } from \"../types\"\nimport { groupActivityRowsByDate } from \"../util/row\"\nimport { ActivityClass } from \"./activity\"\nimport { IActivityConfig } from \"./activity-connector-types\"\nimport { btcActivityConnector } from \"./btc/btc-activity-connector\"\nimport { ethActivityConnector } from \"./evm/eth/eth-activity-connector\"\nimport { ethGoerliActivityConnector } from \"./evm/goerli-eth/eth-activity-connector\"\nimport { polygonMumbaiActivityConnector } from \"./evm/polygon-mumbai/polygon-mumbai-activity-connector\"\nimport { polygonActivityConnector } from \"./evm/polygon/polygon-activity-connector\"\nimport { icActivityConnector } from \"./ic/ic-activity-connector\"\n\nconst activityConnectors: {\n  [key in Blockchain]: ActivityClass<IActivityConfig>[]\n} = {\n  [Blockchain.ETHEREUM]: [ethActivityConnector],\n  [Blockchain.ETHEREUM_GOERLI]: [ethGoerliActivityConnector],\n  [Blockchain.POLYGON]: [polygonActivityConnector],\n  [Blockchain.POLYGON_MUMBAI]: [polygonMumbaiActivityConnector],\n  [Blockchain.IC]: [icActivityConnector],\n  [Blockchain.BITCOIN]: [btcActivityConnector],\n}\n\nexport const getAllActivity = async (): Promise<IActivityRowGroup[]> => {\n  const activitiesArray = await Promise.all(\n    Object.values(activityConnectors)\n      .flat()\n      .map(async (connector) => {\n        try {\n          return await connector.getActivitiesRows()\n        } catch (e) {\n          console.error(e)\n        }\n      }),\n  )\n\n  const notEmptyActivitiesArrays = activitiesArray.filter((a) => !!a)\n\n  const groupedRowsByDate = groupActivityRowsByDate(\n    notEmptyActivitiesArrays.flat() as IActivityRow[],\n  )\n\n  return groupedRowsByDate\n}\n","import { format } from \"date-fns\"\n\nimport { IActivityRow, IActivityRowGroup } from \"../types\"\n\nexport const groupActivityRowsByDate = (\n  rows: IActivityRow[],\n): IActivityRowGroup[] => {\n  const groups = rows.reduce<{ [date: string]: IActivityRow[] }>((acc, row) => {\n    const dateObject = new Date(Number(row.timestamp))\n\n    const date = format(dateObject, \"MMMM d, yyyy\")\n    if (!acc[date]) {\n      acc[date] = []\n    }\n    acc[date].push(row)\n    return acc\n  }, {})\n\n  const groupedByDate = Object.entries(groups).map(([date, rows]) => ({\n    date,\n    rows: rows.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime()),\n  }))\n\n  return groupedByDate.sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime(),\n  )\n}\n","import useSWR from \"swr\"\n\nimport { Table } from \"@nfid-frontend/ui\"\n\nimport ProfileContainer from \"frontend/ui/templates/profile-container/Container\"\nimport ProfileTemplate from \"frontend/ui/templates/profile-template/Template\"\n\nimport { ActivityTableGroup } from \"./components/activity-table-group\"\nimport { getAllActivity } from \"./connector/activity-factory\"\n\nexport interface IActivityPage {}\n\nconst ActivityPage = () => {\n  const { isLoading, data } = useSWR(\"activity\", getAllActivity)\n\n  return (\n    <ProfileTemplate isLoading={isLoading} pageTitle=\"Activity\" showBackButton>\n      <ProfileContainer>\n        <Table\n          id=\"activity-table\"\n          tableHeader={\n            <tr className=\"border-b border-black\">\n              <th>Action</th>\n              <th>Asset</th>\n              <th className=\"hidden sm:table-cell\">From</th>\n              <th className=\"hidden sm:table-cell\">To</th>\n            </tr>\n          }\n        >\n          {data?.map((group, index) => (\n            <ActivityTableGroup\n              groupIndex={index}\n              date={group.date}\n              rows={group.rows}\n              key={`group_${index}`}\n            />\n          ))}\n        </Table>\n      </ProfileContainer>\n    </ProfileTemplate>\n  )\n}\n\nexport default ActivityPage\n","import clsx from \"clsx\"\nimport React from \"react\"\n\ninterface IProfileContainer {\n  title?: string | React.ReactNode\n  subTitle?: string | React.ReactNode\n  children?: React.ReactNode\n  className?: string\n  showChildrenPadding?: boolean\n  id?: string\n}\n\nconst ProfileContainer: React.FC<IProfileContainer> = ({\n  title,\n  subTitle,\n  children,\n  className,\n  showChildrenPadding = true,\n  id,\n}) => {\n  return (\n    <div\n      id={id}\n      className={clsx(\n        \"block border border-gray-200 rounded-xl\",\n        \"py-4 sm:py-[26px]\",\n        className,\n      )}\n    >\n      <div className=\"px-5\">\n        {title && (\n          <div className=\"flex items-center justify-between mb-3 text-xl\">\n            {title}\n          </div>\n        )}\n        {subTitle && (\n          <div className=\"flex items-center justify-between mb-4 text-sm leading-5 text-secondary\">\n            {subTitle}\n          </div>\n        )}\n      </div>\n\n      <div className={clsx(showChildrenPadding && \"px-5 sm:px-[30px]\")}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileContainer\n"],"names":["ChainIcons","BTC","ETH","IC","ActivityTableRow","action","asset","from","chain","timestamp","to","id","onCopy","useCallback","text","toast","navigator","clipboard","writeText","className","format","Date","type","amount","currency","src","preview","name","onClick","truncateString","ActivityTableGroup","date","rows","groupIndex","getRowId","row","network","getTime","replace","map","i","key","ActivityClass","Cache","connectorCache","ttl","constructor","config","this","getTokenConfig","getBlockchain","getIdentity","authState","delegationIdentity","mapActivitiesToRows","activities","activity","async","getActivities","groupedById","profile","getProfile","accounts","getAccounts","principals","fetchPrincipals","BigInt","anchor","wallet","RootWallet","reduce","groupedAccounts","principal","account","domain","push","loadProfileFromLocalStorage","fetchProfile","extendWithFixedAccounts","fetchAccounts","getApplications","filter","app","isNftStorage","applicationToAccount","acc","find","a","accountId","fetchApplications","btcActivityConnector","identity","BtcAsset","getActivityByUser","Chain","Blockchain","tokenStandard","TokenStandards","ethActivityConnector","ethereumAsset","ethGoerliActivityConnector","ethereumGoerliAsset","polygonMumbaiActivityConnector","polygonMumbaiAsset","polygonActivityConnector","polygonAsset","camelizeKeys","obj","Array","isArray","v","Object","keys","result","camelCase","mapToTransactionHistory","response","json","then","data","totalCount","transactions","transaction","blockIdentifier","metadata","transactionIdentifier","operations","operation","value","Number","toString","getTransactionHistory","request","getRosettaRequest","principalToAddress","restCall","rosetta","IActivityAction","IActivityStatus","mapToActivity","tx","hash","Math","floor","address","transactionHash","abs","amountUSD","icActivityConnector","allPrincipals","getAllPrincipals","allAccounts","p","icpTransactions","Promise","all","current","accumulatedBlockIdentifier","newBlockIdentifiers","indexOf","length","filteredTransactions","getAllTransactionHistory","txs","includes","RECEIVED","SENT","flat","activityConnectors","getAllActivity","groups","dateObject","groupedByDate","entries","sort","b","groupActivityRowsByDate","values","connector","getActivitiesRows","e","console","error","isLoading","useSWR","pageTitle","showBackButton","tableHeader","group","index","title","subTitle","children","showChildrenPadding","clsx"],"sourceRoot":""}