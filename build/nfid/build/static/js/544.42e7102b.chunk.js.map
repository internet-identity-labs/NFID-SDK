{"version":3,"file":"static/js/544.42e7102b.chunk.js","mappings":"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","sources":["integration/wallet/hooks/use-wallet-delegation.ts","integration/wallet/hooks/use-transfer.ts","ui/pages/request-transfer/index.tsx","apps/identity-manager/request-transfer/index.tsx","state/machines/wallet/request-transfer.ts","coordination/wallet/request-transfer.tsx","integration/identity-manager/account/utils.ts","features/fungable-token/accumulate-app-account-balances.ts","integration/rosetta/index.ts","integration/rosetta/get-exchange-rate.ts","features/fungable-token/icp/hooks/use-icp-exchange-rate.ts","ui/atoms/copy/copied.svg","ui/atoms/copy/copy.svg","ui/atoms/copy/index.tsx","ui/utils/use-timer.ts"],"sourcesContent":["import useSWR from \"swr\"\n\nimport { WALLET_SESSION_TTL_2_MIN_IN_NS } from \"@nfid/config\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\n\nexport const useWalletDelegation = (\n  userNumber?: number,\n  hostName?: string,\n  personaId?: string,\n) => {\n  console.debug(\"useWalletDelegation\", { userNumber })\n  return useSWR(\n    userNumber ? [userNumber, hostName, personaId] : null,\n    ([userNumber, hostName, personaId]) =>\n      getWalletDelegation(userNumber, hostName, personaId),\n    {\n      dedupingInterval: WALLET_SESSION_TTL_2_MIN_IN_NS / 2,\n      focusThrottleInterval: WALLET_SESSION_TTL_2_MIN_IN_NS / 2,\n    },\n  )\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport React from \"react\"\n\nimport { transfer as transferDIP20 } from \"@nfid/integration/token/dip-20\"\nimport { transfer as transferICP } from \"@nfid/integration/token/icp\"\n\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\n\nimport { TokenTransferConfig } from \".\"\nimport { useWalletDelegation } from \"./use-wallet-delegation\"\n\ninterface Transfer {\n  to: string\n  amount: string\n  delegationIdentity: DelegationIdentity\n  canisterId?: string\n  transformAmount: (amount: string) => number\n}\n\nconst handleTokenTransfer = async ({\n  to,\n  amount,\n  delegationIdentity,\n  transformAmount,\n  canisterId,\n}: Transfer) => {\n  if (canisterId) {\n    return await transferDIP20({\n      canisterId,\n      amount: transformAmount(amount),\n      to,\n      sourceIdentity: delegationIdentity,\n    })\n  }\n  return await transferICP(transformAmount(amount), to, delegationIdentity)\n}\n\nexport const useTransfer = ({\n  domain,\n  accountId,\n  tokenCanisterId,\n  transformAmount,\n}: TokenTransferConfig) => {\n  const { profile } = useProfile()\n  const { data: walletDelegation, isValidating: isValidatingWalletDelegation } =\n    useWalletDelegation(profile?.anchor, domain, accountId)\n\n  const queuedTransfer = React.useRef<{\n    to: string\n    amount: string\n    domain?: string\n    accountId?: string\n    rejectTransfer?: (reason: any) => void\n    executeTransfer?: (\n      walletDelegation: DelegationIdentity,\n      to: string,\n      amount: string,\n    ) => void\n  } | null>(null)\n\n  // This effect makes sure that we're resetting the queuedTransfer when\n  // domain or accountId are changing\n  React.useEffect(() => {\n    if (\n      queuedTransfer.current?.domain !== domain ||\n      queuedTransfer.current?.accountId !== accountId\n    ) {\n      queuedTransfer.current?.rejectTransfer &&\n        queuedTransfer.current.rejectTransfer(\n          \"domain or accountId has been changed\",\n        )\n      queuedTransfer.current = null\n    }\n  }, [domain, accountId])\n\n  // This effect calls the pending transfer when walletDelegations settles\n  // and the queued parameter domain and accountId matching there current values.\n  React.useEffect(() => {\n    if (queuedTransfer.current) {\n      const {\n        amount,\n        to,\n        executeTransfer,\n        domain: queuedDomain,\n        accountId: queuedAccountId,\n      } = queuedTransfer.current\n      if (\n        walletDelegation &&\n        executeTransfer &&\n        queuedDomain === domain &&\n        queuedAccountId === accountId\n      ) {\n        executeTransfer(walletDelegation, to, amount)\n        queuedTransfer.current = null\n      }\n    }\n  }, [accountId, domain, walletDelegation])\n\n  const handleTransfer = React.useCallback(\n    async (to: string, amount: string) => {\n      if (queuedTransfer.current) throw new Error(\"there is a pending transfer\")\n\n      return new Promise<bigint>((resolve, reject) => {\n        if (!walletDelegation) {\n          queuedTransfer.current = {\n            to,\n            amount,\n            domain,\n            accountId,\n            rejectTransfer: reject,\n            executeTransfer: (walletDelegation, to, amount) => {\n              handleTokenTransfer({\n                amount: amount,\n                to,\n                delegationIdentity: walletDelegation,\n                canisterId: tokenCanisterId,\n                transformAmount,\n              })\n                .then((value) => resolve(value))\n                .catch((reason) => reject(reason))\n            },\n          }\n        } else {\n          return handleTokenTransfer({\n            amount: amount,\n            to,\n            delegationIdentity: walletDelegation,\n            canisterId: tokenCanisterId,\n            transformAmount,\n          })\n            .then((value) => resolve(value))\n            .catch((reason) => reject(reason))\n        }\n      })\n    },\n    [accountId, domain, tokenCanisterId, transformAmount, walletDelegation],\n  )\n\n  console.debug(\"useTransfer\", { isValidatingWalletDelegation })\n  return {\n    isValidatingWalletDelegation,\n    transfer: handleTransfer,\n  }\n}\n","import clsx from \"clsx\"\n\nimport {\n  DropdownSelect,\n  IOption,\n  ApproveTemplate,\n  SDKStatusbar,\n} from \"@nfid-frontend/ui\"\nimport { WALLET_FEE } from \"@nfid/integration/token/icp\"\n\nimport { Copy } from \"frontend/ui/atoms/copy\"\n\nexport interface IRequestTransferPage {\n  applicationName: string\n  applicationLogo: string\n  amountICP: number\n  amountUSD: string\n  walletOptions: IOption[]\n  selectedWallets: string[]\n  setSelectedWallets: (value: string[]) => void\n  onReject: () => void\n  onApprove: () => void\n  isLoading?: boolean\n  destinationAddress: string\n  successTimer: number\n  isInsufficientFunds: boolean\n}\n\nexport const RequestTransferPage: React.FC<IRequestTransferPage> = ({\n  applicationName,\n  applicationLogo,\n  amountICP,\n  amountUSD,\n  walletOptions,\n  selectedWallets,\n  setSelectedWallets,\n  onReject,\n  onApprove,\n  isLoading = false,\n  destinationAddress,\n  successTimer,\n  isInsufficientFunds,\n}) => {\n  return (\n    <ApproveTemplate\n      applicationName={applicationName}\n      applicationLogo={applicationLogo}\n      onReject={onReject}\n      onApprove={!isInsufficientFunds ? onApprove : () => {}}\n      isLoading={isLoading}\n      successTimer={successTimer}\n    >\n      <SDKStatusbar isLoading={isLoading} isSuccess={successTimer !== -1}>\n        <div className=\"flex items-center justify-between w-full\">\n          <p className=\"text-sm font-semibold\">Transfer</p>\n          <p className=\"text-sm\">\n            {amountICP}\n            {\" ICP \"}\n            <span className=\"text-xs text-secondary\">≈ {amountUSD} </span>\n          </p>\n        </div>\n      </SDKStatusbar>\n      <p className=\"mb-1 text-sm\">From</p>\n      <DropdownSelect\n        disabled={isLoading || successTimer !== -1}\n        isSearch\n        isMultiselect={false}\n        options={walletOptions}\n        selectedValues={selectedWallets}\n        setSelectedValues={setSelectedWallets}\n        firstSelected\n        errorText={isInsufficientFunds ? \"Insufficient funds\" : undefined}\n      />\n      <p className=\"mt-2 mb-1 text-sm\">To</p>\n      <div\n        className={clsx(\n          \"h-10 text-secondary bg-gray-100 rounded-md\",\n          \"flex items-center justify-between px-2.5 space-x-2\",\n        )}\n        id=\"account-id\"\n      >\n        <p className=\"overflow-hidden text-sm text-ellipsis whitespace-nowrap\">\n          {destinationAddress}\n        </p>\n        <Copy\n          className=\"w-[18px] h-[18px] flex-shrink-0\"\n          value={destinationAddress}\n        />\n      </div>\n      {/* FIXME: support dip-20 */}\n      <div className=\"text-xs text-secondary mt-2.5\">\n        Transfer fee: {WALLET_FEE} ICP\n      </div>\n    </ApproveTemplate>\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport { useMemo, useState } from \"react\"\nimport { toast } from \"react-toastify\"\n\nimport { IOption } from \"@nfid-frontend/ui\"\nimport { isHex } from \"@nfid-frontend/utils\"\nimport { toPresentation } from \"@nfid/integration/token/icp\"\n\nimport { toUSD } from \"frontend/features/fungable-token/accumulate-app-account-balances\"\nimport { useICPExchangeRate } from \"frontend/features/fungable-token/icp/hooks/use-icp-exchange-rate\"\nimport { useAllWallets } from \"frontend/integration/wallet/hooks/use-all-wallets\"\nimport { useTransfer } from \"frontend/integration/wallet/hooks/use-transfer\"\nimport { stringICPtoE8s } from \"frontend/integration/wallet/utils\"\nimport { RequestTransferPage } from \"frontend/ui/pages/request-transfer\"\nimport { useTimer } from \"frontend/ui/utils/use-timer\"\n\ninterface IRequestTransfer {\n  applicationName?: string\n  applicationLogo?: string\n  amountICP: number\n  onSuccess: (blockIndex: bigint) => void\n  to: string\n}\n\nexport const RequestTransfer = ({\n  amountICP,\n  applicationLogo,\n  applicationName,\n  onSuccess,\n  to,\n}: IRequestTransfer) => {\n  const [selectedWallets, setSelectedWallets] = useState<string[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const { counter, setCounter } = useTimer({ defaultCounter: -1 })\n\n  const { wallets } = useAllWallets()\n  const { exchangeRate } = useICPExchangeRate()\n\n  const selectedWallet = useMemo(() => {\n    return wallets?.find(\n      (wallet) => wallet.principal.toString() === selectedWallets[0],\n    )\n  }, [selectedWallets, wallets])\n\n  // FIXME: support dip-20\n  const { transfer } = useTransfer({\n    accountId: selectedWallet?.accountId,\n    domain: selectedWallet?.domain,\n    transformAmount: stringICPtoE8s,\n  })\n\n  const walletsOptions: IOption[] | undefined = useMemo(() => {\n    return (\n      wallets\n        // Added filtering there to avoid changes which should require a lot of re-testing\n        ?.filter((wallet) => !wallet.isVaultWallet)\n        ?.map((wallet) => ({\n          label: wallet.label ?? \"\",\n          value: wallet.principal?.toText() ?? \"\",\n          // FIXME: support dip-20\n          afterLabel: toPresentation(wallet.balance[\"ICP\"]),\n          disabled: Number(wallet.balance) <= Number(amountICP),\n        }))\n        .sort((a, b) => Number(a?.disabled) - Number(b?.disabled))\n    )\n  }, [amountICP, wallets])\n\n  const amountUSD = useMemo(() => {\n    if (!exchangeRate) return \"0\"\n    return toUSD(amountICP, exchangeRate)\n  }, [amountICP, exchangeRate])\n\n  const onApprove = async () => {\n    let validAddress = isHex(to)\n      ? to\n      : principalToAddress(Principal.fromText(to) as any)\n\n    try {\n      setIsLoading(true)\n      const blockIndex = await transfer(validAddress, String(amountICP))\n      setCounter(5)\n      setTimeout(() => {\n        return onSuccess(blockIndex)\n      }, 5000)\n    } catch (e: any) {\n      if (e.message === \"InsufficientFunds\")\n        toast.error(\"You don't have enough ICP for this transaction\", {\n          toastId: \"insufficientFundsError\",\n        })\n      else\n        toast.error(\"Unexpected error: The transaction has been cancelled\", {\n          toastId: \"unexpectedTransferError\",\n        })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const isInsufficientFunds = useMemo(() => {\n    if (!walletsOptions?.length) return false\n    return !walletsOptions?.filter((option) => option.disabled !== true).length\n  }, [walletsOptions])\n\n  return (\n    <RequestTransferPage\n      amountICP={amountICP}\n      amountUSD={amountUSD}\n      walletOptions={walletsOptions ?? []}\n      selectedWallets={selectedWallets}\n      setSelectedWallets={setSelectedWallets}\n      onReject={() => window.close()}\n      onApprove={onApprove}\n      isLoading={isLoading}\n      applicationLogo={applicationLogo ?? \"\"}\n      applicationName={applicationName ?? \"\"}\n      destinationAddress={to}\n      successTimer={counter}\n      isInsufficientFunds={isInsufficientFunds}\n    />\n  )\n}\n","import { ActorRefFrom, assign, createMachine } from \"xstate\"\n\nimport {\n  registerRequestTransferHandler,\n  RequestTransferParams,\n} from \"@nfid/wallet\"\n\nimport { AuthSession } from \"frontend/state/authentication\"\nimport { AuthorizingAppMeta } from \"frontend/state/authorization\"\nimport AuthenticationMachine from \"frontend/state/machines/authentication/authentication\"\n\n// State local to the machine.\ninterface Context {\n  appMeta?: AuthorizingAppMeta\n  authSession?: AuthSession\n  requestTransfer?: RequestTransferParams\n  amount?: number\n  to?: string\n  isLoading?: boolean\n  blockHeight?: bigint\n}\n\nlet _blockHeight: number | null = null\n\n// Definition of events usable in the machine.\ntype Events =\n  | {\n      type: \"done.invoke.AuthenticationMachine\"\n      data: AuthSession\n    }\n  | {\n      type: \"done.invoke.registerRequestTransferHandler\"\n      data: RequestTransferParams\n    }\n  | { type: \"CONSENT\" }\n  | { type: \"CONFIRM\"; blockHeight?: bigint }\n  | { type: \"REJECT\" }\n  | { type: \"END\" }\n\n// The machine. Install xstate vscode extension for best results.\n/** @xstate-layout N4IgpgJg5mDOIC5QAUAWB7AdmAcgVwFsAjMAJwGFTIxMAXASwEMAbZU9AN3ojIDoAlMIwgBPAMSJQAB3Sx6DLJJAAPRAEYAHGt4AWNQHYtAViMAGHRv2mATABoQI9UYCcO3mYDMpo-o-PNvjoAvkH2aFi4hCQUVDx0TKzsXDykvACCeLSoNAwAxoy0YGIQEbz0mBzoANZg6ZnZ8fkKmACyjLmo5WBKMnLNSqoIHgBs1rymw0Y6HnrOGhoeGs72jggGBrwapmomaqb6JjrbIWEY2PjEZJTU8SxsnNx8AOJgtOHnUc+vAKLK9LAMTBQd6RS6kYqlcqVGq8ABmrw6IIu0R6snk9EUSBUiD0Gl4gQ8Oxcw1Gww8RhWiGspg0Yw0OmsHl8RnJTI0wxOICRnxiNwYdySj1SLzeZ1B0V43zoZG5YLE3xwABVvvwAPrIAASAHkcN9VTgAKotABCKtRfQxmAGOI8Hk2fn0zn01mcpgmrkpCGsemGvGGmnpajUzhdk05sui1zi-MSDxSvBFEb4ADUyPRYSIk+CStgyhVqrUOGmM1mAMpkLi5bpY3rozGgQZ+ZzuJ3DN1LbY+fSe6zMzZGSwWdlePwc0JcsXIq6xHIJe7JL6iiJT1Kp0jpzOTnliMjsVJSZgFWHoUgEXhF9clrdg8ukSvV6Ro-pYwZqHRuPx6czDWnmObDHsLDtd9TGcIx-QOPYNHDa9IxnW5YwXYVXizSVpVIUsWlLRUC0wMRyA1NIcCePVNR1PVDRNM0ayfS1rTWbRnC8XtJkdNRqSDDQe2GfR9D9SxrB8Ix2JDXwYOXHko1nAU40XVCpUKDCsJwmo8IVZU1Uw0tVUVLUAGkFXNOsrRfHFhM2fQ9m2HjaQHZYHCpZwf10LRTBHIxvV7aDxyzKSEPnIUExQ2C+AUsgtJUmgxH4b5SwVAARIznwbKkpnxBl-F8QTvQmLiHK9fQdCMdwNDMXw1CZYkPHEj4wT8mMAvjRMQtXFhuAKMAItwiFcyhAtz2LERSwIWBb3vJK6NMhB6VMdwZi2LZhlcFkdB7fRRk2Ax5msLR2SDIwavFac+TnQUmuCiSwV4ZM2ogDqutUndSD3XgDyPE8zwvDdhtGit6CrCb62xL1rG0eYbDA70RjfHQAPyl1ePxQlvBcZ0eLmQ6V3q07ZOQpdauiHragBDreF8+CGrOuSWsBkyUoQOZtEmW09jbRYys9AxGV4W0HSc6xBJMA7OUwdAeHgLFyZOmSkIEIRRFp+iAFo9nGVndtAgcXRmTnwLtN0vAZLRYcdaxMckimcdljIslnJoHxAWtkuBrxZrbPWyRMb93118yDZR3saUEsdTkuuDpcQwLmrDxdfn+QFgRpmiLSBxtYd4ZbA6WSYnPs1Zg00XgBZMKwQymNyQ4nGPeWjK2o4ugnQvQrNFam99m0seY7Nmck8tWRlrF9H8jltFx2eqnyWuxmX6-xo7V0Glvk+M+iZl9TOrGz1HzB7cDfTUEkmPmZwnKWc26stmfzrnlc0MUh6aFb+nYbcL2luDKZ2Rsbt4csO0BaWK6L8zonTn3DrXK+1Nq7XVuvdZSuEn4ux0M2f0Hhg7bF4vtVa+UvBLTmhMaky0eLrTAcdCBkdr7yUwBARBr5QL7y3gyEw3oGQ9gqs2cCbkQy2mdDoMSk9q7TwoVAxupBaGIBVmMd0zoZjUksHMWknN6S+mLuBEMewPLC1DqIoRjU+BsDgDkIR4iGbeAzoPXibpvBHF7LrDang3KCxGHMYIAidGX2EWI5eztBhKxGOMJaMiGQ0kdPMTmfDmz+y0NSN0jJXEhCAA */\nconst RequestTransferMachine = createMachine(\n  {\n    context: {} as Context,\n    tsTypes: {} as import(\"./request-transfer.typegen\").Typegen0,\n    schema: { events: {} as Events },\n    id: \"RequestTransferProvider\",\n    initial: \"Ready\",\n    states: {\n      Ready: {\n        invoke: {\n          src: \"registerRequestTransferHandler\",\n          id: \"registerRequestTransferHandler\",\n          onDone: {\n            target: \"Authenticate\",\n            actions: \"assignRequestTransferRequest\",\n          },\n        },\n      },\n      Authenticate: {\n        invoke: {\n          src: \"AuthenticationMachine\",\n          id: \"AuthenticationMachine\",\n          onDone: [{ target: \"RequestTransfer\", actions: \"assignAuthSession\" }],\n          data: (context) => ({\n            appMeta: context.appMeta,\n          }),\n        },\n      },\n      RequestTransfer: {\n        on: {\n          CONFIRM: { target: \"Confirm\", actions: \"assignBlockHeight\" },\n        },\n      },\n      Confirm: {\n        onEntry: \"setBlockHeight\",\n      },\n      End: {\n        type: \"final\",\n      },\n    },\n  },\n  {\n    actions: {\n      assignAuthSession: assign((_, event) => ({\n        authSession: event.data,\n      })),\n      assignRequestTransferRequest: assign({\n        requestTransfer: (_, event) => event.data,\n      }),\n      setBlockHeight: ({ blockHeight }) => {\n        _blockHeight = Number(blockHeight)\n      },\n      assignBlockHeight: assign({\n        blockHeight: (_, event) => event.blockHeight,\n      }),\n    },\n    services: {\n      async registerRequestTransferHandler() {\n        const params = await registerRequestTransferHandler(() => {\n          return new Promise((resolve) => {\n            setInterval(() => {\n              _blockHeight &&\n                resolve({\n                  status: \"SUCCESS\",\n                  height: _blockHeight,\n                })\n            }, 1000)\n          })\n        })\n        console.debug(\"registerRequestTransferHandler\", { params })\n        return params\n      },\n      AuthenticationMachine,\n    },\n    guards: {},\n  },\n)\n\nexport default RequestTransferMachine\n\nexport type RequestTransferMachineActor = ActorRefFrom<\n  typeof RequestTransferMachine\n>\nexport type RequestTransferMachineType = typeof RequestTransferMachine\n","import { useMachine } from \"@xstate/react\"\nimport { useEffect } from \"react\"\nimport { useSearchParams } from \"react-router-dom\"\n\nimport { ScreenResponsive } from \"@nfid-frontend/ui\"\n\nimport { RequestTransfer } from \"frontend/apps/identity-manager/request-transfer\"\nimport { AuthenticationActor } from \"frontend/state/machines/authentication/authentication\"\nimport RequestTransferMachine, {\n  RequestTransferMachineType,\n} from \"frontend/state/machines/wallet/request-transfer\"\nimport { BlurredLoader } from \"frontend/ui/molecules/blurred-loader\"\n\nimport { AuthenticationCoordinator } from \"../authentication\"\n\ninterface Props {\n  machine?: RequestTransferMachineType\n}\n\nexport default function RequestTransferCoordinator({ machine }: Props) {\n  const [searchParams] = useSearchParams()\n  const applicationName = searchParams.get(\"applicationName\")\n  const applicationLogo = searchParams.get(\"applicationLogo\")\n\n  const [state, send] = useMachine(\n    machine ||\n      RequestTransferMachine.withConfig(\n        {},\n        {\n          appMeta: { name: applicationName || \"\", logo: applicationLogo || \"\" },\n        },\n      ),\n  )\n\n  useEffect(() => {\n    console.debug(\"RequestTransferCoordinator\", { state: state.value })\n  }, [state])\n\n  switch (true) {\n    case state.matches(\"Ready\"):\n      return (\n        <BlurredLoader\n          isLoading\n          loadingMessage={`Connecting to ${\n            state.context.appMeta?.name ?? \"the application\"\n          }`}\n        />\n      )\n    case state.matches(\"Authenticate\"):\n      return (\n        <ScreenResponsive>\n          <AuthenticationCoordinator\n            actor={state.children.AuthenticationMachine as AuthenticationActor}\n            enforceSingleAccountScreen\n          />\n        </ScreenResponsive>\n      )\n    case state.matches(\"RequestTransfer\"):\n      return (\n        <RequestTransfer\n          applicationName={searchParams.get(\"applicationName\") ?? \"\"}\n          applicationLogo={searchParams.get(\"applicationLogo\") ?? \"\"}\n          to={state.context.requestTransfer?.to ?? \"\"}\n          amountICP={state.context.requestTransfer?.amount ?? 0}\n          onSuccess={(blockIndex) => {\n            send({ type: \"CONFIRM\", blockHeight: blockIndex })\n          }}\n        />\n      )\n    default:\n      console.debug(\n        `PhoneCredentialCoordinator rendering loader, unknown state: ${JSON.stringify(\n          state.value,\n        )}`,\n      )\n      return <BlurredLoader isLoading />\n  }\n}\n","import { Account, Application } from \"@nfid/integration\"\n\nexport const isDefaultLabel = (a: string) =>\n  /^Account #\\d*$/.test(a) || a === undefined || a === \"\"\n\nexport const getWalletName = (account: Account, application?: Application) => {\n  const accountLabel = isDefaultLabel(account.label)\n    ? `account ${Number(account.accountId) + 1}`\n    : account.label\n\n  const applicationName =\n    application?.name || account.alias?.[0] || account.domain\n\n  return `${applicationName} ${accountLabel}`\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport {\n  AppBalance,\n  TokenBalanceSheet,\n} from \"packages/integration/src/lib/asset/types\"\n\nimport { Application, Balance } from \"@nfid/integration\"\n\nimport { AccountBalance } from \"frontend/features/fungable-token/fetch-balances\"\nimport { isDefaultLabel } from \"frontend/integration/identity-manager/account/utils\"\nimport {\n  e8sICPToString,\n  stringICPtoE8s,\n} from \"frontend/integration/wallet/utils\"\n\nexport const sumE8sICPString = (a: string, b: string) => {\n  return e8sICPToString(stringICPtoE8s(a) + stringICPtoE8s(b))\n}\n\nexport const toUSD = (value: number, exchangeRate: number) =>\n  exchangeRate !== 0 ? `$${(exchangeRate * value).toFixed(2)}` : ``\n\ntype MapApplicationBalanceArgs = {\n  toPresentation: (value?: bigint) => number\n  appName: string\n  currentAppTotalBalance: Balance\n  token: string\n  accountBalance: AccountBalance\n  exchangeRate: number\n  applicationMatch?: Application\n  currentApp?: AppBalance\n  isExplicitlyIncluded?: boolean\n}\n\nfunction mapApplicationBalance({\n  toPresentation,\n  appName,\n  currentAppTotalBalance,\n  token,\n  accountBalance,\n  exchangeRate,\n  applicationMatch,\n  currentApp,\n  isExplicitlyIncluded,\n}: MapApplicationBalanceArgs): AppBalance {\n  return {\n    icon: applicationMatch?.icon,\n    appName: appName,\n    tokenBalance: currentAppTotalBalance,\n    accounts: [\n      ...(currentApp?.accounts ?? []),\n      ...(accountBalance.balance[token] > 0 || isExplicitlyIncluded\n        ? [\n            {\n              accountName:\n                isDefaultLabel(accountBalance.account.label) ||\n                !accountBalance.account.label\n                  ? `account ${parseInt(accountBalance.account.accountId) + 1}`\n                  : accountBalance.account.label,\n              principalId: accountBalance.principalId,\n              address: principalToAddress(\n                Principal.fromText(accountBalance.principalId),\n              ),\n              tokenBalance: accountBalance.balance[token],\n              usdBalance: toUSD(\n                toPresentation(accountBalance.balance[token]),\n                exchangeRate,\n              ),\n            },\n          ]\n        : []),\n    ].sort((a, b) => a.accountName.localeCompare(b.accountName)),\n  }\n}\n\ntype ReduceRawToAppAccountBalanceArgs = {\n  toPresentation: (value?: bigint) => number\n  balances: AccountBalance[]\n  applications?: Application[]\n  exchangeRate: number\n  excludeEmpty: boolean\n  includeEmptyApps: string[]\n  label: string\n  token: string\n  icon: string\n}\n/**\n * Returns the balance sheet for all applications and their accounts\n *\n * @param balances - balance of a single account\n * @param applications - list of applications from identity manager\n * @param exchangeRate - exchange rate of Token to USD\n * @param excludeEmpty - if true, exclude applications with no balance\n * @param includeEmptyApps - include apps with given appName or domain even if their balance is 0\n */\nexport const accumulateAppAccountBalance = ({\n  toPresentation,\n  balances,\n  applications = [],\n  exchangeRate,\n  excludeEmpty,\n  includeEmptyApps,\n  label,\n  token,\n  icon,\n}: ReduceRawToAppAccountBalanceArgs): TokenBalanceSheet => {\n  return balances.reduce<TokenBalanceSheet>(\n    (acc, rawBalance) => {\n      const applicationMatch: Application | undefined = applications.find(\n        (a) => a.domain === rawBalance.account.domain,\n      )\n\n      const appName = applicationMatch\n        ? applicationMatch.name\n        : rawBalance.account.domain\n\n      const currentApp: AppBalance | undefined = acc.applications[appName]\n\n      const totalBalanceValue = acc.tokenBalance + rawBalance.balance[acc.token]\n\n      const currentAppTotalBalance =\n        (acc.applications[appName]?.tokenBalance || BigInt(0)) +\n        rawBalance.balance[acc.token]\n\n      const isExplicitlyIncluded =\n        includeEmptyApps.includes(applicationMatch?.domain || \"\") ||\n        includeEmptyApps.includes(applicationMatch?.name || \"\")\n\n      if (\n        excludeEmpty &&\n        !isExplicitlyIncluded &&\n        currentAppTotalBalance === BigInt(0)\n      )\n        return acc\n\n      return {\n        ...acc,\n        icon: acc.icon,\n        tokenBalance: totalBalanceValue,\n        usdBalance: toUSD(toPresentation(totalBalanceValue), exchangeRate),\n        applications: {\n          ...acc.applications,\n          [appName]: mapApplicationBalance({\n            toPresentation,\n            appName,\n            currentAppTotalBalance,\n            token: acc.token,\n            accountBalance: rawBalance,\n            exchangeRate,\n            applicationMatch,\n            currentApp,\n            isExplicitlyIncluded,\n          }),\n        },\n      }\n    },\n    {\n      label,\n      token,\n      icon,\n      tokenBalance: BigInt(0),\n      usdBalance: \"0\",\n      applications: {},\n    },\n  )\n}\n","export const converter = `https://free.currconv.com/api/v7/convert?q=XDR_USD&compact=ultra&apiKey=${\n  CURRCONV_TOKEN ?? \"df6440fc0578491bb13eb2088c4f60c7\"\n}`\n","import { cyclesMinter, restCall } from \"@nfid/integration\"\n\nimport { XdrUsd } from \"frontend/integration/rosetta/rosetta_interface\"\n\nimport { converter } from \"./index\"\n\nexport async function mapToXdrUsd(response: Response): Promise<XdrUsd> {\n  return response.json().then((data) => data as XdrUsd)\n}\n\nexport async function getExchangeRate(): Promise<number> {\n  let xdrToIcp = await cyclesMinter\n    .get_icp_xdr_conversion_rate()\n    .then((x) => x.data.xdr_permyriad_per_icp)\n    .catch((e) => {\n      throw Error(`CyclesMinter failed!: ${e}`, e)\n    })\n  let xdrToUsd: XdrUsd = await restCall(\"GET\", converter)\n    .then(mapToXdrUsd)\n    .catch((e) => {\n      throw Error(`free.currconv.com failed!: ${e}`, e)\n    })\n  return (parseFloat(xdrToUsd.XDR_USD) * Number(xdrToIcp)) / 10000\n}\n","import useSWR from \"swr\"\n\nimport { getExchangeRate } from \"frontend/integration/rosetta/get-exchange-rate\"\n\nexport const useICPExchangeRate = () => {\n  const { data: exchangeRate, ...rest } = useSWR(\n    \"walletExchangeRate\",\n    getExchangeRate,\n    {\n      dedupingInterval: 60_000 * 60,\n      focusThrottleInterval: 60_000 * 60,\n      refreshInterval: 60_000 * 60,\n    },\n  )\n  return {\n    exchangeRate,\n    ...rest,\n  }\n}\n","var _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCopied(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_26143_35839)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.6296 7H8.36986C7.61331 7 7 7.62175 7 8.38871L7.00054 15.6113C7.00054 16.3783 7.61384 17 8.3704 17L15.6301 17C16.3867 17 17 16.3783 17 15.6113L16.9997 14\",\n    stroke: \"#10B981\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10 11.5L12.3028 13.6622C12.5023 13.8495 12.8152 13.8417 13.0051 13.6447L17 9.5\",\n    stroke: \"#10B981\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.5 11.4993H2.66667C2.22464 11.4993 1.80072 11.3238 1.48816 11.0112C1.17559 10.6986 1 10.2747 1 9.83268V2.66667C1 2.22464 1.17559 1.80072 1.48816 1.48816C1.80072 1.17559 2.22464 1 2.66667 1L9.83268 1C10.2747 1 10.6986 1.17559 11.0112 1.48816C11.3238 1.80072 11.4993 2.22464 11.4993 2.66667V3.5\",\n    stroke: \"#10B981\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_26143_35839\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 18,\n    height: 18,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCopied);\nexport default __webpack_public_path__ + \"static/media/copied.7db236d4ed9a8d82463d41f442395067.svg\";\nexport { ForwardRef as ReactComponent };","var _g, _defs;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCopy(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 18,\n    viewBox: \"0 0 18 18\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_399_379)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.6296 7H8.36986C7.61331 7 7 7.62175 7 8.38871L7.00054 15.6113C7.00054 16.3783 7.61384 17 8.3704 17L15.6301 17C16.3867 17 17 16.3783 17 15.6113L16.9995 8.38871C16.9995 7.62175 16.3862 7 15.6296 7Z\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.5 11.4993H2.66667C2.22464 11.4993 1.80072 11.3238 1.48816 11.0112C1.17559 10.6986 1 10.2747 1 9.83268V2.66667C1 2.22464 1.17559 1.80072 1.48816 1.48816C1.80072 1.17559 2.22464 1 2.66667 1L9.83268 1C10.2747 1 10.6986 1.17559 11.0112 1.48816C11.3238 1.80072 11.4993 2.22464 11.4993 2.66667V3.5\",\n    stroke: \"black\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_399_379\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 18,\n    height: 18,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCopy);\nexport default __webpack_public_path__ + \"static/media/copy.fa74bb78f3023163889b69dafbaee228.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { Image } from \"@nfid-frontend/ui\"\nimport { Tooltip } from \"@nfid-frontend/ui\"\n\nimport { ElementProps } from \"frontend/types/react\"\n\nimport CopiedIcon from \"./copied.svg\"\nimport CopyIcon from \"./copy.svg\"\n\ninterface ICopy extends ElementProps<HTMLDivElement> {\n  value: string\n}\n\nexport const Copy: React.FC<ICopy> = ({ value, className }) => {\n  const [copied, setCopied] = React.useState(false)\n\n  const copyToClipboard = React.useCallback(() => {\n    setCopied(true)\n    navigator.clipboard.writeText(value)\n    setTimeout(() => {\n      setCopied(false)\n    }, 2000)\n  }, [value])\n\n  return (\n    <div\n      className={clsx(\n        !copied && \"hover:opacity-50 cursor-pointer transition-opacity\",\n        className,\n      )}\n    >\n      <Tooltip tip=\"Copy\">\n        <Image\n          className=\"w-full\"\n          onClick={copyToClipboard}\n          src={copied ? CopiedIcon : CopyIcon}\n          alt=\"copy\"\n        />\n      </Tooltip>\n    </div>\n  )\n}\n","import React from \"react\"\n\ninterface useTimerProps {\n  defaultCounter: number\n  frequency?: number\n  loop?: boolean\n  onElapsed?: () => void\n}\n\nexport const useTimer = ({\n  defaultCounter,\n  loop,\n  frequency = 1000,\n  onElapsed,\n}: useTimerProps) => {\n  const [counter, setCounter] = React.useState(defaultCounter)\n  const timer = React.useRef<NodeJS.Timer>()\n  const [elapsed, setElapsed] = React.useState(false)\n\n  const handleInterval = React.useCallback(() => {\n    if (counter > 0) {\n      setCounter(counter - 1)\n    }\n\n    if (counter === 0) {\n      setElapsed(true)\n      onElapsed && onElapsed()\n      clearInterval(Number(timer.current))\n    }\n\n    if (counter === 0 && loop) {\n      setCounter(defaultCounter)\n      timer.current = setInterval(handleInterval, frequency)\n      setElapsed(false)\n    }\n  }, [counter, defaultCounter, frequency, loop, onElapsed])\n\n  React.useEffect(() => {\n    timer.current = setInterval(handleInterval, frequency)\n    return () => clearInterval(Number(timer.current))\n  }, [frequency, handleInterval])\n\n  return { elapsed, setCounter, counter }\n}\n"],"names":["handleTokenTransfer","async","to","amount","delegationIdentity","transformAmount","canisterId","transferDIP20","sourceIdentity","transferICP","useTransfer","domain","accountId","tokenCanisterId","profile","useProfile","data","walletDelegation","isValidating","isValidatingWalletDelegation","userNumber","anchor","hostName","personaId","console","debug","useSWR","getWalletDelegation","dedupingInterval","WALLET_SESSION_TTL_2_MIN_IN_NS","focusThrottleInterval","queuedTransfer","React","current","rejectTransfer","executeTransfer","queuedDomain","queuedAccountId","handleTransfer","Error","Promise","resolve","reject","then","value","catch","reason","transfer","RequestTransferPage","applicationName","applicationLogo","amountICP","amountUSD","walletOptions","selectedWallets","setSelectedWallets","onReject","onApprove","isLoading","destinationAddress","successTimer","isInsufficientFunds","isSuccess","className","disabled","isSearch","isMultiselect","options","selectedValues","setSelectedValues","firstSelected","errorText","undefined","clsx","id","C","WALLET_FEE","RequestTransfer","onSuccess","useState","setIsLoading","counter","setCounter","useTimer","defaultCounter","wallets","useAllWallets","exchangeRate","useICPExchangeRate","selectedWallet","useMemo","find","wallet","principal","toString","stringICPtoE8s","walletsOptions","filter","isVaultWallet","map","label","toText","afterLabel","toPresentation","balance","Number","sort","a","b","toUSD","length","option","window","close","validAddress","isHex","principalToAddress","Principal","blockIndex","String","setTimeout","e","message","toast","toastId","_blockHeight","createMachine","context","tsTypes","schema","events","initial","states","Ready","invoke","src","onDone","target","actions","Authenticate","appMeta","on","CONFIRM","Confirm","onEntry","End","type","assignAuthSession","assign","_","event","authSession","assignRequestTransferRequest","requestTransfer","setBlockHeight","blockHeight","assignBlockHeight","services","params","registerRequestTransferHandler","setInterval","status","height","AuthenticationMachine","guards","RequestTransferCoordinator","machine","searchParams","useSearchParams","get","state","send","useMachine","RequestTransferMachine","name","logo","useEffect","matches","B","loadingMessage","actor","children","enforceSingleAccountScreen","JSON","stringify","isDefaultLabel","test","toFixed","mapApplicationBalance","appName","currentAppTotalBalance","token","accountBalance","applicationMatch","currentApp","isExplicitlyIncluded","icon","tokenBalance","accounts","accountName","account","parseInt","principalId","address","usdBalance","localeCompare","accumulateAppAccountBalance","balances","applications","excludeEmpty","includeEmptyApps","reduce","acc","rawBalance","totalBalanceValue","BigInt","includes","converter","CURRCONV_TOKEN","mapToXdrUsd","response","json","getExchangeRate","xdrToIcp","cyclesMinter","x","xdr_permyriad_per_icp","xdrToUsd","restCall","parseFloat","XDR_USD","rest","refreshInterval","Copy","copied","setCopied","copyToClipboard","navigator","clipboard","writeText","tip","onClick","CopiedIcon","CopyIcon","alt","loop","frequency","onElapsed","timer","elapsed","setElapsed","handleInterval","clearInterval"],"sourceRoot":""}