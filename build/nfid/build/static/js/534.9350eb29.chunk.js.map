{"version":3,"file":"static/js/534.9350eb29.chunk.js","mappings":"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","sources":["features/vaults/action-bar/index.tsx","features/vaults/hooks/use-vault-member.ts","features/vaults/hooks/use-vault.ts","features/vaults/services.ts","features/vaults/vaults-details/members-page/modal-add-member/index.tsx","features/vaults/vaults-details/members-page/modal-archive-member/index.tsx","features/vaults/vaults-details/members-page/modal-edit-member/index.tsx","features/vaults/vaults-details/members-page/table/table-header.tsx","features/vaults/vaults-details/members-page/table/table-row.tsx","features/vaults/vaults-details/members-page/table/index.tsx","features/vaults/vaults-details/members-page/index.tsx","features/vaults/hooks/use-vault-wallets.ts","features/vaults/hooks/use-vault-policies.ts","features/vaults/vaults-details/policies-page/info-tooltip.tsx","features/vaults/vaults-details/policies-page/modal-add-policy/index.tsx","features/vaults/vaults-details/policies-page/modal-archive-policy/index.tsx","features/vaults/vaults-details/policies-page/modal-edit-policy/index.tsx","features/vaults/vaults-details/policies-page/table/table-header.tsx","features/vaults/vaults-details/policies-page/table/table-row.tsx","features/vaults/vaults-details/policies-page/table/index.tsx","features/vaults/vaults-details/policies-page/index.tsx","features/vaults/hooks/use-vault-transactions.ts","features/vaults/vaults-details/transactions-page/modal-filters/index.tsx","features/vaults/vaults-details/transactions-page/table/table-header.tsx","features/vaults/vaults-details/transactions-page/table/index.tsx","features/vaults/vaults-details/transactions-page/index.tsx","features/vaults/vaults-details/wallets-page/modal-add-wallet/index.tsx","features/vaults/vaults-details/wallets-page/modal-archive-wallet/index.tsx","features/vaults/vaults-details/wallets-page/table/table-header.tsx","features/vaults/vaults-details/wallets-page/table/table-row.tsx","features/vaults/vaults-details/wallets-page/table/index.tsx","features/vaults/vaults-details/wallets-page/index.tsx","features/vaults/vaults-details/tabs.tsx","features/vaults/vaults-details/index.tsx","features/vaults/vaults-details/transactions-page/table/table-row.tsx","../../../packages/utils/src/lib/date.ts"],"sourcesContent":["import clsx from \"clsx\"\nimport React, { ChangeEvent } from \"react\"\n\nimport { IconCmpSearch, Input } from \"@nfid-frontend/ui\"\n\nexport interface VaultActionBarProps {\n  actionButtons: JSX.Element\n  onInputChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  onInputType?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport const VaultActionBar: React.FC<VaultActionBarProps> = ({\n  actionButtons,\n  onInputChange,\n  onInputType,\n}) => {\n  return (\n    <div\n      className={clsx(\n        \"flex items-center justify-between\",\n        \"bg-gray-50 p-5 rounded-t-xl sm:rounded-b-md\",\n      )}\n    >\n      <Input\n        placeholder=\"Search\"\n        icon={<IconCmpSearch className=\"w-4\" />}\n        onChange={onInputChange}\n        onKeyDown={onInputType}\n        className=\"sm:w-[350px]\"\n      />\n      {actionButtons}\n    </div>\n  )\n}\n","import { SignIdentity } from \"@dfinity/agent\"\nimport { principalToAddress } from \"ictool\"\nimport { useMemo } from \"react\"\n\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\n\nimport { useVaultDelegation } from \"./use-vault-delegation\"\n\nexport const useVaultMember = () => {\n  const { profile } = useProfile()\n  const {\n    data: UserIIDelegation,\n    isLoading,\n    isValidating,\n  } = useVaultDelegation(profile?.anchor)\n\n  const userAddress = useMemo(() => {\n    if (!UserIIDelegation) return \"\"\n\n    return principalToAddress(\n      UserIIDelegation.getPrincipal(),\n      Array(32).fill(1),\n    )\n  }, [UserIIDelegation])\n\n  return {\n    address: userAddress,\n    anchor: profile?.anchor,\n    identity: UserIIDelegation as SignIdentity,\n    isLoading: isValidating,\n    isReady: !isLoading,\n  }\n}\n","import { useMemo } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport useSWR from \"swr\"\n\nimport { VaultRole } from \"@nfid/integration\"\n\nimport { getVaultById } from \"../services\"\nimport { useVaultMember } from \"./use-vault-member\"\n\nexport const useVault = () => {\n  const { vaultId } = useParams()\n  const { address } = useVaultMember()\n\n  const {\n    data: vault,\n    isLoading,\n    isValidating,\n    mutate,\n  } = useSWR(vaultId ? `vault_${vaultId}` : null, () =>\n    getVaultById(vaultId ?? \"\"),\n  )\n\n  const isAdmin = useMemo(() => {\n    const vaultMember = vault?.members.find(\n      (member) => member.userId === address,\n    )\n\n    return vaultMember?.role === VaultRole.ADMIN\n  }, [address, vault?.members])\n\n  return {\n    isFetching: isLoading || isValidating,\n    refetch: mutate,\n    vault,\n    isAdmin,\n  }\n}\n","import { getVaults } from \"@nfid/integration\"\n\n/**\n * @params vaultId: string\n * @returns vault by id\n */\nexport const getVaultById = async (id: string) => {\n  const vaults = await getVaults()\n\n  return vaults.find((vault) => vault.id === BigInt(id))\n}\n","import clsx from \"clsx\"\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\n\nimport { IconCmpPlus, Input, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { ObjectState, storeMember, VaultRole } from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\nimport { useVaultMember } from \"frontend/features/vaults/hooks/use-vault-member\"\n\ninterface VaultCreateForm {\n  name: string\n  address: string\n}\n\nexport const VaultAddMember = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { vault, refetch } = useVault()\n  const { address: memberAddress } = useVaultMember()\n\n  const { register, handleSubmit, formState, resetField, reset } = useForm({\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n    },\n  })\n\n  const onAddMember = async ({ name, address }: VaultCreateForm) => {\n    if (!vault?.id) return\n\n    if (address === memberAddress) {\n      toast.warn(\n        \"You're trying to invite yourself to the vault. Try another address.\",\n      )\n      setIsModalOpen(false)\n      return resetField(\"address\")\n    }\n\n    try {\n      setIsLoading(true)\n      await storeMember({\n        memberAddress: address,\n        name: name,\n        vaultId: vault?.id,\n        role: VaultRole.MEMBER,\n        state: ObjectState.ACTIVE,\n      })\n      toast.success(`Member ${name} successfully added`)\n      reset()\n    } catch (e: any) {\n      toast.error(e.message)\n    } finally {\n      setIsLoading(false)\n      setIsModalOpen(false)\n      await refetch()\n    }\n  }\n\n  return (\n    <ModalAdvanced\n      large\n      title={\"Add member\"}\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", text: \"Cancel\" }}\n      primaryButton={{\n        type: \"primary\",\n        onClick: handleSubmit(onAddMember),\n        text: \"Add\",\n        id: \"add-member-button\",\n      }}\n      trigger={\n        <div\n          className={clsx(\n            \"flex items-center space-x-2 font-bold text-blue-600 cursor-pointer\",\n            \"hover:opacity-50 transition-opacity\",\n          )}\n          id=\"add-member-trigger\"\n        >\n          <IconCmpPlus className=\"w-4\" />\n          <span className=\"hidden text-sm sm:block\">Add member</span>\n        </div>\n      }\n    >\n      <div className=\"space-y-5\">\n        <Input\n          labelText=\"Name\"\n          errorText={formState.errors.name?.message}\n          {...register(\"name\", {\n            required: \"This field cannot be empty\",\n          })}\n        />\n        <Input\n          labelText=\"NFID address\"\n          errorText={formState.errors.address?.message}\n          {...register(\"address\", {\n            required: \"This field cannot be empty\",\n          })}\n        />\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import clsx from \"clsx\"\nimport React, { Dispatch, SetStateAction, useCallback, useState } from \"react\"\nimport { toast } from \"react-toastify\"\n\nimport { IconCmpArchive, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { ObjectState, storeMember, VaultMember } from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\n\ninterface VaultArchiveMemberProps {\n  isModalOpen: boolean\n  setIsModalOpen: Dispatch<SetStateAction<boolean>>\n  selectedMember?: VaultMember\n}\n\nexport const VaultArchiveMember: React.FC<VaultArchiveMemberProps> = ({\n  isModalOpen,\n  setIsModalOpen,\n  selectedMember,\n}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const { vault, refetch } = useVault()\n\n  const onArchiveMember = useCallback(async () => {\n    if (!selectedMember || !vault?.id) return\n\n    try {\n      setIsLoading(true)\n      await storeMember({\n        ...selectedMember,\n        vaultId: BigInt(vault.id),\n        memberAddress: selectedMember.userId,\n        name: selectedMember.name ?? \"\",\n        state: ObjectState.ARCHIVED,\n      })\n    } catch (e: any) {\n      toast.error(e.message)\n    } finally {\n      setIsLoading(false)\n      setIsModalOpen(false)\n      toast.success(\"Vault member archived\")\n      await refetch()\n    }\n  }, [refetch, selectedMember, setIsModalOpen, vault?.id])\n\n  return (\n    <ModalAdvanced\n      large\n      title=\"Archive member\"\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"red\",\n        text: \"Archive\",\n        onClick: onArchiveMember,\n      }}\n    >\n      <div className=\"flex items-start gap-5\">\n        <div\n          className={clsx(\n            \"w-16 h-16 flex items-center justify-center shrink-0\",\n            \"bg-gradient-to-br from-red-50 to-white rounded-3xl\",\n          )}\n        >\n          <IconCmpArchive className=\"text-red-500 w-7\" />\n        </div>\n        <p className=\"text-sm\">\n          This member will be excluded from this vault, and any pending\n          transactions requiring their approval will need to be resubmitted.\n          <br />\n          <br />\n          Archive <strong>{selectedMember?.name}</strong>?\n        </p>\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\n\nimport { Input, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { storeMember, VaultMember } from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\n\ninterface VaultMemberEditProps {\n  isModalOpen: boolean\n  setIsModalOpen: Dispatch<SetStateAction<boolean>>\n  selectedMember?: VaultMember\n}\n\ninterface VaultMemberEditForm {\n  name?: string\n  userId?: string\n}\n\nexport const VaultEditMember: React.FC<VaultMemberEditProps> = ({\n  isModalOpen,\n  setIsModalOpen,\n  selectedMember,\n}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const { vault, refetch } = useVault()\n\n  const { register, handleSubmit, formState, reset } = useForm({\n    defaultValues: useMemo(() => {\n      return {\n        name: selectedMember?.name,\n        userId: selectedMember?.userId,\n      }\n    }, [selectedMember?.name, selectedMember?.userId]),\n  })\n\n  useEffect(() => {\n    reset(selectedMember)\n  }, [reset, selectedMember])\n\n  const onMemberEdit = useCallback(\n    async (data: VaultMemberEditForm) => {\n      if (!selectedMember || !vault?.id) return\n\n      try {\n        setIsLoading(true)\n        await storeMember({\n          ...selectedMember,\n          vaultId: BigInt(vault.id),\n          memberAddress: selectedMember.userId,\n          name: data.name ?? \"\",\n        })\n      } catch (e: any) {\n        toast.error(e.message)\n      } finally {\n        setIsLoading(false)\n        setIsModalOpen(false)\n        toast.success(\"Vault member updated\")\n        await refetch()\n      }\n    },\n    [refetch, selectedMember, setIsModalOpen, vault?.id],\n  )\n\n  return (\n    <ModalAdvanced\n      large\n      title={\"Edit member\"}\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"primary\",\n        onClick: handleSubmit(onMemberEdit),\n        text: \"Save\",\n      }}\n    >\n      <Input\n        labelText=\"Name\"\n        errorText={formState.errors.name?.message}\n        {...register(\"name\", {\n          required: \"First name must not be blank\",\n        })}\n      />\n      <Input disabled labelText=\"NFID address\" {...register(\"userId\")} />\n    </ModalAdvanced>\n  )\n}\n","import { TableCell, TableRow } from \"@nfid-frontend/ui\"\n\nexport const VaultsMembersTableHeader = () => {\n  return (\n    <TableRow header>\n      <TableCell isLeft className=\"w-10\">\n        #\n      </TableCell>\n      <TableCell isLeft className=\"w-auto\">\n        Name\n      </TableCell>\n      <TableCell centered className=\"w-32\">\n        NFID address\n      </TableCell>\n      <TableCell centered className=\"w-32\">\n        Role\n      </TableCell>\n      <TableCell isRight className=\"w-10\" />\n    </TableRow>\n  )\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport {\n  IconCmpArchive,\n  IconCmpDots,\n  IconCmpPencil,\n  Popover,\n  PopoverTools,\n  TableCell,\n  TableRow,\n} from \"@nfid-frontend/ui\"\n\nimport { CenterEllipsis } from \"frontend/ui/atoms/center-ellipsis\"\n\nexport interface VaultsMembersTableRowProps {\n  name: string\n  address: string\n  role: string\n  index: number\n  isArchived: boolean\n  onEdit?: () => void\n  onArchive?: () => void\n  isAdmin?: boolean\n}\n\nexport const VaultsMembersTableRow: React.FC<VaultsMembersTableRowProps> = ({\n  name,\n  address,\n  role,\n  index,\n  onEdit,\n  onArchive,\n  isArchived,\n  isAdmin,\n}: VaultsMembersTableRowProps) => {\n  return (\n    <TableRow\n      className={clsx(isArchived && \"text-secondary pointer-events-none\")}\n      id={`member_${name}`}\n    >\n      <TableCell isLeft>{index}</TableCell>\n      <TableCell>{name}</TableCell>\n      <TableCell centered>\n        <CenterEllipsis value={address} leadingChars={9} trailingChars={3} />\n      </TableCell>\n      <TableCell centered>{role}</TableCell>\n      <TableCell isRight className=\"px-0\">\n        <Popover\n          align=\"end\"\n          trigger={\n            <IconCmpDots\n              className={clsx(\"w-full\", (isArchived || !isAdmin) && \"hidden\")}\n            />\n          }\n        >\n          <PopoverTools\n            items={[\n              {\n                icon: <IconCmpPencil />,\n                text: \"Edit\",\n                onClick: onEdit,\n              },\n              {\n                icon: <IconCmpArchive />,\n                text: \"Archive\",\n                onClick: onArchive,\n              },\n            ]}\n          />\n        </Popover>\n      </TableCell>\n    </TableRow>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport { Table } from \"@nfid-frontend/ui\"\nimport { ObjectState, VaultMember } from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\n\nimport { VaultArchiveMember } from \"../modal-archive-member\"\nimport { VaultEditMember } from \"../modal-edit-member\"\nimport { VaultsMembersTableHeader } from \"./table-header\"\nimport { VaultsMembersTableRow, VaultsMembersTableRowProps } from \"./table-row\"\n\nexport interface VaultsMembersTableProps {\n  members: VaultMember[]\n}\n\nexport const VaultsMembersTable: React.FC<VaultsMembersTableProps> = ({\n  members,\n}) => {\n  const [isEditModal, setIsEditModal] = useState(false)\n  const [isArchiveModal, setIsArchiveModal] = useState(false)\n  const [selectedMember, setSelectedMember] = useState<VaultMember>()\n  const { isAdmin } = useVault()\n\n  const membersRows: VaultsMembersTableRowProps[] = useMemo(() => {\n    return members.map((member, index) => ({\n      name: member.name ?? \"Unknown user\",\n      address: member.userId,\n      role: member.role,\n      index: index + 1,\n      isArchived: member.state === ObjectState.ARCHIVED,\n      isAdmin: isAdmin,\n    }))\n  }, [isAdmin, members])\n\n  const onModalOpen = useCallback(\n    (type: \"edit\" | \"archive\", memberId: string) => {\n      const member = members.find((member) => member.userId === memberId)\n      setSelectedMember(member)\n\n      if (type === \"edit\") setIsEditModal(true)\n      if (type === \"archive\") setIsArchiveModal(true)\n    },\n    [members],\n  )\n\n  return (\n    <>\n      <Table tableHeader={<VaultsMembersTableHeader />}>\n        {membersRows.map((member) => (\n          <VaultsMembersTableRow\n            {...member}\n            key={`vault_${member.address}`}\n            onEdit={() => onModalOpen(\"edit\", member.address)}\n            onArchive={() => onModalOpen(\"archive\", member.address)}\n          />\n        ))}\n      </Table>\n      <VaultEditMember\n        isModalOpen={isEditModal}\n        setIsModalOpen={setIsEditModal}\n        selectedMember={selectedMember}\n      />\n      <VaultArchiveMember\n        selectedMember={selectedMember}\n        isModalOpen={isArchiveModal}\n        setIsModalOpen={setIsArchiveModal}\n      />\n    </>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport { EmptyCard, IconCmpMembers } from \"@nfid-frontend/ui\"\nimport { VaultMember } from \"@nfid/integration\"\n\nimport { VaultActionBar } from \"../../action-bar\"\nimport { useVault } from \"../../hooks/use-vault\"\nimport { VaultAddMember } from \"./modal-add-member\"\nimport { VaultsMembersTable } from \"./table\"\n\ninterface VaultsMembersPageProps {}\n\nexport const VaultsMembersPage: React.FC<VaultsMembersPageProps> = () => {\n  const [searchFilter, setSearchFilter] = useState(\"\")\n  const { vault, isFetching, isAdmin } = useVault()\n\n  const filteredMembers: VaultMember[] = useMemo(() => {\n    if (!vault?.members) return []\n\n    return vault?.members\n      .filter((member) => !member.name || member.name?.includes(searchFilter))\n      .sort((a, b) => a.state.localeCompare(b.state))\n      .sort((a, b) => a.role.localeCompare(b.role))\n  }, [searchFilter, vault?.members])\n\n  const onFilterChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchFilter(e.target.value)\n    },\n    [],\n  )\n\n  return (\n    <div className=\"border border-gray-200 rounded-xl mt-[30px]\">\n      <VaultActionBar\n        onInputChange={onFilterChange}\n        actionButtons={isAdmin ? <VaultAddMember /> : <div />}\n      />\n      <div className=\"w-full px-5 overflow-x-auto\">\n        <VaultsMembersTable members={filteredMembers} />\n        {!filteredMembers.length && !isFetching && (\n          <EmptyCard\n            className=\"h-64\"\n            icon={<IconCmpMembers />}\n            description=\"Add and manage team member permissions and roles.\"\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","import { useParams } from \"react-router-dom\"\nimport useSWR from \"swr\"\n\nimport { getWallets } from \"@nfid/integration\"\n\nimport { fetchVaultWalletsBalances } from \"frontend/features/fungable-token/fetch-balances\"\n\nexport const useVaultWallets = () => {\n  const { vaultId } = useParams()\n\n  const {\n    data: wallets,\n    isLoading,\n    isValidating,\n    mutate,\n  } = useSWR(vaultId ? `vault_${vaultId}_wallets` : null, () =>\n    getWallets(BigInt(vaultId ?? \"\")),\n  )\n\n  const { data: walletsWithBalances, isValidating: isBalancesLoading } = useSWR(\n    wallets ? [wallets, `useVaultWallets`] : null,\n    async ([wallets]) => {\n      console.debug(\"useVaultWallets\", { wallets })\n      return await fetchVaultWalletsBalances(wallets)\n    },\n    { dedupingInterval: 30_000, refreshInterval: 60_000 },\n  )\n\n  return {\n    vaultId,\n    isFetching: isLoading || isValidating || isBalancesLoading,\n    refetch: mutate,\n    wallets: walletsWithBalances,\n  }\n}\n","import { useMemo } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport useSWR from \"swr\"\n\nimport { getPolicies } from \"@nfid/integration\"\n\nimport { useVaultWallets } from \"./use-vault-wallets\"\n\nexport const useVaultPolicies = () => {\n  const { vaultId } = useParams()\n  const { wallets } = useVaultWallets()\n\n  const { data, isLoading, isValidating, mutate } = useSWR(\n    vaultId ? `vault_${vaultId}_policies` : null,\n    () => getPolicies(BigInt(vaultId ?? \"\")),\n  )\n\n  const policiesWithWalletName = useMemo(() => {\n    return data?.map((policy) => ({\n      ...policy,\n      walletName: policy.wallets\n        ? wallets?.find((w) => w.uid === (policy.wallets && policy.wallets[0]))\n            ?.name\n        : \"Any\",\n    }))\n  }, [data, wallets])\n\n  return {\n    vaultId,\n    isFetching: isLoading || isValidating,\n    refetch: mutate,\n    policies: policiesWithWalletName,\n  }\n}\n","import { IconCmpInfo, Tooltip } from \"@nfid-frontend/ui\"\n\nexport const VaultPolicyInfoTooltip = () => {\n  return (\n    <Tooltip\n      tip={\n        <ul className=\"text-xs max-w-[360px] list-disc leading-4 space-y-1\">\n          <li>\n            Individual wallet policies take precedent over policies applied to\n            all wallets.\n          </li>\n          <li>\n            If a wallet (or Any source) has one or more policies available, a\n            transaction will trigger the policy with the highest value first and\n            approver threshold next.\n          </li>\n          <li>Make sure no gaps exist in your policy workflows.</li>\n          <li>\n            Known shortcomings: Policies can have more approvers than members in\n            a vault.\n          </li>\n        </ul>\n      }\n      className=\"!px-3\"\n    >\n      <IconCmpInfo className=\"text-secondary cursor-pointer\" />\n    </Tooltip>\n  )\n}\n","import clsx from \"clsx\"\nimport { useMemo, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\n\nimport {\n  DropdownSelect,\n  IconCmpPlus,\n  Input,\n  IOption,\n  ModalAdvanced,\n} from \"@nfid-frontend/ui\"\nimport { minMax } from \"@nfid-frontend/utils\"\nimport {\n  Currency,\n  ObjectState,\n  PolicyType,\n  registerPolicy,\n} from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\nimport { useVaultPolicies } from \"frontend/features/vaults/hooks/use-vault-policies\"\nimport { useVaultWallets } from \"frontend/features/vaults/hooks/use-vault-wallets\"\nimport { stringICPtoE8s } from \"frontend/integration/wallet/utils\"\n\ninterface PolicyCreateForm {\n  amount: number\n  approvers: number\n}\n\nexport const VaultAddPolicy = () => {\n  const [selectedWallets, setSelectedWallets] = useState<string[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { refetch } = useVaultPolicies()\n  const { wallets } = useVaultWallets()\n  const { vault } = useVault()\n\n  const walletsOptions: IOption[] | undefined = useMemo(() => {\n    const options = wallets?.map((wallet) => ({\n      label: wallet.name ?? \"\",\n      value: wallet.uid ?? \"\",\n      disabled: wallet.state === ObjectState.ARCHIVED,\n    }))\n\n    options?.unshift({\n      label: \"Any\",\n      value: \"Any\",\n      disabled: false,\n    })\n\n    return options\n  }, [wallets])\n\n  const { register, handleSubmit, formState, reset } = useForm({\n    defaultValues: {\n      amount: 0,\n      approvers: 0,\n    },\n  })\n\n  const onAddPolicy = async ({ amount, approvers }: PolicyCreateForm) => {\n    if (!vault?.id) return\n\n    try {\n      setIsLoading(true)\n      await registerPolicy({\n        vaultId: vault?.id,\n        amountThreshold: BigInt(stringICPtoE8s(String(amount))),\n        currency: Currency.ICP,\n        memberThreshold: Number(approvers),\n        type: PolicyType.THRESHOLD_POLICY,\n        wallets: selectedWallets[0] === \"Any\" ? undefined : selectedWallets,\n      })\n      reset()\n    } catch (e: any) {\n      console.log({ e })\n      toast.error(e.message)\n    } finally {\n      setIsLoading(false)\n      setIsModalOpen(false)\n      toast.success(`Policy successfully added`)\n      await refetch()\n    }\n  }\n\n  return (\n    <ModalAdvanced\n      large\n      title={\"Add policy\"}\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"primary\",\n        onClick: handleSubmit(onAddPolicy),\n        text: \"Add\",\n        id: \"create-policy-button\",\n      }}\n      trigger={\n        <div\n          className={clsx(\n            \"flex items-center space-x-2 font-bold text-blue-600 cursor-pointer\",\n            \"hover:opacity-50 transition-opacity\",\n          )}\n          id=\"create-policy-trigger\"\n        >\n          <IconCmpPlus className=\"w-4\" />\n          <span className=\"hidden text-sm sm:block\">Add policy</span>\n        </div>\n      }\n    >\n      <div className=\"space-y-5\" id=\"create-policy-modal\">\n        <DropdownSelect\n          label=\"Source (transactions sourced from this wallet)\"\n          options={walletsOptions ?? []}\n          selectedValues={selectedWallets}\n          setSelectedValues={setSelectedWallets}\n          isMultiselect={false}\n          placeholder=\"Select wallet\"\n          id=\"select-wallet\"\n        />\n        <div className=\"grid grid-cols-2 gap-5\">\n          <Input\n            labelText=\"Greater than (that are greater than)\"\n            type=\"number\"\n            innerText=\"ICP\"\n            errorText={formState.errors.amount?.message}\n            {...register(\"amount\", {\n              required: \"This field cannot be empty\",\n            })}\n          />\n          <Input\n            labelText=\"Approvers\"\n            type=\"number\"\n            innerText={`of ${vault?.members.length}`}\n            errorText={formState.errors.approvers?.message}\n            {...register(\"approvers\", {\n              required: \"This field cannot be empty\",\n              validate: minMax({\n                min: 1,\n                max: 255,\n                toLowError: \"Minimum amount is 1\",\n                toBigError: \"Maximum amount is 255\",\n              }),\n            })}\n          />\n        </div>\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import clsx from \"clsx\"\nimport React, { Dispatch, SetStateAction, useCallback, useState } from \"react\"\nimport { toast } from \"react-toastify\"\n\nimport { IconCmpArchive, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { ObjectState, Policy, updatePolicy } from \"@nfid/integration\"\n\nimport { useVaultPolicies } from \"frontend/features/vaults/hooks/use-vault-policies\"\n\ninterface VaultArchivePolicyProps {\n  isModalOpen: boolean\n  setIsModalOpen: Dispatch<SetStateAction<boolean>>\n  selectedPolicy?: Policy\n}\n\nexport const VaultArchivePolicy: React.FC<VaultArchivePolicyProps> = ({\n  isModalOpen,\n  setIsModalOpen,\n  selectedPolicy,\n}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const { refetch } = useVaultPolicies()\n\n  const onArchivePolicy = useCallback(async () => {\n    if (!selectedPolicy) return\n\n    try {\n      setIsLoading(true)\n      await updatePolicy({\n        ...selectedPolicy,\n        state: ObjectState.ARCHIVED,\n      })\n    } catch (e: any) {\n      toast.error(e.message)\n    } finally {\n      setIsLoading(false)\n      setIsModalOpen(false)\n      toast.success(\"Policy archived\")\n      await refetch()\n    }\n  }, [refetch, selectedPolicy, setIsModalOpen])\n\n  return (\n    <ModalAdvanced\n      large\n      title=\"Archive wallet\"\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"red\",\n        text: \"Archive\",\n        onClick: onArchivePolicy,\n      }}\n    >\n      <div className=\"flex items-start gap-5\">\n        <div\n          className={clsx(\n            \"w-16 h-16 flex items-center justify-center shrink-0\",\n            \"bg-gradient-to-br from-red-50 to-white rounded-3xl\",\n          )}\n        >\n          <IconCmpArchive className=\"text-red-500 w-7\" />\n        </div>\n        <p className=\"text-sm\">\n          This wallet, along with its policies and transactions, will be\n          excluded from your Vault pages.\n          <br />\n          <br />\n          Archive policy?\n        </p>\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\n\nimport { Input, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { minMax } from \"@nfid-frontend/utils\"\nimport { Policy, updatePolicy } from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\nimport { useVaultPolicies } from \"frontend/features/vaults/hooks/use-vault-policies\"\n\ninterface VaultPolicyEditProps {\n  isModalOpen: boolean\n  setIsModalOpen: Dispatch<SetStateAction<boolean>>\n  selectedPolicy?: Policy\n}\n\ninterface VaultPolicyEditForm {\n  amount: number\n  approvers: number\n  wallet: string\n}\n\nexport const VaultEditPolicy: React.FC<VaultPolicyEditProps> = ({\n  isModalOpen,\n  setIsModalOpen,\n  selectedPolicy,\n}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const { refetch } = useVaultPolicies()\n  const { vault } = useVault()\n\n  const { register, handleSubmit, formState, reset } = useForm({\n    defaultValues: useMemo(() => {\n      return {\n        amount: Number(selectedPolicy?.amountThreshold),\n        approvers: Number(selectedPolicy?.memberThreshold),\n        wallet: String(\n          selectedPolicy?.wallets ? selectedPolicy.wallets[0] : \"Any\",\n        ),\n      }\n    }, [\n      selectedPolicy?.amountThreshold,\n      selectedPolicy?.memberThreshold,\n      selectedPolicy?.wallets,\n    ]),\n  })\n\n  useEffect(() => {\n    reset({\n      amount: Number(selectedPolicy?.amountThreshold),\n      approvers: Number(selectedPolicy?.memberThreshold),\n      wallet: String(\n        selectedPolicy?.wallets ? selectedPolicy.wallets[0] : \"Any\",\n      ),\n    })\n  }, [reset, selectedPolicy])\n\n  const onPolicyEdit = useCallback(\n    async (data: VaultPolicyEditForm) => {\n      if (!selectedPolicy) return\n\n      try {\n        setIsLoading(true)\n        await updatePolicy({\n          ...selectedPolicy,\n          amountThreshold: BigInt(data.amount),\n          memberThreshold: Number(data.approvers),\n        })\n      } catch (e: any) {\n        toast.error(e.message)\n      } finally {\n        setIsLoading(false)\n        setIsModalOpen(false)\n        toast.success(\"Vault policy updated\")\n        await refetch()\n      }\n    },\n    [refetch, selectedPolicy, setIsModalOpen],\n  )\n\n  return (\n    <ModalAdvanced\n      large\n      title={\"Edit policy\"}\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"primary\",\n        onClick: handleSubmit(onPolicyEdit),\n        text: \"Save\",\n      }}\n    >\n      <div className=\"space-y-5\">\n        <Input\n          disabled\n          labelText=\"Transactions sourced from this wallet\"\n          {...register(\"wallet\")}\n        />\n        <Input\n          labelText=\"That are greater than\"\n          type=\"number\"\n          innerText=\"ICP\"\n          errorText={formState.errors.amount?.message}\n          {...register(\"amount\", {\n            required: \"This field cannot be empty\",\n          })}\n        />\n        <Input\n          labelText=\"Will require this number of approvers\"\n          type=\"number\"\n          innerText={`of ${vault?.members.length}`}\n          errorText={formState.errors.approvers?.message}\n          {...register(\"approvers\", {\n            required: \"This field cannot be empty\",\n            validate: minMax({\n              min: 1,\n              max: 255,\n              toLowError: \"Minimum amount is 1\",\n              toBigError: \"Maximum amount is 255\",\n            }),\n          })}\n        />\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import { TableCell, TableRow } from \"@nfid-frontend/ui\"\n\nexport const VaultsPoliciesTableHeader = () => {\n  return (\n    <TableRow header>\n      <TableCell isLeft className=\"w-2\">\n        #\n      </TableCell>\n      <TableCell className=\"w-auto\">Source</TableCell>\n      <TableCell className=\"w-44\">Greater than</TableCell>\n      <TableCell centered className=\"w-44\">\n        Approvers\n      </TableCell>\n      <TableCell isRight className=\"w-10\" />\n    </TableRow>\n  )\n}\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport {\n  IconCmpArchive,\n  IconCmpDots,\n  IconCmpPencil,\n  Popover,\n  PopoverTools,\n  TableCell,\n  TableRow,\n} from \"@nfid-frontend/ui\"\n\nexport interface VaultsPoliciesTableRowProps {\n  id: bigint\n  number: number\n  source: string\n  greaterThan: string\n  approvers: string\n  onArchive?: () => void\n  onEdit?: () => void\n  isArchived?: boolean\n  isAdmin?: boolean\n}\n\nexport const VaultsPoliciesTableRow: React.FC<VaultsPoliciesTableRowProps> = ({\n  number,\n  source,\n  greaterThan,\n  approvers,\n  onArchive,\n  onEdit,\n  isArchived,\n  isAdmin,\n}: VaultsPoliciesTableRowProps) => {\n  return (\n    <TableRow\n      className={clsx(isArchived && \"text-secondary pointer-events-none\")}\n      id={`policy_row`}\n    >\n      <TableCell isLeft>{number}</TableCell>\n      <TableCell>{source}</TableCell>\n      <TableCell>{greaterThan}</TableCell>\n      <TableCell centered>{approvers}</TableCell>\n      <TableCell isRight className=\"px-0\">\n        <Popover\n          align=\"end\"\n          trigger={\n            <IconCmpDots\n              className={clsx(\"w-full\", (isArchived || !isAdmin) && \"hidden\")}\n            />\n          }\n        >\n          <PopoverTools\n            items={[\n              {\n                icon: <IconCmpPencil />,\n                text: \"Edit\",\n                onClick: onEdit,\n              },\n              {\n                icon: <IconCmpArchive />,\n                text: \"Archive\",\n                onClick: onArchive,\n              },\n            ]}\n          />\n        </Popover>\n      </TableCell>\n    </TableRow>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport { Table } from \"@nfid-frontend/ui\"\nimport { ObjectState, Policy } from \"@nfid/integration\"\n\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\nimport { e8sICPToString } from \"frontend/integration/wallet/utils\"\n\nimport { VaultArchivePolicy } from \"../modal-archive-policy\"\nimport { VaultEditPolicy } from \"../modal-edit-policy\"\nimport { VaultsPoliciesTableHeader } from \"./table-header\"\nimport {\n  VaultsPoliciesTableRow,\n  VaultsPoliciesTableRowProps,\n} from \"./table-row\"\n\nexport interface VaultsPoliciesTableProps {\n  policies: Policy[]\n}\n\nexport const VaultsPoliciesTable: React.FC<VaultsPoliciesTableProps> = ({\n  policies,\n}) => {\n  const [isArchiveModal, setIsArchiveModal] = useState(false)\n  const [isEditModal, setIsEditModal] = useState(false)\n  const [selectedPolicy, setSelectedPolicy] = useState<Policy>()\n  const { vault, isAdmin } = useVault()\n\n  const policiesToRows = useMemo(() => {\n    return policies.map(\n      (policy, index) =>\n        ({\n          id: policy.id,\n          number: index + 1,\n          // @ts-ignore\n          source: policy.walletName,\n          greaterThan: `${e8sICPToString(Number(policy.amountThreshold))} ${\n            policy.currency\n          }`,\n          approvers: policy.memberThreshold\n            ? `${policy.memberThreshold} of ${vault?.members.length}`\n            : \"All\",\n          isArchived: policy.state === ObjectState.ARCHIVED,\n          isAdmin: isAdmin,\n        } as VaultsPoliciesTableRowProps),\n    )\n  }, [isAdmin, policies, vault?.members.length])\n\n  const onModalOpen = useCallback(\n    (type: \"archive\" | \"edit\", policyId: string) => {\n      const policy = policies.find((policy) => policy.id === BigInt(policyId))\n      setSelectedPolicy(policy)\n\n      if (type === \"archive\") setIsArchiveModal(true)\n      if (type === \"edit\") setIsEditModal(true)\n    },\n    [policies],\n  )\n\n  return (\n    <Table tableHeader={<VaultsPoliciesTableHeader />}>\n      {policiesToRows.map((policy) => (\n        <VaultsPoliciesTableRow\n          {...policy}\n          key={`policy_${policy.id}`}\n          onArchive={() => onModalOpen(\"archive\", String(policy.id) ?? \"\")}\n          onEdit={() => onModalOpen(\"edit\", String(policy.id) ?? \"\")}\n          isArchived={policy.isArchived}\n        />\n      ))}\n      <VaultArchivePolicy\n        selectedPolicy={selectedPolicy}\n        isModalOpen={isArchiveModal}\n        setIsModalOpen={setIsArchiveModal}\n      />\n      <VaultEditPolicy\n        selectedPolicy={selectedPolicy}\n        isModalOpen={isEditModal}\n        setIsModalOpen={setIsEditModal}\n      />\n    </Table>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport { EmptyCard, IconCmpPolicy } from \"@nfid-frontend/ui\"\nimport { Policy } from \"@nfid/integration\"\n\nimport { VaultActionBar } from \"../../action-bar\"\nimport { useVault } from \"../../hooks/use-vault\"\nimport { useVaultPolicies } from \"../../hooks/use-vault-policies\"\nimport { VaultPolicyInfoTooltip } from \"./info-tooltip\"\nimport { VaultAddPolicy } from \"./modal-add-policy\"\nimport { VaultsPoliciesTable } from \"./table\"\n\ninterface VaultsPoliciesPageProps {}\n\nexport const VaultsPoliciesPage: React.FC<VaultsPoliciesPageProps> = () => {\n  const [searchFilter, setSearchFilter] = useState(\"\")\n  const { policies, isFetching } = useVaultPolicies()\n  const { isAdmin } = useVault()\n\n  const filteredPolicies: Policy[] = useMemo(() => {\n    if (!policies) return []\n\n    return policies\n      .filter((policies) => policies?.walletName?.includes(searchFilter))\n      .sort((a, b) => Number(a.createdDate) - Number(b.createdDate))\n  }, [policies, searchFilter])\n\n  const onFilterChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchFilter(e.target.value)\n    },\n    [],\n  )\n\n  return (\n    <div className=\"border border-gray-200 rounded-xl mt-[30px]\">\n      <VaultActionBar\n        onInputChange={onFilterChange}\n        actionButtons={\n          <div className=\"flex space-x-5\">\n            {isAdmin ? <VaultAddPolicy /> : null}\n            <VaultPolicyInfoTooltip />\n          </div>\n        }\n      />\n      <div className=\"w-full px-5 overflow-x-auto\">\n        <VaultsPoliciesTable policies={filteredPolicies} />\n        {!filteredPolicies.length && !isFetching && (\n          <EmptyCard\n            className=\"h-64\"\n            icon={<IconCmpPolicy />}\n            description=\"Manage the policies for wallets in your vault.\"\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","import { useMemo } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport useSWR from \"swr\"\n\nimport { getTransactions } from \"@nfid/integration\"\n\nexport const useVaultTransactions = () => {\n  const { vaultId } = useParams()\n\n  const {\n    data: allTransactions,\n    isLoading,\n    isValidating,\n    mutate,\n  } = useSWR(vaultId ? `vault_${vaultId}_transactions` : null, () =>\n    getTransactions(),\n  )\n\n  const transactions = useMemo(() => {\n    return allTransactions?.filter(\n      (transaction) => transaction.vaultId === BigInt(vaultId ?? 0),\n    )\n  }, [allTransactions, vaultId])\n\n  return {\n    allTransactions,\n    isFetching: isLoading || isValidating,\n    refetch: mutate,\n    transactions,\n  }\n}\n","import React, { Dispatch, SetStateAction } from \"react\"\n\nimport {\n  FilterPopover,\n  DropdownSelect,\n  IconCmpFilters,\n  Input,\n  IOption,\n} from \"@nfid-frontend/ui\"\n\nexport interface VaultFilterTransactionsProps {\n  initiatorsOptions: IOption[]\n  statusOptions: IOption[]\n  initiatedFilter: string[]\n  setInitiatedFilter: (value: string[]) => void\n  statusFilter: string[]\n  setStatusFilter: (value: string[]) => void\n  timeFilter: { from: string; to: string }\n  setTimeFilter: Dispatch<SetStateAction<{ from: string; to: string }>>\n  onResetFilters: () => void\n  onApplyFilters?: () => void\n}\n\nexport const VaultFilterTransactions: React.FC<\n  VaultFilterTransactionsProps\n> = ({\n  initiatorsOptions,\n  statusOptions,\n  initiatedFilter,\n  setInitiatedFilter,\n  statusFilter,\n  setStatusFilter,\n  timeFilter,\n  setTimeFilter,\n  onResetFilters,\n  onApplyFilters,\n}) => {\n  return (\n    <FilterPopover\n      onReset={onResetFilters}\n      onApply={onApplyFilters}\n      trigger={\n        <IconCmpFilters className=\"transition-opacity cursor-pointer hover:opacity-60\" />\n      }\n      align=\"end\"\n    >\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <Input\n            type=\"date\"\n            labelText=\"From\"\n            onChange={(e) =>\n              setTimeFilter({ ...timeFilter, from: e.target.value })\n            }\n            value={timeFilter.from}\n          />\n          <div className=\"w-1 h-[1px] block bg-black shrink-0 mt-6\" />\n          <Input\n            type=\"date\"\n            labelText=\"To\"\n            onChange={(e) =>\n              setTimeFilter({ ...timeFilter, to: e.target.value })\n            }\n            value={timeFilter.to}\n          />\n        </div>\n        <DropdownSelect\n          options={initiatorsOptions}\n          selectedValues={initiatedFilter}\n          setSelectedValues={setInitiatedFilter}\n          label=\"Initiated\"\n        />\n        <DropdownSelect\n          options={statusOptions}\n          selectedValues={statusFilter}\n          setSelectedValues={setStatusFilter}\n          label=\"Status\"\n        />\n      </div>\n    </FilterPopover>\n  )\n}\n","import { TableCell, TableRow } from \"@nfid-frontend/ui\"\n\nexport const VaultsTransactionsTableHeader = () => {\n  return (\n    <TableRow header>\n      <TableCell isLeft className=\"w-2\">\n        #\n      </TableCell>\n      <TableCell className=\"w-auto\">Initiated</TableCell>\n      <TableCell className=\"w-32\">From</TableCell>\n      <TableCell className=\"w-32\">To</TableCell>\n      <TableCell className=\"w-36\">Tokens</TableCell>\n      <TableCell className=\"w-36\">Status</TableCell>\n      <TableCell isRight className=\"w-10\" />\n    </TableRow>\n  )\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { format } from \"date-fns\"\nimport { fromHexString, principalToAddress } from \"ictool\"\nimport React, { useMemo } from \"react\"\n\nimport { Table } from \"@nfid-frontend/ui\"\nimport { bigIntMillisecondsToSeconds } from \"@nfid-frontend/utils\"\nimport { Transaction } from \"@nfid/integration\"\n\nimport { toUSD } from \"frontend/features/fungable-token/accumulate-app-account-balances\"\nimport { useICPExchangeRate } from \"frontend/features/fungable-token/icp/hooks/use-icp-exchange-rate\"\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\nimport { useVaultMember } from \"frontend/features/vaults/hooks/use-vault-member\"\nimport { useVaultWallets } from \"frontend/features/vaults/hooks/use-vault-wallets\"\nimport { e8sICPToString } from \"frontend/integration/wallet/utils\"\n\nimport { VaultsTransactionsTableHeader } from \"./table-header\"\nimport {\n  IVaultTransactionsDetails,\n  VaultsTransactionsTableRow,\n} from \"./table-row\"\n\nexport interface VaultsTransactionsTableProps {\n  transactions: Transaction[]\n}\n\nexport const VaultsTransactionsTable: React.FC<\n  VaultsTransactionsTableProps\n> = ({ transactions }) => {\n  const { vault } = useVault()\n  const { wallets } = useVaultWallets()\n  const { exchangeRate } = useICPExchangeRate()\n  const { address: userAddress } = useVaultMember()\n\n  const transactionsToRows = useMemo(() => {\n    console.log({ transactions })\n    return transactions.map(\n      (transaction, index) =>\n        ({\n          number: index + 1,\n          fromWalletName:\n            wallets?.find(\n              (wallet) => wallet.uid === transaction.from_sub_account,\n            )?.name ?? \"\",\n          toAddress: transaction.to,\n          ownerName: transaction.owner,\n          id: transaction.id,\n          status: transaction.state,\n          amountICP: e8sICPToString(Number(transaction.amount)),\n          amountUSD: toUSD(\n            Number(e8sICPToString(Number(transaction.amount))),\n            exchangeRate ?? 0,\n          ),\n          fromAddress: principalToAddress(\n            Principal.fromText(VAULT_CANISTER_ID),\n            fromHexString(transaction.from_sub_account),\n          ),\n          createdDate: format(\n            new Date(bigIntMillisecondsToSeconds(transaction.createdDate)),\n            \"MMM dd, yyyy - hh:mm:ss aaa\",\n          ),\n          approvers: vault?.members\n            .map((member) => ({\n              name: member.name,\n              isApproved:\n                transaction.approves.findIndex(\n                  (approver) => approver.signer === member.userId,\n                ) !== -1,\n            }))\n            .sort((a, b) => Number(b.isApproved) - Number(a.isApproved)),\n          memberThreshold: transaction.memberThreshold,\n          isInitiatedByYou: transaction.owner === userAddress,\n          isApprovedByYou:\n            transaction.approves.findIndex(\n              (approve) => approve.signer === userAddress,\n            ) !== -1,\n          memo: transaction.memo,\n        } as IVaultTransactionsDetails),\n    )\n  }, [exchangeRate, transactions, userAddress, vault?.members, wallets])\n\n  return (\n    <Table tableHeader={<VaultsTransactionsTableHeader />}>\n      {transactionsToRows.map((transaction) => (\n        <VaultsTransactionsTableRow\n          {...transaction}\n          key={`transaction_${transaction.id}`}\n        />\n      ))}\n    </Table>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport {\n  EmptyCard,\n  IconCmpSorting,\n  IconCmpTransactions,\n  IOption,\n} from \"@nfid-frontend/ui\"\nimport {\n  bigIntMillisecondsToSeconds,\n  isDateBetween,\n} from \"@nfid-frontend/utils\"\nimport { Transaction, TransactionState } from \"@nfid/integration\"\n\nimport { VaultActionBar } from \"../../action-bar\"\nimport { useVault } from \"../../hooks/use-vault\"\nimport { useVaultTransactions } from \"../../hooks/use-vault-transactions\"\nimport { VaultFilterTransactions } from \"./modal-filters\"\nimport { VaultsTransactionsTable } from \"./table\"\n\ninterface VaultsTransactionsPageProps {}\n\nconst initialTimeFilter = {\n  from: \"\",\n  to: \"\",\n}\n\nexport const VaultsTransactionsPage: React.FC<\n  VaultsTransactionsPageProps\n> = () => {\n  const [searchFilter, setSearchFilter] = useState(\"\")\n  const [initiatedFilter, setInitiatedFilter] = useState<string[]>([])\n  const [statusFilter, setStatusFilter] = useState<string[]>([])\n  const [timeFilter, setTimeFilter] = useState(initialTimeFilter)\n  const { transactions, isFetching } = useVaultTransactions()\n  const { vault } = useVault()\n\n  const initiatorsOptions = useMemo(() => {\n    return (\n      vault?.members.map(\n        (member) =>\n          ({\n            label: member.name ?? \"Unknown user\",\n            value: member.userId,\n          } as IOption),\n      ) ?? []\n    )\n  }, [vault?.members])\n\n  const statusOptions = useMemo(() => {\n    return Object.values(TransactionState).map(\n      (status) =>\n        ({\n          label: status.charAt(0).toUpperCase() + status.slice(1).toLowerCase(),\n          value: status,\n        } as IOption),\n    )\n  }, [])\n\n  const onResetFilters = useCallback(() => {\n    setStatusFilter([])\n    setInitiatedFilter([])\n    setTimeFilter(initialTimeFilter)\n  }, [])\n\n  const filteredTransactions: Transaction[] = useMemo(() => {\n    if (!transactions) return []\n\n    return transactions\n      .map((transaction) => ({\n        ...transaction,\n        owner:\n          vault?.members.find((member) => member.userId === transaction.owner)\n            ?.name ?? transaction.owner,\n      }))\n      .filter((transaction) => transaction?.owner.includes(searchFilter))\n      .filter((transaction) =>\n        statusFilter.length ? statusFilter.includes(transaction.state) : true,\n      )\n      .filter((transaction) =>\n        initiatedFilter.length\n          ? initiatedFilter.includes(transaction.owner)\n          : true,\n      )\n      .filter((transaction) => {\n        if (!timeFilter.from.length && !timeFilter.to.length) return transaction\n\n        return isDateBetween(\n          new Date(bigIntMillisecondsToSeconds(transaction.createdDate)),\n          timeFilter.from.length ? new Date(timeFilter.from) : undefined,\n          timeFilter.to.length ? new Date(timeFilter.to) : undefined,\n        )\n      })\n  }, [\n    transactions,\n    vault?.members,\n    searchFilter,\n    statusFilter,\n    initiatedFilter,\n    timeFilter.from,\n    timeFilter.to,\n  ])\n\n  const onFilterChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchFilter(e.target.value)\n    },\n    [],\n  )\n\n  return (\n    <div className=\"border border-gray-200 rounded-xl mt-[30px]\">\n      <VaultActionBar\n        onInputChange={onFilterChange}\n        actionButtons={\n          <div className=\"flex items-center justify-end w-full ml-4 space-x-5\">\n            <VaultFilterTransactions\n              initiatorsOptions={initiatorsOptions}\n              statusOptions={statusOptions}\n              initiatedFilter={initiatedFilter}\n              setInitiatedFilter={(e) => setInitiatedFilter(e)}\n              statusFilter={statusFilter}\n              setStatusFilter={(e) => setStatusFilter(e)}\n              timeFilter={timeFilter}\n              setTimeFilter={setTimeFilter}\n              onResetFilters={onResetFilters}\n            />\n            <IconCmpSorting className=\"transition-opacity cursor-pointer hover:opacity-60\" />\n          </div>\n        }\n      />\n      <div className=\"w-full px-5 overflow-x-auto\">\n        <VaultsTransactionsTable transactions={filteredTransactions} />\n        {!filteredTransactions.length && !isFetching && (\n          <EmptyCard\n            className=\"h-64\"\n            icon={<IconCmpTransactions />}\n            description=\"No recent transactions to display.\"\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","import clsx from \"clsx\"\nimport { useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { toast } from \"react-toastify\"\n\nimport { IconCmpPlus, Input, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { registerWallet } from \"@nfid/integration\"\n\nimport { useVaultWallets } from \"frontend/features/vaults/hooks/use-vault-wallets\"\n\ninterface WalletCreateForm {\n  name: string\n}\n\nexport const VaultAddWallet = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const { vaultId, refetch } = useVaultWallets()\n\n  const { register, handleSubmit, formState } = useForm({\n    defaultValues: {\n      name: \"\",\n    },\n  })\n\n  const onAddMember = async ({ name }: WalletCreateForm) => {\n    if (!vaultId) return\n\n    try {\n      setIsLoading(true)\n      await registerWallet({ name: name, vaultId: BigInt(vaultId) })\n    } catch (e: any) {\n      toast.error(e.message)\n    } finally {\n      setIsLoading(false)\n      setIsModalOpen(false)\n      toast.success(`Wallet ${name} successfully added`)\n      await refetch()\n    }\n  }\n\n  return (\n    <ModalAdvanced\n      large\n      title={\"Add wallet\"}\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"primary\",\n        onClick: handleSubmit(onAddMember),\n        text: \"Create\",\n        id: \"create-wallet-button\",\n      }}\n      trigger={\n        <div\n          className={clsx(\n            \"flex items-center space-x-2 font-bold text-blue-600 cursor-pointer\",\n            \"hover:opacity-50 transition-opacity\",\n          )}\n          id=\"create-wallet-trigger\"\n        >\n          <IconCmpPlus className=\"w-4\" />\n          <span className=\"hidden text-sm sm:block\">Add wallet</span>\n        </div>\n      }\n    >\n      <div className=\"space-y-5\">\n        <Input\n          labelText=\"Name\"\n          errorText={formState.errors.name?.message}\n          {...register(\"name\", {\n            required: \"This field cannot be empty\",\n          })}\n        />\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import clsx from \"clsx\"\nimport React, { Dispatch, SetStateAction, useCallback, useState } from \"react\"\nimport { toast } from \"react-toastify\"\n\nimport { IconCmpArchive, ModalAdvanced } from \"@nfid-frontend/ui\"\nimport { ObjectState, updateWallet, Wallet } from \"@nfid/integration\"\n\nimport { useVaultWallets } from \"frontend/features/vaults/hooks/use-vault-wallets\"\n\ninterface VaultArchiveWalletProps {\n  isModalOpen: boolean\n  setIsModalOpen: Dispatch<SetStateAction<boolean>>\n  selectedWallet?: Wallet\n}\n\nexport const VaultArchiveWallet: React.FC<VaultArchiveWalletProps> = ({\n  isModalOpen,\n  setIsModalOpen,\n  selectedWallet,\n}) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const { refetch } = useVaultWallets()\n\n  const onArchiveMember = useCallback(async () => {\n    if (!selectedWallet) return\n\n    try {\n      setIsLoading(true)\n      await updateWallet({\n        ...selectedWallet,\n        state: ObjectState.ARCHIVED,\n      })\n    } catch (e: any) {\n      toast.error(e.message)\n    } finally {\n      setIsLoading(false)\n      setIsModalOpen(false)\n      toast.success(\"Wallet archived\")\n      await refetch()\n    }\n  }, [refetch, selectedWallet, setIsModalOpen])\n\n  return (\n    <ModalAdvanced\n      large\n      title=\"Archive wallet\"\n      isLoading={isLoading}\n      isModalOpen={isModalOpen}\n      isModalOpenChange={setIsModalOpen}\n      secondaryButton={{ type: \"stroke\", onClick: () => {}, text: \"Cancel\" }}\n      primaryButton={{\n        type: \"red\",\n        text: \"Archive\",\n        onClick: onArchiveMember,\n      }}\n    >\n      <div className=\"flex items-start gap-5\">\n        <div\n          className={clsx(\n            \"w-16 h-16 flex items-center justify-center shrink-0\",\n            \"bg-gradient-to-br from-red-50 to-white rounded-3xl\",\n          )}\n        >\n          <IconCmpArchive className=\"text-red-500 w-7\" />\n        </div>\n        <p className=\"text-sm\">\n          This wallet, along with its policies and transactions, will be\n          excluded from your Vault pages.\n          <br />\n          <br />\n          Archive <strong>{selectedWallet?.name}</strong>?\n        </p>\n      </div>\n    </ModalAdvanced>\n  )\n}\n","import { TableCell, TableRow } from \"@nfid-frontend/ui\"\n\nexport const VaultsWalletsTableHeader = () => {\n  return (\n    <TableRow header>\n      <TableCell isLeft className=\"w-2\">\n        #\n      </TableCell>\n      <TableCell className=\"w-auto\">Name</TableCell>\n      <TableCell className=\"w-44\">Token balance</TableCell>\n      <TableCell className=\"w-44\">USD balance</TableCell>\n      <TableCell isRight className=\"w-10\" />\n    </TableRow>\n  )\n}\n","import { useActor } from \"@xstate/react\"\nimport clsx from \"clsx\"\nimport React, { useCallback, useContext } from \"react\"\n\nimport {\n  IconCmpArchive,\n  IconCmpDots,\n  IconCmpTransfer,\n  Popover,\n  PopoverTools,\n  TableCell,\n  TableRow,\n} from \"@nfid-frontend/ui\"\n\nimport { useAllToken } from \"frontend/features/fungable-token/use-all-token\"\nimport { useAllWallets } from \"frontend/integration/wallet/hooks/use-all-wallets\"\nimport { ProfileContext } from \"frontend/provider\"\n\nexport interface VaultsWalletsTableRowProps {\n  address?: string\n  uid?: string\n  id: number\n  number: number\n  name: string\n  tokenBalance: string\n  USDBalance: string\n  onArchive: () => void\n  isArchived?: boolean\n  isAdmin?: boolean\n}\n\nexport const VaultsWalletsTableRow: React.FC<VaultsWalletsTableRowProps> = ({\n  address,\n  number,\n  name,\n  tokenBalance,\n  USDBalance,\n  onArchive,\n  isArchived,\n  isAdmin,\n}: VaultsWalletsTableRowProps) => {\n  const globalServices = useContext(ProfileContext)\n  const { token: allTokens } = useAllToken()\n\n  const [, send] = useActor(globalServices.transferService)\n  const { wallets } = useAllWallets()\n\n  const onSendFromVaultWallet = useCallback(() => {\n    send({ type: \"ASSIGN_SOURCE_WALLET\", data: address ?? \"\" })\n    send({\n      type: \"ASSIGN_SOURCE_ACCOUNT\",\n      data: wallets.find((w) => w.address === address) ?? ({} as any),\n    })\n    send({ type: \"CHANGE_DIRECTION\", data: \"send\" })\n    send({ type: \"CHANGE_TOKEN_TYPE\", data: \"ft\" })\n\n    send({ type: \"SHOW\" })\n  }, [address, send, wallets])\n\n  const onReceiveToVaultWallet = useCallback(() => {\n    send({ type: \"ASSIGN_SELECTED_FT\", data: allTokens[0] })\n    send({ type: \"ASSIGN_SOURCE_WALLET\", data: address ?? \"\" })\n    send({ type: \"CHANGE_DIRECTION\", data: \"receive\" })\n\n    send({ type: \"SHOW\" })\n  }, [address, send, allTokens])\n\n  return (\n    <TableRow\n      className={clsx(isArchived && \"text-secondary pointer-events-none\")}\n      id={`wallet_${name}`}\n    >\n      <TableCell isLeft>{number}</TableCell>\n      <TableCell>{name}</TableCell>\n      <TableCell>{tokenBalance} ICP</TableCell>\n      <TableCell>{USDBalance}</TableCell>\n      <TableCell isRight className=\"px-0\">\n        <Popover\n          align=\"end\"\n          trigger={\n            <IconCmpDots className={clsx(\"w-full\", isArchived && \"hidden\")} />\n          }\n        >\n          <PopoverTools\n            items={[\n              {\n                icon: <IconCmpTransfer />,\n                text: \"Send\",\n                onClick: onSendFromVaultWallet,\n              },\n              {\n                icon: <IconCmpTransfer className=\"rotate-180\" />,\n                text: \"Receive\",\n                onClick: onReceiveToVaultWallet,\n              },\n              isAdmin\n                ? {\n                    icon: <IconCmpArchive />,\n                    text: \"Archive\",\n                    onClick: onArchive,\n                  }\n                : {},\n            ]}\n          />\n        </Popover>\n      </TableCell>\n    </TableRow>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport { Table } from \"@nfid-frontend/ui\"\nimport { ObjectState, Wallet } from \"@nfid/integration\"\n\nimport { toUSD } from \"frontend/features/fungable-token/accumulate-app-account-balances\"\nimport { useICPExchangeRate } from \"frontend/features/fungable-token/icp/hooks/use-icp-exchange-rate\"\nimport { useVault } from \"frontend/features/vaults/hooks/use-vault\"\nimport { e8sICPToString } from \"frontend/integration/wallet/utils\"\n\nimport { VaultArchiveWallet } from \"../modal-archive-wallet\"\nimport { VaultsWalletsTableHeader } from \"./table-header\"\nimport { VaultsWalletsTableRow, VaultsWalletsTableRowProps } from \"./table-row\"\n\nexport interface VaultsWalletsTableProps {\n  wallets: Wallet[]\n}\n\nexport const VaultsWalletsTable: React.FC<VaultsWalletsTableProps> = ({\n  wallets,\n}) => {\n  const [isArchiveModal, setIsArchiveModal] = useState(false)\n  const [selectedWallet, setSelectedWallet] = useState<Wallet>()\n  const { exchangeRate } = useICPExchangeRate()\n  const { isAdmin } = useVault()\n\n  const walletsToRows = useMemo(() => {\n    if (!exchangeRate) return []\n\n    return wallets.map(\n      (wallet, index) =>\n        ({\n          id: index,\n          uid: wallet.uid,\n          address: wallet.address,\n          name: wallet.name,\n          number: index + 1,\n          tokenBalance: e8sICPToString(Number(wallet.balance?.ICP)),\n          USDBalance: toUSD(\n            Number(e8sICPToString(Number(wallet.balance?.ICP))),\n            exchangeRate,\n          ),\n          isArchived: wallet.state === ObjectState.ARCHIVED,\n          isAdmin: isAdmin,\n        } as VaultsWalletsTableRowProps),\n    )\n  }, [exchangeRate, isAdmin, wallets])\n\n  const onModalOpen = useCallback(\n    (type: \"archive\", walletUid: string) => {\n      const wallet = wallets.find((wallet) => wallet.uid === walletUid)\n      setSelectedWallet(wallet)\n\n      if (type === \"archive\") setIsArchiveModal(true)\n    },\n    [wallets],\n  )\n\n  return (\n    <Table tableHeader={<VaultsWalletsTableHeader />}>\n      {walletsToRows.map((wallet) => (\n        <VaultsWalletsTableRow\n          {...wallet}\n          key={`wallet_${wallet.uid}`}\n          onArchive={() => onModalOpen(\"archive\", wallet.uid ?? \"\")}\n          isArchived={wallet.isArchived}\n        />\n      ))}\n      <VaultArchiveWallet\n        selectedWallet={selectedWallet}\n        isModalOpen={isArchiveModal}\n        setIsModalOpen={setIsArchiveModal}\n      />\n    </Table>\n  )\n}\n","import React, { useCallback, useMemo, useState } from \"react\"\n\nimport { EmptyCard, IconCmpWallet } from \"@nfid-frontend/ui\"\nimport { Wallet } from \"@nfid/integration\"\n\nimport { VaultActionBar } from \"../../action-bar\"\nimport { useVault } from \"../../hooks/use-vault\"\nimport { useVaultWallets } from \"../../hooks/use-vault-wallets\"\nimport { VaultAddWallet } from \"./modal-add-wallet\"\nimport { VaultsWalletsTable } from \"./table\"\n\ninterface VaultsWalletsPageProps {}\n\nexport const VaultsWalletsPage: React.FC<VaultsWalletsPageProps> = () => {\n  const [searchFilter, setSearchFilter] = useState(\"\")\n  const { wallets, isFetching } = useVaultWallets()\n  const { isAdmin } = useVault()\n\n  const filteredWallets: Wallet[] = useMemo(() => {\n    if (!wallets) return []\n\n    return wallets\n      .filter((wallet) => wallet.name?.includes(searchFilter))\n      .sort((a, b) => a.state.localeCompare(b.state))\n  }, [searchFilter, wallets])\n\n  const onFilterChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchFilter(e.target.value)\n    },\n    [],\n  )\n\n  return (\n    <div className=\"border border-gray-200 rounded-xl mt-[30px]\">\n      <VaultActionBar\n        onInputChange={onFilterChange}\n        actionButtons={isAdmin ? <VaultAddWallet /> : <div />}\n      />\n      <div className=\"w-full px-5 overflow-x-auto\">\n        <VaultsWalletsTable wallets={filteredWallets} />\n        {!filteredWallets.length && !isFetching && (\n          <EmptyCard\n            className=\"h-64\"\n            icon={<IconCmpWallet />}\n            description=\"Each vault can have as many wallets as you’d like, each with its own transfer policy permissions.\"\n          />\n        )}\n      </div>\n    </div>\n  )\n}\n","import { ITab } from \"@nfid-frontend/ui\"\n\nimport { VaultsMembersPage } from \"./members-page\"\nimport { VaultsPoliciesPage } from \"./policies-page\"\nimport { VaultsTransactionsPage } from \"./transactions-page\"\nimport { VaultsWalletsPage } from \"./wallets-page\"\n\nexport const tabs: ITab[] = [\n  {\n    label: \"Wallets\",\n    content: <VaultsWalletsPage />,\n    value: \"wallets\",\n  },\n  {\n    label: \"Members\",\n    content: <VaultsMembersPage />,\n    value: \"members\",\n  },\n  {\n    label: \"Policies\",\n    content: <VaultsPoliciesPage />,\n    value: \"policies\",\n  },\n  {\n    label: \"Transactions\",\n    content: <VaultsTransactionsPage />,\n    value: \"transactions\",\n  },\n]\n","import React from \"react\"\n\nimport { Tabs } from \"@nfid-frontend/ui\"\n\nimport ProfileTemplate from \"frontend/ui/templates/profile-template/Template\"\n\nimport { useVault } from \"../hooks/use-vault\"\nimport { tabs } from \"./tabs\"\n\ninterface VaultsDetailsCoordinatorProps {}\n\nexport const VaultsDetailsCoordinator: React.FC<\n  VaultsDetailsCoordinatorProps\n> = () => {\n  const { vault, isFetching } = useVault()\n\n  return (\n    <ProfileTemplate\n      pageTitle={vault?.name}\n      isLoading={isFetching}\n      showBackButton\n    >\n      <p className=\"mb-5 text-sm\">{vault?.description}</p>\n      <Tabs tabs={tabs} defaultValue=\"wallets\" />\n    </ProfileTemplate>\n  )\n}\n\nexport default VaultsDetailsCoordinator\n","import React, { useCallback } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { toast } from \"react-toastify\"\n\nimport {\n  Badge,\n  IconCmpArrowRight,\n  TableCell,\n  TableRow,\n  Tooltip,\n} from \"@nfid-frontend/ui\"\nimport { TransactionState } from \"@nfid/integration\"\n\nimport { ProfileConstants } from \"frontend/apps/identity-manager/profile/routes\"\nimport { CenterEllipsis } from \"frontend/ui/atoms/center-ellipsis\"\n\ninterface IApprover {\n  name: string\n  isApproved: boolean\n}\n\nexport interface IVaultTransactionsDetails {\n  number: number\n  id: bigint\n  fromWalletName: string\n  fromAddress: string\n  toAddress: string\n  amountICP: string\n  amountUSD: string\n  ownerName: string\n  createdDate: string\n  memberThreshold: number\n  approvers: IApprover[]\n  status: TransactionState\n  isInitiatedByYou: boolean\n  isApprovedByYou: boolean\n  memo?: string\n}\n\nexport enum VaultBadgeStatuses {\n  APPROVED = \"success\",\n  PENDING = \"warning\",\n  CANCELED = \"cancel\",\n  REJECTED = \"error\",\n}\n\nexport const VaultsTransactionsTableRow: React.FC<IVaultTransactionsDetails> = (\n  state,\n) => {\n  const navigate = useNavigate()\n\n  const onDetailsOpen = useCallback(() => {\n    navigate(\n      `${ProfileConstants.base}/${ProfileConstants.vaults}/transactions/${state.id}`,\n      {\n        state,\n      },\n    )\n  }, [navigate, state])\n\n  const copyToClipboard = useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>, value: string) => {\n      e.stopPropagation()\n      navigator.clipboard.writeText(value)\n      toast.success(\"Address copied to clipboard\")\n    },\n    [],\n  )\n\n  return (\n    <TableRow className=\"space-x-5 hover:bg-gray-100\" onClick={onDetailsOpen}>\n      <TableCell isLeft>{state.number}</TableCell>\n      <TableCell>{state.ownerName}</TableCell>\n      <TableCell\n        className=\"hover:text-secondary\"\n        onClick={(e) => copyToClipboard(e, state.fromAddress)}\n      >\n        <Tooltip tip={\"Copy to clipboard\"}>\n          <span>{state.fromWalletName}</span>\n        </Tooltip>\n      </TableCell>\n      <TableCell\n        className=\"hover:text-secondary\"\n        onClick={(e) => copyToClipboard(e, state.toAddress)}\n      >\n        <Tooltip tip={\"Copy to clipboard\"}>\n          <CenterEllipsis\n            value={state.toAddress}\n            leadingChars={9}\n            trailingChars={3}\n          />\n        </Tooltip>\n      </TableCell>\n      <TableCell>\n        <p>{state.amountICP?.toString()} ICP</p>\n        <p className=\"text-xs text-secondary\">{state.amountUSD}</p>\n      </TableCell>\n      <TableCell>\n        <Badge type={VaultBadgeStatuses[state.status]}>{state.status}</Badge>\n      </TableCell>\n      <TableCell isRight>\n        <IconCmpArrowRight className=\"ml-auto text-secondary\" />\n      </TableCell>\n    </TableRow>\n  )\n}\n","import { isAfter, isBefore } from \"date-fns\"\nimport { compareDesc, parse } from \"date-fns\"\n\nexport const bigIntMillisecondsToSeconds = (date: bigint) => {\n  return Math.floor(Number(date / BigInt(10 ** 6)))\n}\n\n/**\n * Check if date is between to other dates\n * @param date Date\n * @param from Date\n * @param to Date\n * @returns boolean\n */\nexport const isDateBetween = (date: Date, from?: Date, to?: Date) => {\n  if (from && !to) return isAfter(date, from)\n  else if (!from && to) return isBefore(date, to)\n  else if (from && to) return isAfter(date, from) && isBefore(date, to)\n  return true\n}\n\nexport const sortByDate = <T extends { date: Date | string }>(\n  arr: T[],\n  dateFormat?: string,\n): T[] => {\n  return arr.sort((a, b) => {\n    const dateA = dateFormat\n      ? parse(a.date as string, dateFormat, new Date())\n      : (a.date as Date)\n    const dateB = dateFormat\n      ? parse(b.date as string, dateFormat, new Date())\n      : (b.date as Date)\n    return compareDesc(dateA, dateB)\n  })\n}\n"],"names":["VaultActionBar","actionButtons","onInputChange","onInputType","className","clsx","placeholder","icon","onChange","onKeyDown","useVaultMember","profile","useProfile","data","UserIIDelegation","isLoading","isValidating","useVaultDelegation","anchor","address","useMemo","principalToAddress","getPrincipal","Array","fill","identity","isReady","useVault","vaultId","useParams","vault","mutate","useSWR","async","getVaults","find","id","BigInt","getVaultById","isAdmin","vaultMember","members","member","userId","role","VaultRole","isFetching","refetch","VaultAddMember","setIsLoading","useState","isModalOpen","setIsModalOpen","memberAddress","register","handleSubmit","formState","resetField","reset","useForm","defaultValues","name","large","title","isModalOpenChange","secondaryButton","type","text","primaryButton","onClick","toast","storeMember","state","ObjectState","e","message","trigger","labelText","errorText","errors","required","VaultArchiveMember","selectedMember","onArchiveMember","useCallback","VaultEditMember","useEffect","onMemberEdit","disabled","VaultsMembersTableHeader","header","isLeft","centered","isRight","VaultsMembersTableRow","index","onEdit","onArchive","isArchived","value","leadingChars","trailingChars","align","items","VaultsMembersTable","isEditModal","setIsEditModal","isArchiveModal","setIsArchiveModal","setSelectedMember","membersRows","map","onModalOpen","memberId","tableHeader","key","VaultsMembersPage","searchFilter","setSearchFilter","filteredMembers","filter","includes","sort","a","b","localeCompare","onFilterChange","target","length","description","useVaultWallets","wallets","getWallets","walletsWithBalances","isBalancesLoading","console","debug","fetchVaultWalletsBalances","dedupingInterval","refreshInterval","useVaultPolicies","getPolicies","policiesWithWalletName","policy","walletName","w","uid","policies","VaultPolicyInfoTooltip","tip","VaultAddPolicy","selectedWallets","setSelectedWallets","walletsOptions","options","wallet","label","unshift","amount","approvers","registerPolicy","amountThreshold","stringICPtoE8s","String","currency","Currency","memberThreshold","Number","PolicyType","undefined","log","selectedValues","setSelectedValues","isMultiselect","innerText","validate","minMax","min","max","toLowError","toBigError","VaultArchivePolicy","selectedPolicy","onArchivePolicy","updatePolicy","VaultEditPolicy","onPolicyEdit","VaultsPoliciesTableHeader","VaultsPoliciesTableRow","number","source","greaterThan","VaultsPoliciesTable","setSelectedPolicy","policiesToRows","e8sICPToString","policyId","VaultsPoliciesPage","filteredPolicies","createdDate","VaultFilterTransactions","initiatorsOptions","statusOptions","initiatedFilter","setInitiatedFilter","statusFilter","setStatusFilter","timeFilter","setTimeFilter","onResetFilters","onApplyFilters","onReset","onApply","from","to","VaultsTransactionsTableHeader","VaultsTransactionsTable","transactions","exchangeRate","useICPExchangeRate","userAddress","transactionsToRows","transaction","fromWalletName","from_sub_account","toAddress","ownerName","owner","status","amountICP","amountUSD","toUSD","fromAddress","Principal","VAULT_CANISTER_ID","fromHexString","format","Date","bigIntMillisecondsToSeconds","isApproved","approves","findIndex","approver","signer","isInitiatedByYou","isApprovedByYou","approve","memo","initialTimeFilter","VaultsTransactionsPage","allTransactions","getTransactions","useVaultTransactions","Object","values","TransactionState","charAt","toUpperCase","slice","toLowerCase","filteredTransactions","isDateBetween","VaultAddWallet","registerWallet","VaultArchiveWallet","selectedWallet","updateWallet","VaultsWalletsTableHeader","VaultsWalletsTableRow","tokenBalance","USDBalance","globalServices","useContext","ProfileContext","token","allTokens","useAllToken","send","useActor","transferService","useAllWallets","onSendFromVaultWallet","onReceiveToVaultWallet","VaultsWalletsTable","setSelectedWallet","walletsToRows","balance","ICP","walletUid","VaultsWalletsPage","filteredWallets","tabs","content","VaultsDetailsCoordinator","pageTitle","showBackButton","defaultValue","VaultBadgeStatuses","VaultsTransactionsTableRow","navigate","useNavigate","onDetailsOpen","ProfileConstants","copyToClipboard","stopPropagation","navigator","clipboard","writeText","toString","date","Math","floor","isAfter","isBefore","sortByDate","arr","dateFormat","dateA","parse","dateB","compareDesc"],"sourceRoot":""}