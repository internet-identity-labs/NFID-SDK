{"version":3,"file":"static/js/212.73b468d3.chunk.js","mappings":"qRAMO,MAAMA,EAA4BC,UAAa,IAAD,EACnD,MAEMC,EAAuC,QAAhC,GAAGC,EAAAA,EAAAA,aAA6B,cAAWC,EAAAA,EAAAA,MAClDC,QAAmBC,EAAAA,EAAAA,GAChB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASK,OAJM,WACC,KAQlB,aAAaC,EAAAA,GAAAA,oBAAiC,CAAEC,SAAUJ,GAAa,E,yCCRlE,MAAMK,EAAqBT,UAAa,IAAD,IAC5C,MAEMC,EAAuC,QAAhC,GAAGC,EAAAA,EAAAA,aAA6B,cAAWC,EAAAA,EAAAA,MAElDC,QAAmBC,EAAAA,EAAAA,GAChB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASK,OALM,WACC,KAQZI,QAAgBC,EAAAA,GAAAA,WAAyBP,GACzCQ,QAAiBD,EAAAA,GAAAA,kCACrB,CACEE,UAAW,MAEbT,GAGIU,QAAkBH,EAAAA,GAAAA,kCACtB,CACEE,UAAW,QAEbT,GAKF,OAWG,QAXH,EAFeQ,EAASG,WAAWC,OAAOF,EAAUC,YAG3CE,KACJC,IAAE,CAECC,KAAMD,EAAGE,OAASV,EAAQW,cAAgB,OAAS,WACnDC,MAAO,MACPC,SAAUL,EAAGM,MACbC,MAAMC,EAAAA,EAAAA,GAAO,IAAIC,KAAKT,EAAGO,MAAO,+BAChCL,KAAMF,EAAGE,KACTQ,GAAIV,EAAGU,cAEZ,QAAI,EAAE,ECzCEC,EAAwB7B,UAAa,IAAD,EAC/C,MAEMC,EAAuC,QAAhC,GAAGC,EAAAA,EAAAA,aAA6B,cAAWC,EAAAA,EAAAA,MAClDC,QAAmBC,EAAAA,EAAAA,GAChB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASK,OAJM,WACC,KAQlB,aAAaK,EAAAA,GAAAA,oBAAkC,CAAEH,SAAUJ,GAAa,ECLpE0B,EACHX,GACD,IAAmD,IAAlD,YAAEY,GAA0B,EAC3B,MAAO,CACLZ,OACAG,MAAOS,EAAYC,WAAW,GAAGC,OAAOC,SAASC,OACjDZ,SAAUa,KAAKC,IAAIC,OAAOP,EAAYC,WAAW,GAAGC,OAAOM,QAC3Dd,MAAMC,EAAAA,EAAAA,GACJ,IAAIC,KAAKI,EAAYS,SAASC,UAAY,KAC1C,+BAEFrB,KAAMW,EAAYC,WAAW,GAAGU,QAAQhC,QACxCkB,GAAIG,EAAYC,WAAW,GAAGU,QAAQhC,QACvC,EAGQiC,EAAyB,IAGW,IAHV,aACrCC,EAAY,SACZC,GACuB,EAIvB,OAHwBD,EAAaA,aAAa3B,IAChDa,EAAiB,SAEIgB,QACpBC,GAAmBF,EAASG,QAAQD,EAAe3B,OAAS,GAC9D,EAGU6B,EAA6B,IAGO,IAHN,aACzCL,EAAY,SACZC,GACuB,EAIvB,OAHwBD,EAAaA,aAAa3B,IAChDa,EAAiB,aAEIgB,QACpBC,GAAmBF,EAASG,QAAQD,EAAenB,KAAO,GAC5D,E,sEC7CI,SAASsB,EAAaC,GAC3B,OAAIC,MAAMC,QAAQF,GACTA,EAAIlC,KAAKqC,GAAMJ,EAAaI,KACnB,MAAPH,GAAeA,EAAII,cAAgBC,OACrCA,OAAOC,KAAKN,GAAKO,QACtB,CAACC,EAAQC,KAAG,IACPD,EACH,EAACE,EAAAA,EAAAA,WAAUD,IAAOV,EAAaC,EAAIS,OAErC,CAAC,GAGET,CACT,CCZOnD,eAAe8D,EACpBC,GAEA,aAAaA,EACVC,OACAC,MAAMC,GAAShB,EAAagB,KAC5BD,MAAMC,IAEE,CACLC,WAAYD,EAAKC,WACjBvB,aAAcsB,EAAKtB,aAAa3B,KAAKc,IAAW,CAC9CqC,gBAAiBrC,EAAYqC,gBAC7BrC,YAAa,CACXS,SAAUT,EAAYA,YAAYS,SAClC6B,sBACEtC,EAAYA,YAAYsC,sBAC1BrC,WAAYD,EAAYA,YAAYC,WAAWf,KAAKqD,IAAS,IACxDA,EACHrC,OAAQ,CACNC,SAAUoC,EAAUrC,OAAOC,SAC3BK,OAAQD,OAAOgC,EAAUrC,OAAOM,OAAS,IAAM,GAAGgC,wBAOlE,CCrBOvE,eAAewE,EACpBC,GAEA,IAAIC,GAAUC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,IAAmBH,IACnD,aAAaI,EAAAA,EAAAA,IAAS,OAAS,GAAEC,EAAAA,yBAA+BJ,GAAST,KACvEH,EAEJ,CCXO,MAAMiB,EAAqB,KAChC,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,MAEff,KAAMtB,EAAcsC,aAAcC,IACxCC,EAAAA,EAAAA,IACEJ,EACI,CAACA,EAAW/D,KAAI,QAAC,UAAEwD,GAAW,SAAKA,CAAS,IAAG,mBAC/C,MACJ,QAAEO,GAAW,SCNZhF,eACLgF,GAEA,MCRoCpC,IAC7BA,EAAac,QAClB,CAAC2B,EAAKC,KACJ,MAAMC,EAA6BF,EAAIzC,aAAa3B,KACjDC,GAAOA,EAAGkD,gBAAgBoB,OAEvBC,EAAsBH,EAAQ1C,aACjCE,QACE5B,IACkE,IAAjEqE,EAA2BvC,QAAQ9B,EAAGkD,gBAAgBoB,QAEzDvE,KAAKC,GAAOA,EAAGkD,gBAAgBoB,OAElC,IAAKC,EAAoBC,OAAQ,OAAOL,EAExC,MAAMM,EAAuBL,EAAQ1C,aAAaE,QAC/C5B,IAAiE,IAA1DuE,EAAoBzC,QAAQ9B,EAAGkD,gBAAgBoB,QAEzD,MAAO,CACLrB,WAAYkB,EAAIlB,WAAawB,EAAqBD,OAClD9C,aAAc,IAAIyC,EAAIzC,gBAAiB+C,GACxC,GAEH,CAAExB,WAAY,EAAGvB,aAAc,KDf1BgD,OACCC,QAAQC,IAAId,EAAW/D,IAAIuD,IAErC,CDAwBuB,CAAyBf,EAAW,GACtD,CACEgB,iBAAkB,IAClBC,sBAAuB,MAS7B,OALAC,QAAQC,MAAM,qBAAsB,CAClCvD,eACAuC,gCAGK,CAAEvC,eAAcuC,8BAA6B,E,qCGMtD,MACA,EAAe,IAA0B,0D,eCpBlC,MAAMiB,EAAwB,IAA0B,IAAzB,SAAEC,EAAQ,MAAEC,GAAO,EACvD,OAAU,OAALA,QAAK,IAALA,GAAAA,EAAOZ,QAGV,iBACEa,WAAWC,EAAAA,EAAAA,GACT,iDACA,mCACA,SACA,WAEF,iBAAMD,UAAU,4BAA2B,SAAED,KAC7C,SAAC,KAAK,CACJG,QAAS,IAAMJ,GAAYA,EAASC,GACpCC,WAAWC,EAAAA,EAAAA,GACT,2BACA,kCAEFE,IAAKC,EACLC,IAAI,QAlBiB,IAoBnB,E,qCCFV,MAAMC,EAAO,CACX,CACEC,KAAM,OACNR,OAAO,wCAET,CACEQ,KAAM,WACNR,OAAO,6CAmJX,EA/IoE,IAW7D,IAX8D,SACnES,EAAQ,aACRC,EAAY,0BACZC,EAAyB,qBACzBC,EAAoB,0BACpBC,EAAyB,aACzBC,EAAY,sBACZC,EAAqB,iBACrBC,EAAgB,kBAChBC,EAAiB,oBACjBC,GACD,EACC,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,SACpCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAA2B,IAEnE,OACE,UAAC,IAAe,CACdG,UAAU,uBACVvB,UAAU,eACVwB,gBAAc,aAEd,SAAC,IAAgB,CAACxB,WAAWC,EAAAA,EAAAA,GAAM,eAAc,UAC/C,iBAAKD,UAAU,uDAAsD,WACnE,SAAC,KAAc,CACbyB,UAAU,EACVC,QAAShB,EACTiB,YAAY,cACZC,kBAAmBjB,EACnBkB,eAAgBjB,EAA0BlG,KAAKoH,GAAMA,EAAE9F,QACvD+F,UAAQ,KAEV,SAAC,KAAa,CACZC,QAAS,IAAMlB,IACfmB,SAAS,SAAC,KAAc,CAACjC,UAAU,mBACnCkC,MAAM,MAAK,UAEX,SAAC,KAAc,CACbC,MAAM,aACNT,QAASV,EAAkBtG,KAAKoH,IAAC,CAC/BK,MAAOL,EACP9F,MAAO8F,MAETD,eAAgBd,EAChBa,kBAAmBX,YAM3B,gBAAKjB,UAAU,qCAAoC,SAChDY,EAA0BlG,KAAK0H,IAC9B,SAACvC,EAAI,CAAkBE,MAAOqC,EAAKD,MAAOrC,SAAUe,GAAzCuB,EAAKD,YAGpB,SAAC,KAAY,CACXnC,UAAU,OACVM,KAAMA,EACNY,UAAWA,EACXC,aAAcA,KAEhB,gBAAKnB,UAAU,2BAA0B,SACtCqB,EAAalC,QACZ,+BACE,mBAAOa,WAAWC,EAAAA,EAAAA,GAAK,kCAAkC,WACvD,kBAAOD,WAAWC,EAAAA,EAAAA,GAAK,8BAA8B,UACnD,gBAAID,WAAWC,EAAAA,EAAAA,GAAK,+BAA+B,WACjD,eAAID,UAAU,iBAAgB,mBAC9B,eAAIA,UAAU,WAAU,oBACxB,eAAIA,UAAU,YAAW,uBACzB,eAAIA,UAAU,qBAAoB,mBAClC,eAAIA,UAAU,gBAAe,sBAGjC,kBAAOA,WAAWC,EAAAA,EAAAA,GAAK,mCAAmC,SACvDoB,EAAa3G,KAAI,CAACc,EAAa6G,KAC9B,gBACErC,WAAWC,EAAAA,EAAAA,GACT,gDAGFqC,GAAK,eAAcD,IAAQ,WAE3B,eACErC,UAAU,yBACVsC,GAAK,oBAAmBD,IAAQ,SAE/B7G,EAAYN,QAEf,eAAIoH,GAAK,qBAAoBD,IAAQ,SAClC7G,EAAYT,SAEf,eAAIuH,GAAK,wBAAuBD,IAAQ,SACrC7G,EAAYR,YAEf,yBACE,iBACEgF,WAAWC,EAAAA,EAAAA,GACT,+CAEFqC,GAAK,oBAAmBD,IAAQ,SAE/B7G,EAAYX,UAGjB,yBACE,iBACEmF,WAAWC,EAAAA,EAAAA,GACT,0CAEFqC,GAAK,kBAAiBD,IAAQ,SAE7B7G,EAAYH,SAhCX,eAAcgH,KAAS7G,EAAYN,mBAyCnD,gBACE8E,WAAWC,EAAAA,EAAAA,GACT,kBACA,6CACA,UAEF,cAAGD,UAAU,2BAA0B,qDAM7C,gBAAKA,WAAWC,EAAAA,EAAAA,GAAK,QAAQ,UAC3B,SAAC,IAAU,CACTtC,KAAoB,SAAduD,EAAuBV,EAAWC,EACxC6B,GAAK,cAAepB,EACpBqB,UAAWjB,QAGC,ECgJtB,EA5S4B,KAAO,IAAD,oBAChC,MAAM,mBAAEkB,EAAkB,gBAAEC,GCbL,MACvB,MAAM,QAAE/I,IAAYgJ,EAAAA,EAAAA,OAEZ/E,KAAMO,EAAWS,aAAcgE,IACrCC,EAAAA,EAAAA,GACS,OAAPlJ,QAAO,IAAPA,GAAAA,EAASK,OAAS,CAACL,EAAQK,OAAQ,mBAAqB,KACxD8I,EAAAA,IAGIlF,KAAMmF,EAASnE,aAAcoE,IAA2BlE,EAAAA,EAAAA,IAC9DX,EAAY,EAACG,EAAAA,EAAAA,IAAmBH,GAAY,iBAAmB,MAC/D,QAAE/D,GAAQ,SAAK6I,EAAAA,EAAAA,IAAW7I,EAAQ,GAClC,CACEsF,iBAAkB,IAClBC,sBAAuB,IACvBuD,gBAAiB,OAIf,aAAE5G,EAAY,4BAAEuC,GAAgCJ,KAEhD,aAAE0E,EAAcvE,aAAcwE,IAClCC,EAAAA,EAAAA,KAEIjJ,GAAUkJ,EAAAA,EAAAA,UAAQ,IACjBnF,GACEG,EAAAA,EAAAA,IAAmBH,GADH,IAEtB,CAACA,IAYJ,OAVAoF,EAAAA,EAAAA,YAAU,KACG,OAAP5J,QAAO,IAAPA,GAAAA,EAASK,SAAQwJ,EAAAA,EAAAA,IAAO,kBAAkB,GAC7C,CAAC7J,KAEJ4J,EAAAA,EAAAA,YAAU,KACHpF,KACLqF,EAAAA,EAAAA,IAAO,kBACPA,EAAAA,EAAAA,IAAO,sBAAqB,GAC3B,CAACrF,IAEG,CACLsF,gBAAiBtF,EACjBuF,cAAeX,EACfY,mBAAoBR,EACpBV,mBAAoBnG,EACpBsH,cAAexJ,EACfsI,gBACEE,GACAI,GACAnE,GACAuE,EACH,EDrC+CS,IACxCC,iBAAkBC,EAAYC,oBAAqBC,GEtB3B,MAChC,MAAQrG,KAAMsG,KAAQC,IAASrF,EAAAA,EAAAA,IAC7B,uBACA3E,GAGI2J,GAAmBR,EAAAA,EAAAA,UAAQ,KAAO,IAAD,EACrC,OAA8C,QAA9C,EAAU,OAAHY,QAAG,IAAHA,OAAG,EAAHA,EAAK1H,QAAQ5B,GAAmB,SAAZA,EAAGC,cAAgB,QAAI,EAAE,GACnD,CAACqJ,IAEEF,GAAsBV,EAAAA,EAAAA,UAAQ,KAAO,IAAD,EACxC,OAAkD,QAAlD,EAAU,OAAHY,QAAG,IAAHA,OAAG,EAAHA,EAAK1H,QAAQ5B,GAAmB,aAAZA,EAAGC,cAAoB,QAAI,EAAE,GACvD,CAACqJ,IAEJ,MAAO,CAAEA,MAAKJ,mBAAkBE,yBAAwBG,EAAM,EFS5DC,IACMF,IAAKG,GG1BmB,MAChC,MAAQzG,KAAMsG,KAAQC,IAASrF,EAAAA,EAAAA,IAC7B,kBACAwF,EAAAA,IAGF,MAAO,CAAEJ,SAAQC,EAAM,EHoBCI,IAChBL,IAAKM,GI3BqB,MAClC,MAAQ5G,KAAMsG,KAAQC,IAASrF,EAAAA,EAAAA,IAC7B,oBACA2F,EAAAA,IAGF,MAAO,CAAEP,SAAQC,EAAM,EJqBGO,IACpB,SAAEC,GK5B0B,MAClC,MAAQ/G,KAAM+G,KAAaR,IAASrF,EAAAA,EAAAA,IAClC,WACA8F,EAAAA,IAGF,MAAO,CAAED,SAAUA,KAAaR,EAAM,ELsBjBU,IACbvI,aAAcwI,GMvBiB,MACvC,MAAM,QAAE1K,IAAY2K,EAAAA,EAAAA,MACd,KAAEnH,EAAI,MAAEoH,EAAK,aAAEpG,IAAiBE,EAAAA,EAAAA,IACpC,4BACAvD,GAqBF,MAAO,CACLe,cAnBmBgH,EAAAA,EAAAA,UAAQ,IAChB,OAAJ1F,QAAI,IAAJA,OAAI,EAAJA,EAAMnD,WAAWE,KACrBsK,IAAQ,CAELjK,MAAO,MACPC,SAAU,EACVE,MAAMC,EAAAA,EAAAA,GAAO,IAAIC,KAAK4J,EAAS9J,MAAO,+BACtCL,KAAMmK,EAASnK,KAAKoK,QAAQ,YAAa,IACzC5J,GAAI2J,EAAS3J,GAAG4J,QAAQ,YAAa,IACrCrK,KACEoK,EAAS3J,GAAG4J,QAAQ,YAAa,IAAInK,iBAC9B,OAAPX,QAAO,IAAPA,OAAO,EAAPA,EAASW,eACL,WACA,YAGX,CAACX,EAAa,OAAJwD,QAAI,IAAJA,OAAI,EAAJA,EAAMnD,aAIjBuK,QACApG,eACD,ENNyCuG,IAClC7I,aAAc8I,GOzBqB,MAC3C,MAAM,QAAEhL,IAAY2K,EAAAA,EAAAA,MACd,KAAEnH,EAAI,MAAEoH,EAAK,aAAEpG,IAAiBE,EAAAA,EAAAA,IACpC,4BACArF,GAqBF,MAAO,CACL6C,cAnBmBgH,EAAAA,EAAAA,UAAQ,IAChB,OAAJ1F,QAAI,IAAJA,OAAI,EAAJA,EAAMnD,WAAWE,KACrBsK,IAAQ,CAELjK,MAAO,MACPC,SAAU,EACVE,MAAMC,EAAAA,EAAAA,GAAO,IAAIC,KAAK4J,EAAS9J,MAAO,+BACtCL,KAAMmK,EAASnK,KAAKoK,QAAQ,WAAY,IACxC5J,GAAI2J,EAAS3J,GAAG4J,QAAQ,WAAY,IACpCrK,KACEoK,EAAS3J,GAAG4J,QAAQ,WAAY,IAAInK,iBAC7B,OAAPX,QAAO,IAAPA,OAAO,EAAPA,EAASW,eACL,WACA,YAGX,CAACX,EAAa,OAAJwD,QAAI,IAAJA,OAAI,EAAJA,EAAMnD,aAIjBuK,QACApG,eACD,EPHCyG,IACMV,SAAUW,GQhCuB,MACzC,MAAQ1H,KAAM+G,KAAaR,IAASrF,EAAAA,EAAAA,IAClC,kBACA8F,EAAAA,IAGF,MAAO,CAAED,SAAUA,KAAaR,EAAM,ER0BAoB,IAEhC,QAAEC,IAAYC,EAAAA,EAAAA,KAEdC,GAAWC,EAAAA,EAAAA,OAEVC,EAAwBC,IAA6BxE,EAAAA,EAAAA,UAE1D,KACKyE,EAA2BC,IAAgC1E,EAAAA,EAAAA,UAEhE,IAEI2E,GAAgB1C,EAAAA,EAAAA,UAAQ,MACvBkC,EAAQpG,UACLwG,EAAuBxG,UAEzBwG,EAAuBK,MACtBlE,IAAC,aAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG9F,UAAUqC,EAAAA,EAAAA,IAA6B,QAAX,EAACkH,EAAQ,UAAE,aAAV,EAAYrH,UAAU,MAIlE,CAACyH,EAAwBJ,IAEtB1B,IAAqCR,EAAAA,EAAAA,UAAQ,KAAO,IAAD,YACvD,MAAM4C,EAAiB7J,EAAuB,CAC5CC,aAAgC,OAAlBmG,QAAkB,IAAlBA,EAAAA,EAAsB,CAAE5E,WAAY,EAAGvB,aAAc,IACnEC,SAAUqJ,EAAuBxG,OAC7BwG,EAAuBjL,KAAKoH,GAAMA,EAAE9F,QACpCuJ,EAAQ7K,KAAKwL,IAAM7H,EAAAA,EAAAA,IAAmB6H,EAAEhI,eAExCiI,EAAkBJ,EAAgBjC,EAAa,GAC/CsC,EAAkBL,GAAwC,QAA3B,EAAS,OAAN3B,QAAM,IAANA,OAAM,EAANA,EAAQP,wBAAgB,QAAS,GACnEwC,EAAoBN,GACI,QADS,EAC3B,OAARrB,QAAQ,IAARA,OAAQ,EAARA,EAAUb,wBAAgB,QAC1B,GACEyC,EAAqBP,GAC0B,QADb,EACrB,OAAflB,QAAe,IAAfA,OAAe,EAAfA,EAAiBtI,QAAQgK,GAAiB,SAAXA,EAAE3L,cAAgB,QACjD,GACE4L,EAAyBT,GAC6B,QADhB,EAClB,OAAtBZ,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwB5I,QAAQgK,GAAiB,SAAXA,EAAE3L,cAAgB,QACxD,GACE6L,EAA2BV,GACI,QADS,EAC3B,OAAfV,QAAe,IAAfA,OAAe,EAAfA,EAAiBxB,wBAAgB,QACjC,GACE6C,EAAsBX,GACE,QADW,EAC7B,OAARxB,QAAQ,IAARA,OAAQ,EAARA,EAAUV,wBAAgB,QAC1B,GACJ,IAAKgC,EAA0B1G,OAC7B,OAAOwH,EAAAA,EAAAA,IACL,IACKV,KACAE,KACAC,KACAC,KACAC,KACAE,KACAC,KACAC,GAEL,+BAGJ,IAAIrK,EAAe,GAmBnB,OAjBAwJ,EAA0Be,SAAS,sBACjCvK,EAAawK,QAAQZ,GACvBJ,EAA0Be,SAAS,aACjCvK,EAAawK,QACRV,KACAE,KACAC,GAEPT,EAA0Be,SAAS,YACjCvK,EAAawK,QACRJ,KACAC,KACAF,GAEPX,EAA0Be,SAAS,YACjCvK,EAAawK,QAAQT,IAEhBO,EAAAA,EAAAA,IAAWtK,EAAc,8BAA8B,GAC7D,CACDmG,EACAmD,EACAJ,EACAQ,EACAZ,EACArB,EACM,OAANM,QAAM,IAANA,OAAM,EAANA,EAAQP,iBACA,OAARa,QAAQ,IAARA,OAAQ,EAARA,EAAUb,iBACVgB,EACAgB,EACe,OAAfR,QAAe,IAAfA,OAAe,EAAfA,EAAiBxB,iBACT,OAARU,QAAQ,IAARA,OAAQ,EAARA,EAAUV,mBAGNiD,IAAyCzD,EAAAA,EAAAA,UAAQ,KAAO,IAAD,YAC3D,MAAM4C,EAAiBvJ,EAA2B,CAChDL,aAAgC,OAAlBmG,QAAkB,IAAlBA,EAAAA,EAAsB,CAAE5E,WAAY,EAAGvB,aAAc,IACnEC,SAAUqJ,EAAuBxG,OAC7BwG,EAAuBjL,KAAKoH,GAAMA,EAAE9F,QACpCuJ,EAAQ7K,KAAKwL,IAAM7H,EAAAA,EAAAA,IAAmB6H,EAAEhI,eAExCiI,EAAkBJ,EAAgB/B,EAAgB,GAClDqC,EAAoBN,GACQ,QADK,EAC3B,OAARrB,QAAQ,IAARA,OAAQ,EAARA,EAAUoC,4BAAoB,QAC9B,GAEEL,EAA2BV,GACQ,QADK,EAC3B,OAAfV,QAAe,IAAfA,OAAe,EAAfA,EAAiByB,4BAAoB,QACrC,GAEEJ,EAAsBX,GACM,QADO,EAC7B,OAARxB,QAAQ,IAARA,OAAQ,EAARA,EAAUuC,4BAAoB,QAC9B,GAEEV,EAAkBL,GACQ,QADK,EAC3B,OAAN3B,QAAM,IAANA,OAAM,EAANA,EAAQ0C,4BAAoB,QAC5B,GAEER,EAAqBP,GAC8B,QADjB,EACrB,OAAflB,QAAe,IAAfA,OAAe,EAAfA,EAAiBtI,QAAQgK,GAAiB,aAAXA,EAAE3L,cAAoB,QACrD,GAEE4L,EAAyBT,GACiC,QADpB,EAClB,OAAtBZ,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwB5I,QAAQgK,GAAiB,aAAXA,EAAE3L,cAAoB,QAC5D,GAEJ,IAAKiL,EAA0B1G,OAC7B,OAAOwH,EAAAA,EAAAA,IACL,IACKV,KACAE,KACAC,KACAC,KACAC,KACAE,KACAC,KACAC,GAEL,+BAGJ,IAAIrK,EAAe,GAmBnB,OAjBAwJ,EAA0Be,SAAS,sBACjCvK,EAAawK,QAAQZ,GACvBJ,EAA0Be,SAAS,aACjCvK,EAAawK,QACRV,KACAE,KACAC,GAEPT,EAA0Be,SAAS,YACjCvK,EAAawK,QAAQT,GACvBP,EAA0Be,SAAS,YACjCvK,EAAawK,QACRJ,KACAC,KACAF,IAGAG,EAAAA,EAAAA,IAAWtK,EAAc,8BAA8B,GAC7D,CACDmG,EACAmD,EACAJ,EACAQ,EACA/B,EACQ,OAARU,QAAQ,IAARA,OAAQ,EAARA,EAAUoC,qBACK,OAAfzB,QAAe,IAAfA,OAAe,EAAfA,EAAiByB,qBACT,OAARvC,QAAQ,IAARA,OAAQ,EAARA,EAAUuC,qBACJ,OAAN1C,QAAM,IAANA,OAAM,EAANA,EAAQ0C,qBACRjC,EACAM,EACAU,IAGIkB,IAAkB1D,EAAAA,EAAAA,UAAQ,IACvBkC,EAAQ7K,KAAKwL,IAAO,IAAD,oCACxB,MAAMc,EACJtK,EAA2B,CACzBL,aAAgC,OAAlBmG,QAAkB,IAAlBA,EAAAA,EAAsB,CAClC5E,WAAY,EACZvB,aAAc,IAEhBC,SAAU,EAAC+B,EAAAA,EAAAA,IAAmB6H,EAAEhI,cAC/BiB,OACH/C,EAAuB,CACrBC,aAAgC,OAAlBmG,QAAkB,IAAlBA,EAAAA,EAAsB,CAClC5E,WAAY,EACZvB,aAAc,IAEhBC,SAAU,EAAC+B,EAAAA,EAAAA,IAAmB6H,EAAEhI,cAC/BiB,OAEC8H,EACS,aAAbf,EAAEgB,OACEpD,EAAW3E,OACX6E,EAAc7E,QACmB,QADb,EACb,OAANiF,QAAM,IAANA,GAAwB,QAAlB,EAANA,EAAQP,wBAAgB,WAAlB,EAAN,EAA0B1E,cAAM,QAAI,IACA,QADE,EAChC,OAANiF,QAAM,IAANA,GAA4B,QAAtB,EAANA,EAAQ0C,4BAAoB,WAAtB,EAAN,EAA8B3H,cAAM,QAAI,IACN,QADQ,EAClC,OAARuF,QAAQ,IAARA,GAA0B,QAAlB,EAARA,EAAUb,wBAAgB,WAAlB,EAAR,EAA4B1E,cAAM,QAAI,IACA,QADE,EAChC,OAARuF,QAAQ,IAARA,GAA8B,QAAtB,EAARA,EAAUoC,4BAAoB,WAAtB,EAAR,EAAgC3H,cAAM,QAAI,IACD,QADG,EAC7B,OAAfkG,QAAe,IAAfA,GAAiC,QAAlB,EAAfA,EAAiBxB,wBAAgB,WAAlB,EAAf,EAAmC1E,cAAM,QAAI,IACA,QADE,EAChC,OAAfkG,QAAe,IAAfA,GAAqC,QAAtB,EAAfA,EAAiByB,4BAAoB,WAAtB,EAAf,EAAuC3H,cAAM,QAAI,IACf,QADiB,EAC3C,OAARoF,QAAQ,IAARA,GAA0B,QAAlB,EAARA,EAAUV,wBAAgB,WAAlB,EAAR,EAA4B1E,cAAM,QAAI,IACA,QADE,EAChC,OAARoF,QAAQ,IAARA,GAA8B,QAAtB,EAARA,EAAUuC,4BAAoB,WAAtB,EAAR,EAAgC3H,cAAM,QAAI,IACZ,QADc,EACtB,OAAtBgG,QAAsB,IAAtBA,OAAsB,EAAtBA,EAAwBhG,cAAM,QAAI,IACX,QADa,EACrB,OAAf0F,QAAe,IAAfA,OAAe,EAAfA,EAAiB1F,cAAM,QAAI,GAC5B6H,EACAA,EAEN,MAAO,CACL7E,MAAO+D,EAAE/D,MACTnG,OAAOqC,EAAAA,EAAAA,IAAmB6H,EAAEhI,WAC5BiJ,WAAa,GAAEF,QAChB,KAEF,CACK,OAAN7C,QAAM,IAANA,GAA4B,QAAtB,EAANA,EAAQ0C,4BAAoB,WAAtB,EAAN,EAA8B3H,OACxB,OAANiF,QAAM,IAANA,GAAwB,QAAlB,EAANA,EAAQP,wBAAgB,WAAlB,EAAN,EAA0B1E,OAClB,OAARuF,QAAQ,IAARA,GAA8B,QAAtB,EAARA,EAAUoC,4BAAoB,WAAtB,EAAR,EAAgC3H,OACxB,OAARuF,QAAQ,IAARA,GAA0B,QAAlB,EAARA,EAAUb,wBAAgB,WAAlB,EAAR,EAA4B1E,OACb,OAAfkG,QAAe,IAAfA,GAAqC,QAAtB,EAAfA,EAAiByB,4BAAoB,WAAtB,EAAf,EAAuC3H,OACxB,OAAfkG,QAAe,IAAfA,GAAiC,QAAlB,EAAfA,EAAiBxB,wBAAgB,WAAlB,EAAf,EAAmC1E,OAC3B,OAARoF,QAAQ,IAARA,GAA8B,QAAtB,EAARA,EAAUuC,4BAAoB,WAAtB,EAAR,EAAgC3H,OACxB,OAARoF,QAAQ,IAARA,GAA0B,QAAlB,EAARA,EAAUV,wBAAgB,WAAlB,EAAR,EAA4B1E,OAC5B6E,EAAc7E,OACd2E,EAAW3E,OACXqD,EACA+C,EACAJ,EACAN,IAGIuC,IAA4BC,EAAAA,EAAAA,cAC/BrL,IACC,MAAM0F,EAAU1F,EAAMtB,KAAKqC,GACzBgK,GAAgBf,MAAMsB,GAAMA,EAAEtL,QAAUe,MAE1C6I,EACElE,EAAQnF,QAAQ+K,QAAYC,IAAND,IACvB,GAEH,CAACP,KAGGS,GAAyBC,EAAAA,aAC5BzL,IACC,MAAM0L,EAAoB/B,EAAuBpJ,QAC9C6F,GAASA,EAAKD,QAAUnG,IAE3B4J,EAA0B8B,EAAkB,GAE9C,CAAC/B,IAcH,OAXArC,EAAAA,EAAAA,YAAU,KAAO,IAAD,EACd,MAAMqE,EAAuB,QAAjB,EAAGlC,EAASmC,aAAK,aAAd,EAAgBD,OAC/BA,GAAU/B,EAA0B,CAAC+B,GAAQ,GAC5C,CAAe,QAAf,EAAClC,EAASmC,aAAK,aAAd,EAAgBD,UAEpBrE,EAAAA,EAAAA,YAAU,KAAO,IAAD,EACd,MAAMuE,EAA2B,QAAjB,EAAGpC,EAASmC,aAAK,aAAd,EAAgBC,WAC9BA,GACL/B,EAA6B,CAAC+B,GAAY,GACzC,CAAe,QAAf,EAACpC,EAASmC,aAAK,aAAd,EAAgBC,cAGlB,iCACE,SAAC,IAAM,CAACC,UAAWrF,KACnB,SAAC,EAAuB,CACtBjC,SAAUqD,GACVpD,aAAcqG,GACdpG,0BAA2BqG,GAC3BpG,qBAAsByG,GACtBxG,0BAA2B+E,EAC3B9E,aAAc2G,GACdxG,kBAAmB+G,EAAAA,GACnBjH,sBAAuB,IAAMgF,EAA6BiC,EAAAA,IAC1DhH,iBAAkB8E,EAClB5E,oBAAqB6E,MAEtB,C,wESvSP,MACA,EAAe,IAA0B,0DCDzC,MACA,EAAe,IAA0B,kE,eClBzC,MAwBA,EAxBgD,IAMzC,IAN0C,SAC/CkC,EAAQ,SACRC,EAAQ,QACR/H,EAAO,SACPgI,EAAQ,UACRlI,GACD,EACC,OACE,gBACEA,WAAWC,EAAAA,EAAAA,GACT,6CACAgI,EACI,4BACA,oCACJC,GAAY,sBACZlI,GAEFE,QAASA,EAAQ,SAEhB8H,GACG,ECmDV,EAhE0C,IAInC,IAJoC,KACzCrK,EAAI,QACJwK,EAAU,GAAE,UACZ5F,GACD,EACC,MAAO6F,EAAaC,GAAkBZ,EAAAA,SAAe,GAE/Ca,EAAgBb,EAAAA,SAAc,IAC3B5L,KAAK0M,MAAM5K,EAAKwB,OAASgJ,IAC/B,CAACxK,EAAMwK,IAaV,OAXAV,EAAAA,WAAgB,KACd,MAAMrK,EAASO,EAAK6K,OACjBJ,EAAc,GAAKD,GACnBC,EAAc,GAAKD,EAAUA,GAE3B/K,EAAO+B,OAGLoD,EAAUnF,IAFfiL,EAAe,GACf9F,EAAU,IACY,GACvB,CAAC6F,EAAazK,EAAMwK,EAAS5F,KAG9B,iBACEvC,WAAWC,EAAAA,EAAAA,GACT,gCACAtC,EAAKwB,OAASgJ,EAAU,GAAK,UAC7B,WAEF,SAAC,EAAG,CACFD,SAA0B,IAAhBE,EACVlI,QAAS,IAAMmI,EAAeD,EAAc,GAC5CpI,WAAWC,EAAAA,EAAAA,GAAqB,IAAhBmI,GAAqB,cAAc,UAEnD,SAAC,KAAK,CACJjI,IAAqB,IAAhBiI,EAAoBK,EAAgBC,EACzCrI,IAAI,iBAGPxD,MAAMyL,GACJK,KAAK,MACLjO,KAAI,CAACkO,EAAGvG,KACP,SAAC,EAAG,CAEFnC,QAAS,IAAMmI,EAAehG,EAAQ,GACtC4F,SAAU5F,IAAU+F,EAAc,EAAE,SAEnC/F,EAAQ,GAJH,kBAAiBA,QAO7B,SAAC,EAAG,CACF6F,SAAUE,IAAgBE,EAC1BpI,QAAS,IAAMmI,EAAeD,EAAc,GAC5CpI,WAAWC,EAAAA,EAAAA,GAAKmI,IAAgBE,GAAiB,cAAc,UAE/D,SAAC,KAAK,CACJnI,IAAKiI,IAAgBE,EAAgBG,EAAgBC,EACrDrI,IAAI,uBAGJ,C,wEChEV,MAqCA,EArCsD,IAO/C,IAPgD,MACrDN,EAAK,SACL8I,EAAQ,SACRb,EAAQ,UACRhI,EAAS,oBACT8I,GAAsB,EAAI,GAC1BxG,GACD,EACC,OACE,iBACEA,GAAIA,EACJtC,WAAWC,EAAAA,EAAAA,GACT,0CACA,oBACAD,GACA,WAEF,iBAAKA,UAAU,OAAM,UAClBD,IACC,gBAAKC,UAAU,iDAAgD,SAC5DD,IAGJ8I,IACC,gBAAK7I,UAAU,0EAAyE,SACrF6I,QAKP,gBAAK7I,WAAWC,EAAAA,EAAAA,GAAK6I,GAAuB,qBAAqB,SAC9Dd,MAEC,C,qGC1CH,MAAMe,EAA+B7N,GACnCW,KAAKmN,MAAMjN,OAAOb,EAAO+N,OAAO,IAAM,KAUlCC,EAAgB,CAAChO,EAAYL,EAAaQ,IACjDR,IAASQ,GAAW8N,EAAAA,EAAAA,GAAQjO,EAAML,IAC5BA,GAAQQ,GAAW+N,EAAAA,EAAAA,GAASlO,EAAMG,IACnCR,IAAQQ,IAAW8N,EAAAA,EAAAA,GAAQjO,EAAML,KAASuO,EAAAA,EAAAA,GAASlO,EAAMG,GAIvDsL,EAAa,CACxB0C,EACAC,IAEOD,EAAIE,MAAK,CAACC,EAAGC,KAClB,MAAMC,EAAQJ,GACVK,EAAAA,EAAAA,GAAMH,EAAEtO,KAAgBoO,EAAY,IAAIlO,MACvCoO,EAAEtO,KACD0O,EAAQN,GACVK,EAAAA,EAAAA,GAAMF,EAAEvO,KAAgBoO,EAAY,IAAIlO,MACvCqO,EAAEvO,KACP,OAAO2O,EAAAA,EAAAA,GAAYH,EAAOE,EAAM,G","sources":["features/non-fungable-token/eth/get-user-polygon-activity.ts","features/fungable-token/eth/get-eth-transactions.ts","features/non-fungable-token/eth/get-user-nft-activity.ts","integration/rosetta/select-transactions.ts","integration/rosetta/util.ts","integration/rosetta/transactions/map-to-transaction-history.ts","integration/rosetta/transactions/index.ts","integration/wallet/hooks/get-all-transactions.ts","integration/rosetta/transactions/get-all-transaction-history.ts","integration/rosetta/transactions/reduce-all-transactions.ts","ui/atoms/chip/close.svg","ui/atoms/chip/index.tsx","ui/pages/new-profile/transaction-history/index.tsx","apps/identity-manager/profile/transactions/index.tsx","integration/wallet/hooks/use-wallet.ts","features/fungable-token/eth/hooks/use-eth-transactions.ts","features/fungable-token/btc/hooks/use-btc-transactions.ts","features/fungable-token/matic/hooks/use-matic-transactions.ts","features/fungable-token/erc-20/hooks/use-erc-20-transactions.ts","features/non-fungable-token/eth/use-user-nft-transactions.ts","features/non-fungable-token/eth/use-user-polygon-transactions.ts","features/fungable-token/erc-20/hooks/use-erc-20-transactions-polygon.ts","ui/molecules/pagination/assets/arrow.svg","ui/molecules/pagination/assets/arrowDisabled.svg","ui/molecules/pagination/pagination-box.tsx","ui/molecules/pagination/index.tsx","ui/templates/profile-container/Container.tsx","../../../packages/utils/src/lib/date.ts"],"sourcesContent":["import { loadProfileFromLocalStorage, polygonAsset } from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\nimport { fetchProfile } from \"frontend/integration/identity-manager\"\n\n//WIP have to be moved to connector layer\nexport const getUserPolygonNFTActivity = async () => {\n  const hostname = \"nfid.one\"\n  const accountId = \"0\"\n  const profile = loadProfileFromLocalStorage() ?? (await fetchProfile())\n  const delegation = await getWalletDelegation(\n    profile?.anchor,\n    hostname,\n    accountId,\n  )\n\n  return await polygonAsset.getActivitiesByUser({ identity: delegation })\n}\n","import { format } from \"date-fns\"\nimport { TransactionRow } from \"packages/integration/src/lib/asset/types\"\n\nimport { ethereumAsset, loadProfileFromLocalStorage } from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\nimport { fetchProfile } from \"frontend/integration/identity-manager\"\n\nexport const getEthTransactions = async () => {\n  const hostname = \"nfid.one\"\n  const accountId = \"0\"\n  const profile = loadProfileFromLocalStorage() ?? (await fetchProfile())\n\n  const delegation = await getWalletDelegation(\n    profile?.anchor,\n    hostname,\n    accountId,\n  )\n  const address = await ethereumAsset.getAddress(delegation)\n  const incoming = await ethereumAsset.getFungibleActivityByTokenAndUser(\n    {\n      direction: \"to\",\n    },\n    delegation,\n  )\n\n  const outcoming = await ethereumAsset.getFungibleActivityByTokenAndUser(\n    {\n      direction: \"from\",\n    },\n    delegation,\n  )\n\n  const allTXs = incoming.activities.concat(outcoming.activities)\n\n  return (\n    allTXs.map(\n      (tx) =>\n        ({\n          type: tx.from === address.toLowerCase() ? \"send\" : \"received\",\n          asset: \"ETH\",\n          quantity: tx.price,\n          date: format(new Date(tx.date), \"MMM dd, yyyy - hh:mm:ss aaa\"),\n          from: tx.from,\n          to: tx.to,\n        } as TransactionRow),\n    ) ?? []\n  )\n}\n","import { ethereumAsset, loadProfileFromLocalStorage } from \"@nfid/integration\"\n\nimport { getWalletDelegation } from \"frontend/integration/facade/wallet\"\nimport { fetchProfile } from \"frontend/integration/identity-manager\"\n\nexport const getUserEthNFTActivity = async () => {\n  const hostname = \"nfid.one\"\n  const accountId = \"0\"\n  const profile = loadProfileFromLocalStorage() ?? (await fetchProfile())\n  const delegation = await getWalletDelegation(\n    profile?.anchor,\n    hostname,\n    accountId,\n  )\n\n  return await ethereumAsset.getActivitiesByUser({ identity: delegation })\n}\n","import { format } from \"date-fns\"\nimport { TransactionRow } from \"packages/integration/src/lib/asset/types\"\n\nimport { Transaction, TransactionHistory } from \"./rosetta_interface\"\n\ninterface SelectTransactionProps {\n  transactions: TransactionHistory\n  accounts: string[]\n}\n\nconst toTransactionRow =\n  (type: \"send\" | \"received\") =>\n  ({ transaction }: Transaction): TransactionRow => {\n    return {\n      type,\n      asset: transaction.operations[0].amount.currency.symbol,\n      quantity: Math.abs(Number(transaction.operations[0].amount.value)),\n      date: format(\n        new Date(transaction.metadata.timestamp / 1000000),\n        \"MMM dd, yyyy - hh:mm:ss aaa\",\n      ),\n      from: transaction.operations[0].account.address,\n      to: transaction.operations[1].account.address,\n    }\n  }\n\nexport const selectSendTransactions = ({\n  transactions,\n  accounts,\n}: SelectTransactionProps): TransactionRow[] => {\n  const transactionRows = transactions.transactions.map(\n    toTransactionRow(\"send\"),\n  )\n  return transactionRows.filter(\n    (transactionRow) => accounts.indexOf(transactionRow.from) > -1,\n  )\n}\n\nexport const selectReceivedTransactions = ({\n  transactions,\n  accounts,\n}: SelectTransactionProps): TransactionRow[] => {\n  const transactionRows = transactions.transactions.map(\n    toTransactionRow(\"received\"),\n  )\n  return transactionRows.filter(\n    (transactionRow) => accounts.indexOf(transactionRow.to) > -1,\n  )\n}\n","import { camelCase } from \"lodash\"\n\nexport function camelizeKeys(obj: any): any {\n  if (Array.isArray(obj)) {\n    return obj.map((v) => camelizeKeys(v))\n  } else if (obj != null && obj.constructor === Object) {\n    return Object.keys(obj).reduce(\n      (result, key) => ({\n        ...result,\n        [camelCase(key)]: camelizeKeys(obj[key]),\n      }),\n      {},\n    )\n  }\n  return obj\n}\n","import { TransactionHistory } from \"../rosetta_interface\"\nimport { camelizeKeys } from \"../util\"\n\nexport async function mapToTransactionHistory(\n  response: Response,\n): Promise<TransactionHistory> {\n  return await response\n    .json()\n    .then((data) => camelizeKeys(data) as TransactionHistory)\n    .then((data) => {\n      // PASHUNYA REFACTOR. LOOKS WEIRD\n      return {\n        totalCount: data.totalCount,\n        transactions: data.transactions.map((transaction) => ({\n          blockIdentifier: transaction.blockIdentifier,\n          transaction: {\n            metadata: transaction.transaction.metadata,\n            transactionIdentifier:\n              transaction.transaction.transactionIdentifier,\n            operations: transaction.transaction.operations.map((operation) => ({\n              ...operation,\n              amount: {\n                currency: operation.amount.currency,\n                value: (Number(operation.amount.value) / 10 ** 8).toString(),\n              },\n            })),\n          },\n        })),\n      } as TransactionHistory\n    })\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\n\nimport { getRosettaRequest, restCall, rosetta } from \"@nfid/integration\"\n\nimport { TransactionHistory } from \"frontend/integration/rosetta/rosetta_interface\"\n\nimport { mapToTransactionHistory } from \"./map-to-transaction-history\"\n\nexport async function getTransactionHistory(\n  principal: Principal,\n): Promise<TransactionHistory> {\n  let request = getRosettaRequest(principalToAddress(principal))\n  return await restCall(\"POST\", `${rosetta}/search/transactions`, request).then(\n    mapToTransactionHistory,\n  )\n}\n","import useSWR from \"swr\"\n\nimport { useAllPrincipals } from \"frontend/integration/internet-identity/queries\"\nimport { getAllTransactionHistory } from \"frontend/integration/rosetta/transactions/get-all-transaction-history\"\n\nexport const useAllTransactions = () => {\n  const { principals } = useAllPrincipals()\n\n  const { data: transactions, isValidating: isWalletTransactionsLoading } =\n    useSWR(\n      principals\n        ? [principals.map(({ principal }) => principal), \"allTransactions\"]\n        : null,\n      ([principals]) => getAllTransactionHistory(principals),\n      {\n        dedupingInterval: 30_000,\n        focusThrottleInterval: 30_000,\n      },\n    )\n\n  console.debug(\"useAllTransactions\", {\n    transactions,\n    isWalletTransactionsLoading,\n  })\n\n  return { transactions, isWalletTransactionsLoading }\n}\n","import { Principal } from \"@dfinity/principal\"\n\nimport { TransactionHistory } from \"frontend/integration/rosetta/rosetta_interface\"\n\nimport { getTransactionHistory } from \".\"\nimport { reduceAllTransactions } from \"./reduce-all-transactions\"\n\nexport async function getAllTransactionHistory(\n  principals: Principal[],\n): Promise<TransactionHistory> {\n  return reduceAllTransactions(\n    await Promise.all(principals.map(getTransactionHistory)),\n  )\n}\n","import { TransactionHistory } from \"../rosetta_interface\"\n\nexport const reduceAllTransactions = (transactions: TransactionHistory[]) => {\n  return transactions.reduce<TransactionHistory>(\n    (acc, current) => {\n      const accumulatedBlockIdentifier = acc.transactions.map(\n        (tx) => tx.blockIdentifier.hash,\n      )\n      const newBlockIdentifiers = current.transactions\n        .filter(\n          (tx) =>\n            accumulatedBlockIdentifier.indexOf(tx.blockIdentifier.hash) === -1,\n        )\n        .map((tx) => tx.blockIdentifier.hash)\n\n      if (!newBlockIdentifiers.length) return acc\n\n      const filteredTransactions = current.transactions.filter(\n        (tx) => newBlockIdentifiers.indexOf(tx.blockIdentifier.hash) !== -1,\n      )\n      return {\n        totalCount: acc.totalCount + filteredTransactions.length,\n        transactions: [...acc.transactions, ...filteredTransactions],\n      }\n    },\n    { totalCount: 0, transactions: [] } as TransactionHistory,\n  )\n}\n","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgClose(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.5352 4.46484L4.46409 11.5359\",\n    stroke: \"black\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.46484 4.46484L11.5359 11.5359\",\n    stroke: \"black\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.07f2bcc689da6dc4045266d9bafb5bd0.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { Image } from \"@nfid-frontend/ui\"\n\nimport iconClose from \"./close.svg\"\n\nexport interface IChip {\n  onRemove?: (value: string) => void\n  title: string\n}\n\nexport const Chip: React.FC<IChip> = ({ onRemove, title }) => {\n  if (!title?.length) return null\n\n  return (\n    <div\n      className={clsx(\n        \"flex items-center space-x-1 pl-2 pr-0.5 py-0.5\",\n        \"border border-black rounded-full\",\n        \"w-max\",\n      )}\n    >\n      <span className=\"text-xs tracking-[0.16px]\">{title}</span>\n      <Image\n        onClick={() => onRemove && onRemove(title)}\n        className={clsx(\n          \"block w-4 cursor-pointer\",\n          \"hover:bg-gray-200 rounded-full\",\n        )}\n        src={iconClose}\n        alt=\"\"\n      />\n    </div>\n  )\n}\n","import clsx from \"clsx\"\nimport { TransactionRow } from \"packages/integration/src/lib/asset/types\"\nimport React, { useState } from \"react\"\n\nimport {\n  FilterPopover,\n  DropdownSelect,\n  IconCmpFilters,\n  IOption,\n  TabsSwitcher,\n} from \"@nfid-frontend/ui\"\n\nimport { Chip } from \"frontend/ui/atoms/chip\"\nimport Pagination from \"frontend/ui/molecules/pagination\"\nimport ProfileContainer from \"frontend/ui/templates/profile-container/Container\"\nimport ProfileTemplate from \"frontend/ui/templates/profile-template/Template\"\n\ninterface IProfileTransactionsPage\n  extends React.HTMLAttributes<HTMLDivElement> {\n  sentData: TransactionRow[]\n  receivedData: TransactionRow[]\n  transactionsFilterOptions: IOption[]\n  onChipRemove: (value: string) => void\n  setTransactionFilter: (value: string[]) => void\n  selectedTransactionFilter: IOption[]\n  blockchainOptions: string[]\n  resetBlockchainFilter: () => void\n  blockchainFilter: string[]\n  setBlockchainFilter: (value: string[]) => void\n}\n\nconst tabs = [\n  {\n    name: \"Sent\",\n    title: <>Sent</>,\n  },\n  {\n    name: \"Received\",\n    title: <>Received</>,\n  },\n]\n\nconst ProfileTransactionsPage: React.FC<IProfileTransactionsPage> = ({\n  sentData,\n  receivedData,\n  transactionsFilterOptions,\n  setTransactionFilter,\n  selectedTransactionFilter,\n  onChipRemove,\n  resetBlockchainFilter,\n  blockchainFilter,\n  blockchainOptions,\n  setBlockchainFilter,\n}) => {\n  const [activeTab, setActiveTab] = useState(\"Sent\")\n  const [filteredData, setFilteredData] = useState<TransactionRow[]>([])\n\n  return (\n    <ProfileTemplate\n      pageTitle=\"Transactions history\"\n      className=\"w-full z-[1]\"\n      showBackButton\n    >\n      <ProfileContainer className={clsx(`bg-gray-200`)}>\n        <div className=\"flex items-center justify-between w-full space-x-10 \">\n          <DropdownSelect\n            bordered={false}\n            options={transactionsFilterOptions}\n            placeholder=\"All wallets\"\n            setSelectedValues={setTransactionFilter}\n            selectedValues={selectedTransactionFilter.map((f) => f.value)}\n            isSearch\n          />\n          <FilterPopover\n            onReset={() => resetBlockchainFilter()}\n            trigger={<IconCmpFilters className=\"cursor-pointer\" />}\n            align=\"end\"\n          >\n            <DropdownSelect\n              label=\"Blockchain\"\n              options={blockchainOptions.map((f) => ({\n                label: f,\n                value: f,\n              }))}\n              selectedValues={blockchainFilter}\n              setSelectedValues={setBlockchainFilter}\n            />\n          </FilterPopover>\n        </div>\n      </ProfileContainer>\n      {/* TODO: create Chiplist component */}\n      <div className=\"mt-6 flex w-full flex-wrap gap-2.5\">\n        {selectedTransactionFilter.map((chip) => (\n          <Chip key={chip.label} title={chip.label} onRemove={onChipRemove} />\n        ))}\n      </div>\n      <TabsSwitcher\n        className=\"mt-6\"\n        tabs={tabs}\n        activeTab={activeTab}\n        setActiveTab={setActiveTab}\n      />\n      <div className=\"w-full overflow-y-scroll\">\n        {filteredData.length ? (\n          <>\n            <table className={clsx(\"text-left w-full mb-16 sm:mb-0\")}>\n              <thead className={clsx(\"border-b border-black h-16\")}>\n                <tr className={clsx(\"font-bold text-sm leading-5\")}>\n                  <th className=\"pl-4 w-[285px]\">Date</th>\n                  <th className=\"w-[95px]\">Asset</th>\n                  <th className=\"w-[160px]\">Quantity</th>\n                  <th className=\"min-w-[235px] pr-5\">From</th>\n                  <th className=\"min-w-[235px]\">To</th>\n                </tr>\n              </thead>\n              <tbody className={clsx(\"text-sm text-[#0B0E13] border-b\")}>\n                {filteredData.map((transaction, index) => (\n                  <tr\n                    className={clsx(\n                      \"hover:bg-[#F3F4F6] hover:cursor-pointer h-16\",\n                    )}\n                    key={`transaction_${index}_${transaction.date}}`}\n                    id={`transaction_${index}`}\n                  >\n                    <td\n                      className=\"pl-4 whitespace-nowrap\"\n                      id={`transaction_date_${index}`}\n                    >\n                      {transaction.date}\n                    </td>\n                    <td id={`transaction_asset_${index}`}>\n                      {transaction.asset}\n                    </td>\n                    <td id={`transaction_quantity_${index}`}>\n                      {transaction.quantity}\n                    </td>\n                    <td>\n                      <span\n                        className={clsx(\n                          \"inline-block max-w-[400px] break-words pr-5\",\n                        )}\n                        id={`transaction_from_${index}`}\n                      >\n                        {transaction.from}\n                      </span>\n                    </td>\n                    <td>\n                      <span\n                        className={clsx(\n                          \"inline-block max-w-[400px] break-words\",\n                        )}\n                        id={`transaction_to_${index}`}\n                      >\n                        {transaction.to}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        ) : (\n          <div\n            className={clsx(\n              \"w-full h-[50vh]\",\n              \"flex justify-center items-center flex-col\",\n            )}\n          >\n            <p className=\"mb-4 text-sm text-center\">\n              No recent transactions to display.\n            </p>\n          </div>\n        )}\n      </div>\n      <div className={clsx(\"my-2\")}>\n        <Pagination\n          data={activeTab === \"Sent\" ? sentData : receivedData}\n          id={`active_tab_` + activeTab}\n          sliceData={setFilteredData}\n        />\n      </div>\n    </ProfileTemplate>\n  )\n}\n\nexport default ProfileTransactionsPage\n","import { principalToAddress } from \"ictool\"\nimport { TransactionRow } from \"packages/integration/src/lib/asset/types\"\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { useLocation } from \"react-router-dom\"\nimport { useBtcTransactions } from \"src/features/fungable-token/btc/hooks/use-btc-transactions\"\nimport { useErc20Transactions } from \"src/features/fungable-token/erc-20/hooks/use-erc-20-transactions\"\nimport { useErc20TransactionsPolygon } from \"src/features/fungable-token/erc-20/hooks/use-erc-20-transactions-polygon\"\nimport { useMaticTransactions } from \"src/features/fungable-token/matic/hooks/use-matic-transactions\"\nimport { useUserPolygonNFTTransactions } from \"src/features/non-fungable-token/eth/use-user-polygon-transactions\"\n\nimport { IOption } from \"@nfid-frontend/ui\"\nimport { sortByDate } from \"@nfid-frontend/utils\"\nimport { blockchains } from \"@nfid/config\"\n\nimport { useEthTransactions } from \"frontend/features/fungable-token/eth/hooks/use-eth-transactions\"\nimport { useUserEthNFTTransactions } from \"frontend/features/non-fungable-token/eth/use-user-nft-transactions\"\nimport {\n  selectReceivedTransactions,\n  selectSendTransactions,\n} from \"frontend/integration/rosetta/select-transactions\"\nimport { useAllWallets } from \"frontend/integration/wallet/hooks/use-all-wallets\"\nimport { useWallet } from \"frontend/integration/wallet/hooks/use-wallet\"\nimport { Loader } from \"frontend/ui/atoms/loader\"\nimport ProfileTransactionsPage from \"frontend/ui/pages/new-profile/transaction-history\"\n\nconst ProfileTransactions = () => {\n  const { walletTransactions, isWalletLoading } = useWallet()\n  const { sendTransactions: sendEthTXs, receiveTransactions: receiveEthTXs } =\n    useEthTransactions()\n  const { txs: btcTxs } = useBtcTransactions()\n  const { txs: maticTxs } = useMaticTransactions()\n  const { erc20txs } = useErc20Transactions()\n  const { transactions: nftTransactions } = useUserEthNFTTransactions()\n  const { transactions: nftPolygonTransactions } =\n    useUserPolygonNFTTransactions()\n  const { erc20txs: erc20txsPolygon } = useErc20TransactionsPolygon()\n\n  const { wallets } = useAllWallets()\n\n  const location = useLocation()\n\n  const [selectedAccountFilters, setSelectedAccountFilters] = useState<\n    IOption[]\n  >([])\n  const [selectedBlockchainFilters, setSelectedBlockchainFilters] = useState<\n    string[]\n  >([])\n\n  const isNFIDAccount = useMemo(() => {\n    if (!wallets.length) return false\n    return !selectedAccountFilters.length\n      ? true\n      : !!selectedAccountFilters.find(\n          (f) => f?.value === principalToAddress(wallets[0]?.principal),\n        )\n      ? true\n      : false\n  }, [selectedAccountFilters, wallets])\n\n  const sendTransactions: TransactionRow[] = useMemo(() => {\n    const ICTransactions = selectSendTransactions({\n      transactions: walletTransactions ?? { totalCount: 0, transactions: [] },\n      accounts: selectedAccountFilters.length\n        ? selectedAccountFilters.map((f) => f.value)\n        : wallets.map((w) => principalToAddress(w.principal)),\n    })\n    const ETHTransactions = isNFIDAccount ? sendEthTXs : []\n    const BTCTransactions = isNFIDAccount ? btcTxs?.sendTransactions ?? [] : []\n    const ERC20Transactions = isNFIDAccount\n      ? erc20txs?.sendTransactions ?? []\n      : []\n    const ETHNFTTransactions = isNFIDAccount\n      ? nftTransactions?.filter((t) => t.type === \"send\") ?? []\n      : []\n    const PolygonNFTTransactions = isNFIDAccount\n      ? nftPolygonTransactions?.filter((t) => t.type === \"send\") ?? []\n      : []\n    const ERC20TransactionsPolygon = isNFIDAccount\n      ? erc20txsPolygon?.sendTransactions ?? []\n      : []\n    const TransactionsPolygon = isNFIDAccount\n      ? maticTxs?.sendTransactions ?? []\n      : []\n    if (!selectedBlockchainFilters.length)\n      return sortByDate(\n        [\n          ...ICTransactions,\n          ...ETHTransactions,\n          ...BTCTransactions,\n          ...ERC20Transactions,\n          ...ETHNFTTransactions,\n          ...PolygonNFTTransactions,\n          ...ERC20TransactionsPolygon,\n          ...TransactionsPolygon,\n        ],\n        \"MMM dd',' yyyy - hh:mm:ss a\",\n      )\n\n    let transactions = []\n\n    selectedBlockchainFilters.includes(\"Internet Computer\") &&\n      transactions.push(...ICTransactions)\n    selectedBlockchainFilters.includes(\"Ethereum\") &&\n      transactions.push(\n        ...ETHTransactions,\n        ...ERC20Transactions,\n        ...ETHNFTTransactions,\n      )\n    selectedBlockchainFilters.includes(\"Polygon\") &&\n      transactions.push(\n        ...ERC20TransactionsPolygon,\n        ...TransactionsPolygon,\n        ...PolygonNFTTransactions,\n      )\n    selectedBlockchainFilters.includes(\"Bitcoin\") &&\n      transactions.push(...BTCTransactions)\n\n    return sortByDate(transactions, \"MMM dd',' yyyy - hh:mm:ss a\")\n  }, [\n    walletTransactions,\n    selectedAccountFilters,\n    wallets,\n    isNFIDAccount,\n    nftPolygonTransactions,\n    sendEthTXs,\n    btcTxs?.sendTransactions,\n    erc20txs?.sendTransactions,\n    nftTransactions,\n    selectedBlockchainFilters,\n    erc20txsPolygon?.sendTransactions,\n    maticTxs?.sendTransactions,\n  ])\n\n  const receivedTransactions: TransactionRow[] = useMemo(() => {\n    const ICTransactions = selectReceivedTransactions({\n      transactions: walletTransactions ?? { totalCount: 0, transactions: [] },\n      accounts: selectedAccountFilters.length\n        ? selectedAccountFilters.map((f) => f.value)\n        : wallets.map((w) => principalToAddress(w.principal)),\n    })\n    const ETHTransactions = isNFIDAccount ? receiveEthTXs : []\n    const ERC20Transactions = isNFIDAccount\n      ? erc20txs?.receivedTransactions ?? []\n      : []\n\n    const ERC20TransactionsPolygon = isNFIDAccount\n      ? erc20txsPolygon?.receivedTransactions ?? []\n      : []\n\n    const TransactionsPolygon = isNFIDAccount\n      ? maticTxs?.receivedTransactions ?? []\n      : []\n\n    const BTCTransactions = isNFIDAccount\n      ? btcTxs?.receivedTransactions ?? []\n      : []\n\n    const ETHNFTTransactions = isNFIDAccount\n      ? nftTransactions?.filter((t) => t.type === \"received\") ?? []\n      : []\n\n    const PolygonNFTTransactions = isNFIDAccount\n      ? nftPolygonTransactions?.filter((t) => t.type === \"received\") ?? []\n      : []\n\n    if (!selectedBlockchainFilters.length)\n      return sortByDate(\n        [\n          ...ICTransactions,\n          ...ETHTransactions,\n          ...BTCTransactions,\n          ...ERC20Transactions,\n          ...ETHNFTTransactions,\n          ...PolygonNFTTransactions,\n          ...ERC20TransactionsPolygon,\n          ...TransactionsPolygon,\n        ],\n        \"MMM dd',' yyyy - hh:mm:ss a\",\n      )\n\n    let transactions = []\n\n    selectedBlockchainFilters.includes(\"Internet Computer\") &&\n      transactions.push(...ICTransactions)\n    selectedBlockchainFilters.includes(\"Ethereum\") &&\n      transactions.push(\n        ...ETHTransactions,\n        ...ERC20Transactions,\n        ...ETHNFTTransactions,\n      )\n    selectedBlockchainFilters.includes(\"Bitcoin\") &&\n      transactions.push(...BTCTransactions)\n    selectedBlockchainFilters.includes(\"Polygon\") &&\n      transactions.push(\n        ...ERC20TransactionsPolygon,\n        ...TransactionsPolygon,\n        ...PolygonNFTTransactions,\n      )\n\n    return sortByDate(transactions, \"MMM dd',' yyyy - hh:mm:ss a\")\n  }, [\n    walletTransactions,\n    selectedAccountFilters,\n    wallets,\n    isNFIDAccount,\n    receiveEthTXs,\n    erc20txs?.receivedTransactions,\n    erc20txsPolygon?.receivedTransactions,\n    maticTxs?.receivedTransactions,\n    btcTxs?.receivedTransactions,\n    nftTransactions,\n    nftPolygonTransactions,\n    selectedBlockchainFilters,\n  ])\n\n  const accountsOptions = useMemo(() => {\n    return wallets.map((w) => {\n      const ICTransactionsLength =\n        selectReceivedTransactions({\n          transactions: walletTransactions ?? {\n            totalCount: 0,\n            transactions: [],\n          },\n          accounts: [principalToAddress(w.principal)],\n        }).length +\n        selectSendTransactions({\n          transactions: walletTransactions ?? {\n            totalCount: 0,\n            transactions: [],\n          },\n          accounts: [principalToAddress(w.principal)],\n        }).length\n\n      const transactionsLength =\n        w.domain === \"nfid.one\"\n          ? sendEthTXs.length +\n            receiveEthTXs.length +\n            (btcTxs?.sendTransactions?.length ?? 0) +\n            (btcTxs?.receivedTransactions?.length ?? 0) +\n            (erc20txs?.sendTransactions?.length ?? 0) +\n            (erc20txs?.receivedTransactions?.length ?? 0) +\n            (erc20txsPolygon?.sendTransactions?.length ?? 0) +\n            (erc20txsPolygon?.receivedTransactions?.length ?? 0) +\n            (maticTxs?.sendTransactions?.length ?? 0) +\n            (maticTxs?.receivedTransactions?.length ?? 0) +\n            (nftPolygonTransactions?.length ?? 0) +\n            (nftTransactions?.length ?? 0) +\n            ICTransactionsLength\n          : ICTransactionsLength\n\n      return {\n        label: w.label,\n        value: principalToAddress(w.principal),\n        afterLabel: `${transactionsLength} TXs`,\n      } as IOption\n    })\n  }, [\n    btcTxs?.receivedTransactions?.length,\n    btcTxs?.sendTransactions?.length,\n    erc20txs?.receivedTransactions?.length,\n    erc20txs?.sendTransactions?.length,\n    erc20txsPolygon?.receivedTransactions?.length,\n    erc20txsPolygon?.sendTransactions?.length,\n    maticTxs?.receivedTransactions?.length,\n    maticTxs?.sendTransactions?.length,\n    receiveEthTXs.length,\n    sendEthTXs.length,\n    walletTransactions,\n    wallets,\n    nftPolygonTransactions,\n    nftTransactions,\n  ])\n\n  const handleSelectAccountFilter = useCallback(\n    (value: string[]) => {\n      const options = value.map((v) =>\n        accountsOptions.find((o) => o.value === v),\n      )\n      setSelectedAccountFilters(\n        options.filter((o) => o !== undefined) as IOption[],\n      )\n    },\n    [accountsOptions],\n  )\n\n  const handleRemoveFilterChip = React.useCallback(\n    (value: string) => {\n      const transactionFilter = selectedAccountFilters.filter(\n        (chip) => chip.label !== value,\n      )\n      setSelectedAccountFilters(transactionFilter)\n    },\n    [selectedAccountFilters],\n  )\n\n  useEffect(() => {\n    const wallet = location.state?.wallet\n    wallet && setSelectedAccountFilters([wallet])\n  }, [location.state?.wallet])\n\n  useEffect(() => {\n    const blockchain = location.state?.blockchain\n    if (!blockchain) return\n    setSelectedBlockchainFilters([blockchain])\n  }, [location.state?.blockchain])\n\n  return (\n    <>\n      <Loader isLoading={isWalletLoading} />\n      <ProfileTransactionsPage\n        sentData={sendTransactions}\n        receivedData={receivedTransactions}\n        transactionsFilterOptions={accountsOptions}\n        setTransactionFilter={handleSelectAccountFilter}\n        selectedTransactionFilter={selectedAccountFilters}\n        onChipRemove={handleRemoveFilterChip}\n        blockchainOptions={blockchains}\n        resetBlockchainFilter={() => setSelectedBlockchainFilters(blockchains)}\n        blockchainFilter={selectedBlockchainFilters}\n        setBlockchainFilter={setSelectedBlockchainFilters}\n      />\n    </>\n  )\n}\n\nexport default ProfileTransactions\n","import { principalToAddress } from \"ictool\"\nimport { useEffect, useMemo } from \"react\"\nimport useSWR, { mutate } from \"swr\"\nimport useSWRImmutable from \"swr/immutable\"\n\nimport { getBalance } from \"@nfid/integration\"\n\nimport { useICPExchangeRate } from \"frontend/features/fungable-token/icp/hooks/use-icp-exchange-rate\"\nimport { getWalletPrincipal } from \"frontend/integration/facade/wallet\"\nimport { useProfile } from \"frontend/integration/identity-manager/queries\"\n\nimport { useAllTransactions } from \"./get-all-transactions\"\n\nexport const useWallet = () => {\n  const { profile } = useProfile()\n\n  const { data: principal, isValidating: isWalletPrincipalLoading } =\n    useSWRImmutable(\n      profile?.anchor ? [profile.anchor, \"walletPrincipal\"] : null,\n      getWalletPrincipal,\n    )\n\n  const { data: balance, isValidating: isWalletBalanceLoading } = useSWR(\n    principal ? [principalToAddress(principal), \"walletBalance\"] : null,\n    ([address]) => getBalance(address),\n    {\n      dedupingInterval: 30_000,\n      focusThrottleInterval: 30_000,\n      refreshInterval: 30_000,\n    },\n  )\n\n  const { transactions, isWalletTransactionsLoading } = useAllTransactions()\n\n  const { exchangeRate, isValidating: isWalletExchangeRateLoading } =\n    useICPExchangeRate()\n\n  const address = useMemo(() => {\n    if (!principal) return \"\"\n    return principalToAddress(principal)\n  }, [principal])\n\n  useEffect(() => {\n    if (profile?.anchor) mutate(\"walletPrincipal\")\n  }, [profile])\n\n  useEffect(() => {\n    if (!principal) return\n    mutate(\"walletBalance\")\n    mutate(\"walletTransactions\")\n  }, [principal])\n\n  return {\n    walletPrincipal: principal,\n    walletBalance: balance,\n    walletExchangeRate: exchangeRate,\n    walletTransactions: transactions,\n    walletAddress: address,\n    isWalletLoading:\n      isWalletPrincipalLoading ||\n      isWalletBalanceLoading ||\n      isWalletTransactionsLoading ||\n      isWalletExchangeRateLoading,\n  }\n}\n","import { useMemo } from \"react\"\nimport useSWR from \"swr\"\n\nimport { getEthTransactions } from \"../get-eth-transactions\"\n\nexport const useEthTransactions = () => {\n  const { data: txs, ...rest } = useSWR(\n    \"ethereumTransactions\",\n    getEthTransactions,\n  )\n\n  const sendTransactions = useMemo(() => {\n    return txs?.filter((tx) => tx.type === \"send\") ?? []\n  }, [txs])\n\n  const receiveTransactions = useMemo(() => {\n    return txs?.filter((tx) => tx.type === \"received\") ?? []\n  }, [txs])\n\n  return { txs, sendTransactions, receiveTransactions, ...rest }\n}\n","import { getBtcTransactionHistory } from \"src/features/fungable-token/btc/get-btc\"\nimport useSWR from \"swr\"\n\nexport const useBtcTransactions = () => {\n  const { data: txs, ...rest } = useSWR(\n    \"btcTransactions\",\n    getBtcTransactionHistory,\n  )\n\n  return { txs, ...rest }\n}\n","import { getMaticTransactionHistory } from \"src/features/fungable-token/matic/get-matic\"\nimport useSWR from \"swr\"\n\nexport const useMaticTransactions = () => {\n  const { data: txs, ...rest } = useSWR(\n    \"maticTransactions\",\n    getMaticTransactionHistory,\n  )\n\n  return { txs, ...rest }\n}\n","import { getErc20TransactionHistory } from \"src/features/fungable-token/erc-20/get-erc-20\"\nimport useSWR from \"swr\"\n\nexport const useErc20Transactions = () => {\n  const { data: erc20txs, ...rest } = useSWR(\n    \"erc20txs\",\n    getErc20TransactionHistory,\n  )\n\n  return { erc20txs: erc20txs, ...rest }\n}\n","import { format } from \"date-fns\"\nimport { TransactionRow } from \"packages/integration/src/lib/asset/types\"\nimport { useMemo } from \"react\"\nimport useSWR from \"swr\"\n\nimport { useEthAddress } from \"frontend/features/fungable-token/eth/hooks/use-eth-address\"\n\nimport { getUserEthNFTActivity } from \"./get-user-nft-activity\"\n\nexport const useUserEthNFTTransactions = () => {\n  const { address } = useEthAddress()\n  const { data, error, isValidating } = useSWR(\n    \"user-eth-nft-transactions\",\n    getUserEthNFTActivity,\n  )\n\n  const transactions = useMemo(() => {\n    return data?.activities.map(\n      (activity) =>\n        ({\n          asset: \"NFT\",\n          quantity: 1,\n          date: format(new Date(activity.date), \"MMM dd, yyyy - hh:mm:ss aaa\"),\n          from: activity.from.replace(\"ETHEREUM:\", \"\"),\n          to: activity.to.replace(\"ETHEREUM:\", \"\"),\n          type:\n            activity.to.replace(\"ETHEREUM:\", \"\").toLowerCase() ===\n            address?.toLowerCase()\n              ? \"received\"\n              : \"send\",\n        } as TransactionRow),\n    )\n  }, [address, data?.activities])\n\n  return {\n    transactions,\n    error,\n    isValidating,\n  }\n}\n","import { format } from \"date-fns\"\nimport { TransactionRow } from \"packages/integration/src/lib/asset/types\"\nimport { useMemo } from \"react\"\nimport { getUserPolygonNFTActivity } from \"src/features/non-fungable-token/eth/get-user-polygon-activity\"\nimport useSWR from \"swr\"\n\nimport { useEthAddress } from \"frontend/features/fungable-token/eth/hooks/use-eth-address\"\n\nexport const useUserPolygonNFTTransactions = () => {\n  const { address } = useEthAddress()\n  const { data, error, isValidating } = useSWR(\n    \"user-eth-nft-transactions\",\n    getUserPolygonNFTActivity,\n  )\n\n  const transactions = useMemo(() => {\n    return data?.activities.map(\n      (activity) =>\n        ({\n          asset: \"NFT\",\n          quantity: 1,\n          date: format(new Date(activity.date), \"MMM dd, yyyy - hh:mm:ss aaa\"),\n          from: activity.from.replace(\"POLYGON:\", \"\"),\n          to: activity.to.replace(\"POLYGON:\", \"\"),\n          type:\n            activity.to.replace(\"POLYGON:\", \"\").toLowerCase() ===\n            address?.toLowerCase()\n              ? \"received\"\n              : \"send\",\n        } as TransactionRow),\n    )\n  }, [address, data?.activities])\n\n  return {\n    transactions,\n    error,\n    isValidating,\n  }\n}\n","import { getErc20TransactionHistory } from \"src/features/fungable-token/erc-20/get-erc-20-polygon\"\nimport useSWR from \"swr\"\n\nexport const useErc20TransactionsPolygon = () => {\n  const { data: erc20txs, ...rest } = useSWR(\n    \"erc20txsPolygon\",\n    getErc20TransactionHistory,\n  )\n\n  return { erc20txs: erc20txs, ...rest }\n}\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArrow(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 7,\n    height: 12,\n    viewBox: \"0 0 7 12\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1L6 6L1 11\",\n    stroke: \"black\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrow);\nexport default __webpack_public_path__ + \"static/media/arrow.6841536513c8209ea4230cd1055b0668.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArrowDisabled(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 7,\n    height: 12,\n    viewBox: \"0 0 7 12\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6 1L1 6L6 11\",\n    stroke: \"#9CA3AF\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowDisabled);\nexport default __webpack_public_path__ + \"static/media/arrowDisabled.de38d5e2368adca76f6c243f24b39249.svg\";\nexport { ForwardRef as ReactComponent };","import clsx from \"clsx\"\nimport React from \"react\"\n\ninterface IPaginationBox extends React.HTMLAttributes<HTMLDivElement> {\n  isActive?: boolean\n  onClick?: () => void\n  disabled?: boolean\n}\n\nconst PaginationBox: React.FC<IPaginationBox> = ({\n  children,\n  isActive,\n  onClick,\n  disabled,\n  className,\n}) => {\n  return (\n    <div\n      className={clsx(\n        \"w-12 h-12 flex items-center justify-center\",\n        isActive\n          ? \"bg-gray-200 rounded-[6px]\"\n          : \"hover:bg-gray-100  cursor-pointer\",\n        disabled && \"pointer-events-none\",\n        className,\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default PaginationBox\n","import clsx from \"clsx\"\nimport React from \"react\"\n\nimport { Image } from \"@nfid-frontend/ui\"\n\nimport Arrow from \"./assets/arrow.svg\"\nimport ArrowDisabled from \"./assets/arrowDisabled.svg\"\n\nimport Box from \"./pagination-box\"\n\ninterface IPagination extends React.HTMLAttributes<HTMLDivElement> {\n  data: any[]\n  perPage?: number\n  sliceData: (data: any[]) => void\n}\n\nconst Pagination: React.FC<IPagination> = ({\n  data,\n  perPage = 10,\n  sliceData,\n}) => {\n  const [currentPage, setCurrentPage] = React.useState(1)\n\n  const pagesQuantity = React.useMemo(() => {\n    return Math.round(data.length / perPage)\n  }, [data, perPage])\n\n  React.useEffect(() => {\n    const result = data.slice(\n      (currentPage - 1) * perPage,\n      (currentPage - 1) * perPage + perPage,\n    )\n    if (!result.length) {\n      setCurrentPage(1)\n      sliceData([])\n    } else sliceData(result)\n  }, [currentPage, data, perPage, sliceData])\n\n  return (\n    <div\n      className={clsx(\n        \"flex items-center justify-end\",\n        data.length < perPage + 1 && \"hidden\",\n      )}\n    >\n      <Box\n        disabled={currentPage === 1}\n        onClick={() => setCurrentPage(currentPage - 1)}\n        className={clsx(currentPage !== 1 && \"rotate-180\")}\n      >\n        <Image\n          src={currentPage === 1 ? ArrowDisabled : Arrow}\n          alt=\"arrow next\"\n        />\n      </Box>\n      {Array(pagesQuantity)\n        .fill(null)\n        .map((_, index) => (\n          <Box\n            key={`pagination_box_${index}`}\n            onClick={() => setCurrentPage(index + 1)}\n            isActive={index === currentPage - 1}\n          >\n            {index + 1}\n          </Box>\n        ))}\n      <Box\n        disabled={currentPage === pagesQuantity}\n        onClick={() => setCurrentPage(currentPage + 1)}\n        className={clsx(currentPage === pagesQuantity && \"rotate-180\")}\n      >\n        <Image\n          src={currentPage === pagesQuantity ? ArrowDisabled : Arrow}\n          alt=\"arrow previous\"\n        />\n      </Box>\n    </div>\n  )\n}\n\nexport default Pagination\n","import clsx from \"clsx\"\nimport React from \"react\"\n\ninterface IProfileContainer {\n  title?: string | React.ReactNode\n  subTitle?: string | React.ReactNode\n  children?: React.ReactNode\n  className?: string\n  showChildrenPadding?: boolean\n  id?: string\n}\n\nconst ProfileContainer: React.FC<IProfileContainer> = ({\n  title,\n  subTitle,\n  children,\n  className,\n  showChildrenPadding = true,\n  id,\n}) => {\n  return (\n    <div\n      id={id}\n      className={clsx(\n        \"block border border-gray-200 rounded-xl\",\n        \"py-4 sm:py-[26px]\",\n        className,\n      )}\n    >\n      <div className=\"px-5\">\n        {title && (\n          <div className=\"flex items-center justify-between mb-3 text-xl\">\n            {title}\n          </div>\n        )}\n        {subTitle && (\n          <div className=\"flex items-center justify-between mb-4 text-sm leading-5 text-secondary\">\n            {subTitle}\n          </div>\n        )}\n      </div>\n\n      <div className={clsx(showChildrenPadding && \"px-5 sm:px-[30px]\")}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default ProfileContainer\n","import { isAfter, isBefore } from \"date-fns\"\nimport { compareDesc, parse } from \"date-fns\"\n\nexport const bigIntMillisecondsToSeconds = (date: bigint) => {\n  return Math.floor(Number(date / BigInt(10 ** 6)))\n}\n\n/**\n * Check if date is between to other dates\n * @param date Date\n * @param from Date\n * @param to Date\n * @returns boolean\n */\nexport const isDateBetween = (date: Date, from?: Date, to?: Date) => {\n  if (from && !to) return isAfter(date, from)\n  else if (!from && to) return isBefore(date, to)\n  else if (from && to) return isAfter(date, from) && isBefore(date, to)\n  return true\n}\n\nexport const sortByDate = <T extends { date: Date | string }>(\n  arr: T[],\n  dateFormat?: string,\n): T[] => {\n  return arr.sort((a, b) => {\n    const dateA = dateFormat\n      ? parse(a.date as string, dateFormat, new Date())\n      : (a.date as Date)\n    const dateB = dateFormat\n      ? parse(b.date as string, dateFormat, new Date())\n      : (b.date as Date)\n    return compareDesc(dateA, dateB)\n  })\n}\n"],"names":["getUserPolygonNFTActivity","async","profile","loadProfileFromLocalStorage","fetchProfile","delegation","getWalletDelegation","anchor","polygonAsset","identity","getEthTransactions","address","ethereumAsset","incoming","direction","outcoming","activities","concat","map","tx","type","from","toLowerCase","asset","quantity","price","date","format","Date","to","getUserEthNFTActivity","toTransactionRow","transaction","operations","amount","currency","symbol","Math","abs","Number","value","metadata","timestamp","account","selectSendTransactions","transactions","accounts","filter","transactionRow","indexOf","selectReceivedTransactions","camelizeKeys","obj","Array","isArray","v","constructor","Object","keys","reduce","result","key","camelCase","mapToTransactionHistory","response","json","then","data","totalCount","blockIdentifier","transactionIdentifier","operation","toString","getTransactionHistory","principal","request","getRosettaRequest","principalToAddress","restCall","rosetta","useAllTransactions","principals","useAllPrincipals","isValidating","isWalletTransactionsLoading","useSWR","acc","current","accumulatedBlockIdentifier","hash","newBlockIdentifiers","length","filteredTransactions","reduceAllTransactions","Promise","all","getAllTransactionHistory","dedupingInterval","focusThrottleInterval","console","debug","Chip","onRemove","title","className","clsx","onClick","src","iconClose","alt","tabs","name","sentData","receivedData","transactionsFilterOptions","setTransactionFilter","selectedTransactionFilter","onChipRemove","resetBlockchainFilter","blockchainFilter","blockchainOptions","setBlockchainFilter","activeTab","setActiveTab","useState","filteredData","setFilteredData","pageTitle","showBackButton","bordered","options","placeholder","setSelectedValues","selectedValues","f","isSearch","onReset","trigger","align","label","chip","index","id","sliceData","walletTransactions","isWalletLoading","useProfile","isWalletPrincipalLoading","useSWRImmutable","getWalletPrincipal","balance","isWalletBalanceLoading","getBalance","refreshInterval","exchangeRate","isWalletExchangeRateLoading","useICPExchangeRate","useMemo","useEffect","mutate","walletPrincipal","walletBalance","walletExchangeRate","walletAddress","useWallet","sendTransactions","sendEthTXs","receiveTransactions","receiveEthTXs","txs","rest","useEthTransactions","btcTxs","getBtcTransactionHistory","useBtcTransactions","maticTxs","getMaticTransactionHistory","useMaticTransactions","erc20txs","getErc20TransactionHistory","useErc20Transactions","nftTransactions","useEthAddress","error","activity","replace","useUserEthNFTTransactions","nftPolygonTransactions","useUserPolygonNFTTransactions","erc20txsPolygon","useErc20TransactionsPolygon","wallets","useAllWallets","location","useLocation","selectedAccountFilters","setSelectedAccountFilters","selectedBlockchainFilters","setSelectedBlockchainFilters","isNFIDAccount","find","ICTransactions","w","ETHTransactions","BTCTransactions","ERC20Transactions","ETHNFTTransactions","t","PolygonNFTTransactions","ERC20TransactionsPolygon","TransactionsPolygon","sortByDate","includes","push","receivedTransactions","accountsOptions","ICTransactionsLength","transactionsLength","domain","afterLabel","handleSelectAccountFilter","useCallback","o","undefined","handleRemoveFilterChip","React","transactionFilter","wallet","state","blockchain","isLoading","blockchains","children","isActive","disabled","perPage","currentPage","setCurrentPage","pagesQuantity","round","slice","ArrowDisabled","Arrow","fill","_","subTitle","showChildrenPadding","bigIntMillisecondsToSeconds","floor","BigInt","isDateBetween","isAfter","isBefore","arr","dateFormat","sort","a","b","dateA","parse","dateB","compareDesc"],"sourceRoot":""}