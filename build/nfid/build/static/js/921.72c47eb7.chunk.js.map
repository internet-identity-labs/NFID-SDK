{"version":3,"file":"static/js/921.72c47eb7.chunk.js","mappings":"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","sources":["features/embed/components/batch-buy.tsx","integration/identity-manager/account/utils.ts","features/fungable-token/accumulate-app-account-balances.ts"],"sourcesContent":["import { useMemo } from \"react\"\n\nimport { IWarningAccordionOption } from \"@nfid-frontend/ui\"\nimport { Item } from \"@nfid/integration-ethereum\"\n\nimport { ApproverCmpProps } from \"frontend/features/embed/types\"\nimport { calcPrice } from \"frontend/features/embed/util/calcPriceUtil\"\nimport { toUSD } from \"frontend/features/fungable-token/accumulate-app-account-balances\"\nimport { useExchangeRates } from \"frontend/features/fungable-token/eth/hooks/use-eth-exchange-rate\"\n\nimport { SendTransaction } from \"../ui/send-transaction\"\n\nconst MappedBuy: React.FC<ApproverCmpProps> = ({\n  appMeta,\n  rpcMessage,\n  rpcMessageDecoded,\n  populatedTransaction,\n  disableConfirmButton,\n  onConfirm,\n  onReject,\n}) => {\n  const { rates } = useExchangeRates()\n\n  const price = useMemo(() => {\n    return calcPrice(rates, populatedTransaction)\n  }, [rates, populatedTransaction])\n\n  const warnings = useMemo(() => {\n    if (!price) return []\n    let warnings: IWarningAccordionOption[] = []\n\n    if (price.isNetworkIsBusyWarning)\n      warnings.push({\n        title: \"Network is busy\",\n        subtitle: (\n          <>\n            Gas prices are high and estimates are less accurate.\n            <span className=\"text-blue-600\"> Adjust the network fee.</span>\n          </>\n        ),\n      })\n\n    return warnings\n  }, [price])\n\n  const assets = useMemo(() => {\n    return rpcMessageDecoded?.data?.items?.map(\n      (item: { amount: string; fee: string; item: { data: Item } }) => ({\n        icon: item?.item?.data?.meta?.content[0]?.url,\n        title: item?.item?.data?.meta?.name,\n        subtitle: item?.item?.data?.collectionData?.name,\n        innerTitle: Number(item?.amount) / 10 ** 18 + \" ETH\",\n        innerSubtitle: toUSD(Number(item?.amount) / 10 ** 18, rates[\"ETH\"]),\n      }),\n    )\n  }, [rates, rpcMessageDecoded?.data?.items])\n\n  const total = useMemo(() => {\n    if (!populatedTransaction) return\n\n    return String(Number(populatedTransaction[0]?.value) / 10 ** 18)\n  }, [populatedTransaction])\n\n  return (\n    <SendTransaction\n      title=\"Buy multiple collectibles\"\n      applicationMeta={appMeta}\n      fromAddress={rpcMessage?.params[0].from}\n      toAddress={rpcMessage?.params[0].to}\n      network={\"Ethereum\"}\n      networkFee={price.fee}\n      totalUSD={price.totalUsd}\n      totalToken={price.total}\n      price={total}\n      currency={\"ETH\"}\n      onApprove={onConfirm}\n      disableApproveButton={disableConfirmButton}\n      isInsufficientBalance={price.isInsufficientFundsError}\n      warnings={warnings}\n      onCancel={onReject}\n      assets={assets}\n    />\n  )\n}\n\nexport default MappedBuy\n","import { Account, Application } from \"@nfid/integration\"\n\nexport const isDefaultLabel = (a: string) =>\n  /^Account #\\d*$/.test(a) || a === undefined || a === \"\"\n\nexport const getWalletName = (account: Account, application?: Application) => {\n  const accountLabel = isDefaultLabel(account.label)\n    ? `account ${Number(account.accountId) + 1}`\n    : account.label\n\n  const applicationName =\n    application?.name || account.alias?.[0] || account.domain\n\n  return `${applicationName} ${accountLabel}`\n}\n","import { Principal } from \"@dfinity/principal\"\nimport { principalToAddress } from \"ictool\"\nimport {\n  AppBalance,\n  TokenBalanceSheet,\n} from \"packages/integration/src/lib/asset/types\"\n\nimport { Application, Balance } from \"@nfid/integration\"\n\nimport { AccountBalance } from \"frontend/features/fungable-token/fetch-balances\"\nimport { isDefaultLabel } from \"frontend/integration/identity-manager/account/utils\"\nimport {\n  e8sICPToString,\n  stringICPtoE8s,\n} from \"frontend/integration/wallet/utils\"\n\nexport const sumE8sICPString = (a: string, b: string) => {\n  return e8sICPToString(stringICPtoE8s(a) + stringICPtoE8s(b))\n}\n\nexport const toUSD = (value: number, exchangeRate: number) =>\n  exchangeRate !== 0 ? `$${(exchangeRate * value).toFixed(2)}` : ``\n\ntype MapApplicationBalanceArgs = {\n  toPresentation: (value?: bigint) => number\n  appName: string\n  currentAppTotalBalance: Balance\n  token: string\n  accountBalance: AccountBalance\n  exchangeRate: number\n  applicationMatch?: Application\n  currentApp?: AppBalance\n  isExplicitlyIncluded?: boolean\n}\n\nfunction mapApplicationBalance({\n  toPresentation,\n  appName,\n  currentAppTotalBalance,\n  token,\n  accountBalance,\n  exchangeRate,\n  applicationMatch,\n  currentApp,\n  isExplicitlyIncluded,\n}: MapApplicationBalanceArgs): AppBalance {\n  return {\n    icon: applicationMatch?.icon,\n    appName: appName,\n    tokenBalance: currentAppTotalBalance,\n    accounts: [\n      ...(currentApp?.accounts ?? []),\n      ...(accountBalance.balance[token] > 0 || isExplicitlyIncluded\n        ? [\n            {\n              accountName:\n                isDefaultLabel(accountBalance.account.label) ||\n                !accountBalance.account.label\n                  ? `account ${parseInt(accountBalance.account.accountId) + 1}`\n                  : accountBalance.account.label,\n              principalId: accountBalance.principalId,\n              address: principalToAddress(\n                Principal.fromText(accountBalance.principalId),\n              ),\n              tokenBalance: accountBalance.balance[token],\n              usdBalance: toUSD(\n                toPresentation(accountBalance.balance[token]),\n                exchangeRate,\n              ),\n            },\n          ]\n        : []),\n    ].sort((a, b) => a.accountName.localeCompare(b.accountName)),\n  }\n}\n\ntype ReduceRawToAppAccountBalanceArgs = {\n  toPresentation: (value?: bigint) => number\n  balances: AccountBalance[]\n  applications?: Application[]\n  exchangeRate: number\n  excludeEmpty: boolean\n  includeEmptyApps: string[]\n  label: string\n  token: string\n  icon: string\n}\n/**\n * Returns the balance sheet for all applications and their accounts\n *\n * @param balances - balance of a single account\n * @param applications - list of applications from identity manager\n * @param exchangeRate - exchange rate of Token to USD\n * @param excludeEmpty - if true, exclude applications with no balance\n * @param includeEmptyApps - include apps with given appName or domain even if their balance is 0\n */\nexport const accumulateAppAccountBalance = ({\n  toPresentation,\n  balances,\n  applications = [],\n  exchangeRate,\n  excludeEmpty,\n  includeEmptyApps,\n  label,\n  token,\n  icon,\n}: ReduceRawToAppAccountBalanceArgs): TokenBalanceSheet => {\n  return balances.reduce<TokenBalanceSheet>(\n    (acc, rawBalance) => {\n      const applicationMatch: Application | undefined = applications.find(\n        (a) => a.domain === rawBalance.account.domain,\n      )\n\n      const appName = applicationMatch\n        ? applicationMatch.name\n        : rawBalance.account.domain\n\n      const currentApp: AppBalance | undefined = acc.applications[appName]\n\n      const totalBalanceValue = acc.tokenBalance + rawBalance.balance[acc.token]\n\n      const currentAppTotalBalance =\n        (acc.applications[appName]?.tokenBalance || BigInt(0)) +\n        rawBalance.balance[acc.token]\n\n      const isExplicitlyIncluded =\n        includeEmptyApps.includes(applicationMatch?.domain || \"\") ||\n        includeEmptyApps.includes(applicationMatch?.name || \"\")\n\n      if (\n        excludeEmpty &&\n        !isExplicitlyIncluded &&\n        currentAppTotalBalance === BigInt(0)\n      )\n        return acc\n\n      return {\n        ...acc,\n        icon: acc.icon,\n        tokenBalance: totalBalanceValue,\n        usdBalance: toUSD(toPresentation(totalBalanceValue), exchangeRate),\n        applications: {\n          ...acc.applications,\n          [appName]: mapApplicationBalance({\n            toPresentation,\n            appName,\n            currentAppTotalBalance,\n            token: acc.token,\n            accountBalance: rawBalance,\n            exchangeRate,\n            applicationMatch,\n            currentApp,\n            isExplicitlyIncluded,\n          }),\n        },\n      }\n    },\n    {\n      label,\n      token,\n      icon,\n      tokenBalance: BigInt(0),\n      usdBalance: \"0\",\n      applications: {},\n    },\n  )\n}\n"],"names":["appMeta","rpcMessage","rpcMessageDecoded","populatedTransaction","disableConfirmButton","onConfirm","onReject","rates","useExchangeRates","price","useMemo","calcPrice","warnings","isNetworkIsBusyWarning","push","title","subtitle","className","assets","data","items","map","item","icon","meta","content","url","name","collectionData","innerTitle","Number","amount","innerSubtitle","toUSD","total","String","value","applicationMeta","fromAddress","params","from","toAddress","to","network","networkFee","fee","totalUSD","totalUsd","totalToken","currency","onApprove","disableApproveButton","isInsufficientBalance","isInsufficientFundsError","onCancel","isDefaultLabel","a","test","undefined","exchangeRate","toFixed","mapApplicationBalance","toPresentation","appName","currentAppTotalBalance","token","accountBalance","applicationMatch","currentApp","isExplicitlyIncluded","tokenBalance","accounts","balance","accountName","account","label","parseInt","accountId","principalId","address","principalToAddress","Principal","usdBalance","sort","b","localeCompare","accumulateAppAccountBalance","balances","applications","excludeEmpty","includeEmptyApps","reduce","acc","rawBalance","find","domain","totalBalanceValue","BigInt","includes"],"sourceRoot":""}