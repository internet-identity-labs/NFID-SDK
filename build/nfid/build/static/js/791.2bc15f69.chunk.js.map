{"version":3,"file":"static/js/791.2bc15f69.chunk.js","mappings":"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","sources":["../../../node_modules/@xstate/react/es/useActor.js","../../../node_modules/immer/src/utils/errors.ts","../../../node_modules/immer/src/utils/common.ts","../../../node_modules/immer/src/utils/plugins.ts","../../../node_modules/immer/src/core/scope.ts","../../../node_modules/immer/src/core/finalize.ts","../../../node_modules/immer/src/core/proxy.ts","../../../node_modules/immer/src/core/immerClass.ts","../../../node_modules/immer/src/core/current.ts","../../../node_modules/immer/src/immer.ts","../../../node_modules/immer/src/utils/env.ts"],"sourcesContent":["import { useRef, useCallback } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport useConstant from './useConstant';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\nexport function isActorWithState(actorRef) {\n    return 'state' in actorRef;\n}\nfunction isDeferredActor(actorRef) {\n    return 'deferred' in actorRef;\n}\nfunction defaultGetSnapshot(actorRef) {\n    return 'getSnapshot' in actorRef\n        ? actorRef.getSnapshot()\n        : isActorWithState(actorRef)\n            ? actorRef.state\n            : undefined;\n}\nexport function useActor(actorRef, getSnapshot) {\n    if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }\n    var actorRefRef = useRef(actorRef);\n    var deferredEventsRef = useRef([]);\n    var subscribe = useCallback(function (handleStoreChange) {\n        var unsubscribe = actorRef.subscribe(handleStoreChange).unsubscribe;\n        return unsubscribe;\n    }, [actorRef]);\n    var boundGetSnapshot = useCallback(function () { return getSnapshot(actorRef); }, [\n        actorRef,\n        getSnapshot\n    ]);\n    var storeSnapshot = useSyncExternalStore(subscribe, boundGetSnapshot, boundGetSnapshot);\n    var send = useConstant(function () { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var event = args[0];\n        if (process.env.NODE_ENV !== 'production' && args.length > 1) {\n            console.warn(\"Unexpected payload: \".concat(JSON.stringify(args[1]), \". Only a single event object can be sent to actor send() functions.\"));\n        }\n        var currentActorRef = actorRefRef.current;\n        // If the previous actor is a deferred actor,\n        // queue the events so that they can be replayed\n        // on the non-deferred actor.\n        if (isDeferredActor(currentActorRef) && currentActorRef.deferred) {\n            deferredEventsRef.current.push(event);\n        }\n        else {\n            currentActorRef.send(event);\n        }\n    }; });\n    useIsomorphicLayoutEffect(function () {\n        actorRefRef.current = actorRef;\n        // Dequeue deferred events from the previous deferred actorRef\n        while (deferredEventsRef.current.length > 0) {\n            var deferredEvent = deferredEventsRef.current.shift();\n            actorRef.send(deferredEvent);\n        }\n    }, [actorRef]);\n    return [storeSnapshot, send];\n}\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyType.Set ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\tstate.copy_![prop] === value &&\n\t\t\t// special case: NaN\n\t\t\ttypeof value !== \"number\" &&\n\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t(value !== undefined || prop in state.copy_)\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (\n\t\targ1: any,\n\t\targ2?: any,\n\t\targ3?: any\n\t): any => {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n"],"names":["isDeferredActor","actorRef","defaultGetSnapshot","getSnapshot","isActorWithState","state","undefined","useActor","actorRefRef","useRef","deferredEventsRef","subscribe","useCallback","handleStoreChange","unsubscribe","boundGetSnapshot","storeSnapshot","useSyncExternalStore","send","args","_i","arguments","length","event","currentActorRef","current","deferred","push","deferredEvent","shift","die","error","msg","Error","map","s","join","isDraft","value","DRAFT_STATE","isDraftable","proto","Object","getPrototypeOf","Ctor","hasOwnProperty","call","constructor","Function","toString","objectCtorString","Array","isArray","DRAFTABLE","isMap","isSet","each","obj","iter","enumerableOnly","getArchtype","keys","ownKeys","forEach","key","entry","index","thing","type_","has","prop","prototype","get","set","propOrOldValue","t","delete","add","is","x","y","target","hasMap","Map","hasSet","Set","latest","copy_","base_","shallowCopy","base","slice","descriptors","getOwnPropertyDescriptors","i","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","clear","dontMutateFrozenCollections","getPlugin","pluginKey","plugin","plugins","getCurrentScope","currentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","NOTHING","rootScope","path","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","res","assigned_","concat","autoFreeze_","peek","getDescriptorFromProto","source","getOwnPropertyDescriptor","markChanged","prepareCopy","createProxy","parent","proxyMap_","proxySet_","isManual_","traps","objectTraps","arrayTraps","Proxy","revocable","revoke","proxy","createES5Proxy_","currentImpl","copy","archType","hasChanges_","copyHelper","from","hasSymbol","Symbol","hasProxies","Reflect","for","iterator","getOwnPropertySymbols","getOwnPropertyNames","_desc$get","currentState","deleteProperty","owner","defineProperty","setPrototypeOf","fn","apply","this","Immer","e","config","recipe","defaultBase","self","_this","produce","_this2","hasError","Promise","then","p","ip","arg1","arg2","produceWithPatches","patches","inversePatches","nextState","useProxies","setUseProxies","autoFreeze","setAutoFreeze","createDraft","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","bind"],"sourceRoot":""}