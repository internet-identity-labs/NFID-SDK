{"version":3,"file":"static/js/651.4cbe8a4a.chunk.js","mappings":"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","sources":["assets/dfinity.svg","features/fungable-token/dip-20/hooks/use-all-token-meta.ts","features/fungable-token/icp/hooks/use-icp-exchange-rate.ts","features/fungable-token/icp/hooks/use-user-balances.ts","ui/connnector/fungible-asset-screen/fungible-asset.ts","ui/connnector/fungible-asset-screen/util/util.ts","ui/connnector/fungible-asset-screen/btc/btc-asset.ts","ui/connnector/fungible-asset-screen/eth/erc20-asset.ts","ui/connnector/fungible-asset-screen/eth/eth-asset.ts","ui/connnector/fungible-asset-screen/polygon/erc20-asset.ts","ui/connnector/fungible-asset-screen/polygon/matic-asset.ts","ui/connnector/fungible-asset-screen/eth/goerli/erc20-asset.ts","ui/connnector/fungible-asset-screen/eth/goerli/eth-asset.ts","ui/connnector/fungible-asset-screen/polygon/mumbai/erc20-asset.ts","ui/connnector/fungible-asset-screen/polygon/mumbai/matic-asset.ts","ui/connnector/fungible-asset-screen/fungible-asset-factory.ts","ui/connnector/fungible-asset-screen/hooks/use-token-config.ts","features/fungable-token/use-all-token.ts","integration/internet-identity/queries.ts","ui/connnector/connector-factory.ts","ui/connnector/fungible-asset-screen/ic/hooks/use-icp.ts","features/fungable-token/icp/hooks/use-balance-icp-all.ts"],"sourcesContent":["var _path, _path2, _path3, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgDfinity(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"-1 -1 107.42470599999999 54.6597\",\n    width: 103.42,\n    height: 50.66,\n    className: \"inline w-8 h-8 ml-1\",\n    \"data-v-45c16e28\": \"\",\n    \"data-v-5e337368\": \"\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"defs\", {\n    \"data-v-45c16e28\": \"\"\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.62 9.14C56.48 11.99 53.72 15.07 51.71 17.53C51.71 17.53 54.95 21.18 58.49 25.09C60.41 22.72 63.17 19.51 66.36 16.61C72.26 11.2 76.1 10.11 78.33 10.11C86.64 10.11 93.37 16.92 93.37 25.35C93.37 33.7 86.64 40.51 78.33 40.6C77.94 40.6 77.46 40.55 76.89 40.42C79.29 41.52 81.92 42.31 84.37 42.31C99.58 42.31 102.55 32.03 102.72 31.28C103.16 29.39 103.42 27.42 103.42 25.4C103.38 11.38 92.15 0 78.33 0C72.56 0 66.27 3.08 59.62 9.14Z\",\n    id: \"a2oTCciHwU\",\n    \"data-v-45c16e28\": \"\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradientc2rIvyDhN\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 65.17,\n    y1: 3.67,\n    x2: 99.9,\n    y2: 39.44,\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"21%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(241, 90, 36)\",\n      stopOpacity: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"68.41000000000001%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(251, 176, 59)\",\n      stopOpacity: 1\n    }\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.8 41.52C46.95 38.66 49.7 35.59 51.71 33.13C51.71 33.13 48.48 29.48 44.94 25.57C43.01 27.94 40.26 31.15 37.07 34.05C31.17 39.41 27.28 40.55 25.09 40.55C16.79 40.55 10.05 33.74 10.05 25.31C10.05 16.96 16.79 10.15 25.09 10.06C25.48 10.06 25.97 10.11 26.53 10.24C24.13 9.14 21.51 8.35 19.06 8.35C3.85 8.35 0.87 18.63 0.7 19.38C0.26 21.27 0 23.24 0 25.26C0 39.28 11.23 50.66 25.09 50.66C30.86 50.66 37.16 47.58 43.8 41.52Z\",\n    id: \"aFWcwFIax\",\n    \"data-v-45c16e28\": \"\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"gradientaIMror5Zz\",\n    gradientUnits: \"userSpaceOnUse\",\n    x1: 38.22,\n    y1: 46.97,\n    x2: 3.5,\n    y2: 11.2,\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"21%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(237, 30, 121)\",\n      stopOpacity: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"89.29%\",\n    \"data-v-45c16e28\": \"\",\n    style: {\n      stopColor: \"rgb(82, 39, 133)\",\n      stopOpacity: 1\n    }\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.1 8.57C5.24 8.23 1.16 18.1 0.81 19.37C3.47 8.3 13.37 0.04 25.14 0C34.73 0 44.43 9.21 51.59 17.53C51.6 17.51 51.61 17.5 51.62 17.49C51.62 17.49 54.86 21.13 58.4 25.04C58.4 25.04 62.42 29.7 66.71 33.79C68.37 35.37 76.45 41.74 84.23 41.96C98.49 42.36 102.42 31.94 102.64 31.15C100.02 42.27 90.09 50.57 78.29 50.62C68.69 50.62 58.99 41.4 51.8 33.08C51.78 33.1 51.77 33.11 51.76 33.13C51.76 33.13 48.52 29.48 44.98 25.57C44.98 25.57 40.96 20.91 36.68 16.83C35.01 15.25 26.88 8.79 19.1 8.57ZM0.81 19.37C0.8 19.4 0.79 19.43 0.79 19.46C0.79 19.44 0.8 19.41 0.81 19.37Z\",\n    id: \"e1RZG6bOc\",\n    \"data-v-45c16e28\": \"\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#a2oTCciHwU\",\n    opacity: 1,\n    fill: \"url(#gradientc2rIvyDhN)\",\n    \"data-v-45c16e28\": \"\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#a2oTCciHwU\",\n    opacity: 1,\n    fillOpacity: 0,\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    strokeOpacity: 0,\n    \"data-v-45c16e28\": \"\"\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#aFWcwFIax\",\n    opacity: 1,\n    fill: \"url(#gradientaIMror5Zz)\",\n    \"data-v-45c16e28\": \"\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#aFWcwFIax\",\n    opacity: 1,\n    fillOpacity: 0,\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    strokeOpacity: 0,\n    \"data-v-45c16e28\": \"\"\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#e1RZG6bOc\",\n    opacity: 1,\n    fill: \"#29abe2\",\n    fillOpacity: 1,\n    \"data-v-45c16e28\": \"\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    \"data-v-45c16e28\": \"\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#e1RZG6bOc\",\n    opacity: 1,\n    fillOpacity: 0,\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    strokeOpacity: 0,\n    \"data-v-45c16e28\": \"\"\n  }))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgDfinity);\nexport default __webpack_public_path__ + \"static/media/dfinity.583ab84ba16070ca501453d1e291dff4.svg\";\nexport { ForwardRef as ReactComponent };","import useSWR from \"swr\"\n\nimport { getAllToken } from \"@nfid/integration/token/dip-20\"\n\nexport const useAllDip20Token = () => {\n  const { data: token, isValidating } = useSWR(\"dip20AllToken\", getAllToken, {\n    dedupingInterval: 60_000 * 60,\n    focusThrottleInterval: 60_000 * 60,\n  })\n\n  console.debug(\"useAllDip20Token\", { token })\n\n  return { token, isValidating }\n}\n","import useSWR from \"swr\"\n\nimport { getExchangeRate } from \"frontend/integration/rosetta/get-exchange-rate\"\n\nexport const useICPExchangeRate = () => {\n  const { data: exchangeRate, ...rest } = useSWR(\n    \"walletExchangeRate\",\n    getExchangeRate,\n    {\n      dedupingInterval: 60_000 * 60,\n      focusThrottleInterval: 60_000 * 60,\n      refreshInterval: 60_000 * 60,\n    },\n  )\n  return {\n    exchangeRate,\n    ...rest,\n  }\n}\n","import useSWR from \"swr\"\n\nimport { fetchBalances } from \"frontend/features/fungable-token/fetch-balances\"\nimport { useAllPrincipals } from \"frontend/integration/internet-identity/queries\"\n\nimport { useAllDip20Token } from \"../../dip-20/hooks/use-all-token-meta\"\n\nexport const useUserBalances = () => {\n  const { principals } = useAllPrincipals()\n  const { token: dip20Token } = useAllDip20Token()\n\n  const {\n    data: balances,\n    isValidating: isLoading,\n    mutate: refreshBalances,\n  } = useSWR(\n    dip20Token && principals ? [principals, dip20Token, `AllBalanceRaw`] : null,\n    async ([principals, dip20Token]) => {\n      console.debug(\"AllBalanceRaw\", { principals, dip20Token })\n      return await fetchBalances({\n        principals,\n        dip20Token,\n      })\n    },\n    { dedupingInterval: 30_000, refreshInterval: 60_000 },\n  )\n\n  return { balances: balances, isLoading, refreshBalances }\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport {\n  AssetErc20Config,\n  AssetFilter,\n  AssetNativeConfig,\n  IFungibleAssetConnector,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { authState } from \"@nfid/integration\"\n\nimport { getICPublicDelegation } from \"./ic/hooks/use-icp\"\n\nexport abstract class FungibleAssetConnector<\n  T extends AssetNativeConfig | AssetErc20Config,\n> implements IFungibleAssetConnector\n{\n  protected config: T\n\n  constructor(config: T) {\n    this.config = config\n  }\n\n  async getTokenConfigs(\n    assetFilter: AssetFilter[],\n  ): Promise<Array<TokenConfig>> {\n    const identity = await this.getIdentity(\n      assetFilter.map((filter) => filter.principal),\n    )\n    return identity.length === 0 ? [] : this.getAccounts(identity)\n  }\n\n  abstract getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>>\n\n  getTokenStandard(): string {\n    return `${this.config.tokenStandard}&${this.config.blockchain}`\n  }\n\n  protected getIdentity = async (\n    filterPrincipals?: string[],\n  ): Promise<DelegationIdentity[]> => {\n    const { delegationIdentity } = authState.get()\n    const rootDelegation = (await getICPublicDelegation())\n      .getPrincipal()\n      .toString()\n    if (!delegationIdentity) {\n      throw Error(\"Delegation identity error\")\n    }\n    return !filterPrincipals?.length ||\n      filterPrincipals?.includes(rootDelegation)\n      ? [delegationIdentity]\n      : []\n  }\n\n  getCacheTtl(): number {\n    return 30\n  }\n}\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport { stringICPtoE8s } from \"src/integration/wallet/utils\"\nimport {\n  AssetErc20Config,\n  AssetNativeConfig,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { toPresentation } from \"@nfid/integration/token/icp\"\n\nexport function toNativeTokenConfig(\n  config: AssetNativeConfig,\n  tokenSheet: TokenBalanceSheet,\n): TokenConfig {\n  return {\n    icon: config.icon,\n    tokenStandard: config.tokenStandard,\n    title: tokenSheet.label,\n    currency: config.feeCurrency,\n    balance: tokenSheet?.tokenBalance,\n    price: tokenSheet?.usdBalance,\n    fee: BigInt(tokenSheet?.fee ?? 0),\n    toPresentation,\n    transformAmount: stringICPtoE8s,\n    blockchain: config.blockchain,\n  }\n}\n\nexport function erc20ToTokenConfig(\n  config: AssetErc20Config,\n  tokenSheet: TokenBalanceSheet,\n): TokenConfig {\n  return {\n    tokenStandard: config.tokenStandard,\n    icon: tokenSheet.icon,\n    title: `${tokenSheet.label} ${config.network ? `${config.network}` : \"\"}`,\n    currency: tokenSheet.token,\n    balance: tokenSheet.tokenBalance,\n    price: tokenSheet.usdBalance,\n    blockchain: config.blockchain,\n    fee: BigInt(0),\n    toPresentation,\n    transformAmount: stringICPtoE8s,\n    feeCurrency: config.feeCurrency,\n    contract: tokenSheet.contract,\n  }\n}\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { btcAsset } from \"packages/integration/src/lib/bitcoin-wallet/btc-asset\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { toNativeTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetNativeConfig,\n  Blockchain,\n  BTCNetwork,\n  NativeToken,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { IconSvgBTC } from \"@nfid-frontend/ui\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class BtcAssetConnector extends FungibleAssetConnector<AssetNativeConfig> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return btcAsset.getRootAccount(identity[0], IconSvgBTC).then((token) => {\n      return [toNativeTokenConfig(this.config, token)]\n    })\n  }\n}\n\nexport const btcAssetConnector = new BtcAssetConnector({\n  icon: IconSvgBTC,\n  tokenStandard: TokenStandards.BTC,\n  title: \"Bitcoin\",\n  feeCurrency: NativeToken.BTC,\n  blockchain: Blockchain.BITCOIN,\n  network: BTCNetwork.MAINNET,\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { erc20ToTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetErc20Config,\n  Blockchain,\n  ETHNetwork,\n  NativeToken,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { IconERC20 } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class EthereumERC20AssetConnector extends FungibleAssetConnector<AssetErc20Config> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return ethereumAsset\n      .getAccounts(identity[0], this.config.icon)\n      .then((ts) => {\n        return ts.map((l) => {\n          return erc20ToTokenConfig(this.config, l)\n        })\n      })\n  }\n}\n\nexport const ethereumERC20AssetConnector = new EthereumERC20AssetConnector({\n  tokenStandard: TokenStandards.ERC20_ETHEREUM,\n  blockchain: Blockchain.ETHEREUM,\n  feeCurrency: NativeToken.ETH,\n  icon: IconERC20,\n  network: ETHNetwork.MAINNET,\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { toNativeTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetNativeConfig,\n  Blockchain,\n  ETHNetwork,\n  NativeToken,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class EthAssetConnector extends FungibleAssetConnector<AssetNativeConfig> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return ethereumAsset\n      .getNativeAccount(identity[0], this.config.icon)\n      .then((matic) => [toNativeTokenConfig(this.config, matic)])\n  }\n}\n\nexport const ethAssetConnector = new EthAssetConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ETH,\n  title: \"Ethereum\",\n  feeCurrency: NativeToken.ETH,\n  blockchain: Blockchain.ETHEREUM,\n  network: ETHNetwork.MAINNET,\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { erc20ToTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetErc20Config,\n  Blockchain,\n  NativeToken,\n  PolygonNetwork,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { PolygonERC20Svg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class PolygonERC20AssetConnector extends FungibleAssetConnector<AssetErc20Config> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return polygonAsset\n      .getAccounts(identity[0], this.config.icon)\n      .then((ts) => {\n        return ts.map((l) => {\n          return erc20ToTokenConfig(this.config, l)\n        })\n      })\n  }\n}\n\nexport const polygonERC20AssetConnector = new PolygonERC20AssetConnector({\n  tokenStandard: TokenStandards.ERC20_POLYGON,\n  icon: PolygonERC20Svg,\n  blockchain: Blockchain.POLYGON,\n  feeCurrency: NativeToken.MATIC,\n  network: PolygonNetwork.MAINNET,\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { toNativeTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetNativeConfig,\n  Blockchain,\n  NativeToken,\n  PolygonNetwork,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class MaticAssetConnector extends FungibleAssetConnector<AssetNativeConfig> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return polygonAsset\n      .getNativeAccount(identity[0], this.config.icon)\n      .then((matic) => [toNativeTokenConfig(this.config, matic)])\n  }\n}\n\nexport const maticAssetConnector = new MaticAssetConnector({\n  icon: MaticSvg,\n  tokenStandard: TokenStandards.MATIC,\n  title: \"Matic\",\n  feeCurrency: NativeToken.MATIC,\n  blockchain: Blockchain.POLYGON,\n  network: PolygonNetwork.MAINNET,\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { erc20ToTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetErc20Config,\n  Blockchain,\n  ETHNetwork,\n  NativeToken,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { IconERC20 } from \"@nfid-frontend/ui\"\nimport { ethereumGoerliAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class EthereumGoerliERC20AssetConnector extends FungibleAssetConnector<AssetErc20Config> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return ethereumGoerliAsset\n      .getAccounts(identity[0], this.config.icon)\n      .then((ts) => {\n        return ts.map((l) => {\n          return erc20ToTokenConfig(this.config, l)\n        })\n      })\n  }\n}\n\nexport const ethereumGoerliERC20AssetConnector =\n  new EthereumGoerliERC20AssetConnector({\n    tokenStandard: TokenStandards.ERC20_ETHEREUM,\n    blockchain: Blockchain.ETHEREUM_GOERLI,\n    feeCurrency: NativeToken.ETH,\n    icon: IconERC20,\n    network: ETHNetwork.GOERLI,\n  })\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { toNativeTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetNativeConfig,\n  Blockchain,\n  ETHNetwork,\n  NativeToken,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { IconPngEthereum } from \"@nfid-frontend/ui\"\nimport { ethereumGoerliAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class EthGoerliAssetConnector extends FungibleAssetConnector<AssetNativeConfig> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return ethereumGoerliAsset\n      .getNativeAccount(identity[0], this.config.icon)\n      .then((matic) => [toNativeTokenConfig(this.config, matic)])\n  }\n}\n\nexport const ethGoerliAssetConnector = new EthGoerliAssetConnector({\n  icon: IconPngEthereum,\n  tokenStandard: TokenStandards.ETH,\n  title: \"Ethereum Goerli\",\n  feeCurrency: NativeToken.ETH,\n  blockchain: Blockchain.ETHEREUM_GOERLI,\n  network: ETHNetwork.GOERLI,\n})\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { erc20ToTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetErc20Config,\n  Blockchain,\n  NativeToken,\n  PolygonNetwork,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { PolygonERC20Svg } from \"@nfid-frontend/ui\"\nimport { polygonMumbaiAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class PolygonMumbaiERC20AssetConnector extends FungibleAssetConnector<AssetErc20Config> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return polygonMumbaiAsset\n      .getAccounts(identity[0], this.config.icon)\n      .then((ts) => {\n        return ts.map((l) => {\n          return erc20ToTokenConfig(this.config, l)\n        })\n      })\n  }\n}\n\nexport const polygonMumbaiERC20AssetConnector =\n  new PolygonMumbaiERC20AssetConnector({\n    tokenStandard: TokenStandards.ERC20_POLYGON,\n    icon: PolygonERC20Svg,\n    blockchain: Blockchain.POLYGON_MUMBAI,\n    feeCurrency: NativeToken.MATIC,\n    network: PolygonNetwork.MUMBAI,\n  })\n","import { DelegationIdentity } from \"@dfinity/identity\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { toNativeTokenConfig } from \"src/ui/connnector/fungible-asset-screen/util/util\"\nimport {\n  AssetNativeConfig,\n  Blockchain,\n  NativeToken,\n  PolygonNetwork,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { MaticSvg } from \"@nfid-frontend/ui\"\nimport { polygonMumbaiAsset } from \"@nfid/integration\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport class MaticMumbaiAssetConnector extends FungibleAssetConnector<AssetNativeConfig> {\n  async getAccounts(\n    identity: DelegationIdentity[],\n  ): Promise<Array<TokenConfig>> {\n    return polygonMumbaiAsset\n      .getNativeAccount(identity[0], this.config.icon)\n      .then((matic) => [toNativeTokenConfig(this.config, matic)])\n  }\n}\n\nexport const maticMumbaiAssetConnector = new MaticMumbaiAssetConnector({\n  icon: MaticSvg,\n  tokenStandard: TokenStandards.MATIC,\n  title: \"Matic Mumbai\",\n  feeCurrency: NativeToken.MATIC,\n  blockchain: Blockchain.POLYGON_MUMBAI,\n  network: PolygonNetwork.MUMBAI,\n})\n","import { ConnectorFactory } from \"src/ui/connnector/connector-factory\"\nimport { btcAssetConnector } from \"src/ui/connnector/fungible-asset-screen/btc/btc-asset\"\nimport { ethereumERC20AssetConnector } from \"src/ui/connnector/fungible-asset-screen/eth/erc20-asset\"\nimport { ethAssetConnector } from \"src/ui/connnector/fungible-asset-screen/eth/eth-asset\"\nimport { FungibleAssetConnector } from \"src/ui/connnector/fungible-asset-screen/fungible-asset\"\nimport { polygonERC20AssetConnector } from \"src/ui/connnector/fungible-asset-screen/polygon/erc20-asset\"\nimport { maticAssetConnector } from \"src/ui/connnector/fungible-asset-screen/polygon/matic-asset\"\nimport {\n  AssetErc20Config,\n  AssetFilter,\n  AssetNativeConfig,\n  TokenConfig,\n} from \"src/ui/connnector/types\"\n\nimport { ethereumGoerliERC20AssetConnector } from \"./eth/goerli/erc20-asset\"\nimport { ethGoerliAssetConnector } from \"./eth/goerli/eth-asset\"\nimport { polygonMumbaiERC20AssetConnector } from \"./polygon/mumbai/erc20-asset\"\nimport { maticMumbaiAssetConnector } from \"./polygon/mumbai/matic-asset\"\n\nexport class FungibleAssetFactory extends ConnectorFactory<\n  string,\n  FungibleAssetConnector<AssetNativeConfig | AssetErc20Config>\n> {\n  getTokenConfigs = async (\n    key: string,\n    assetFilters: AssetFilter[],\n  ): Promise<Array<TokenConfig>> => {\n    return super.process(key, [assetFilters])\n  }\n\n  getCacheKey(key: string, functionToCall: Function, args: any[]): string {\n    return (\n      functionToCall.name +\n      key +\n      (args[0]! as AssetFilter[]).reduce(\n        (acc, { principal }) => `${acc}${principal}`,\n        \"\",\n      )\n    )\n  }\n\n  getFunctionToCall(\n    connector: FungibleAssetConnector<AssetNativeConfig | AssetErc20Config>,\n  ): Function {\n    return connector.getTokenConfigs\n  }\n}\n\nexport const fungibleAssetFactory = new FungibleAssetFactory([\n  btcAssetConnector,\n  maticAssetConnector,\n  polygonERC20AssetConnector,\n  ethereumERC20AssetConnector,\n  ethAssetConnector,\n  maticMumbaiAssetConnector,\n  polygonMumbaiERC20AssetConnector,\n  ethereumGoerliERC20AssetConnector,\n  ethGoerliAssetConnector,\n])\n","import { fungibleAssetFactory } from \"src/ui/connnector/fungible-asset-screen/fungible-asset-factory\"\nimport useSWR from \"swr\"\n\nimport { AssetFilter } from \"../../types\"\n\ntype UseTokenConfig = {\n  assetFilters: AssetFilter[]\n  tokens: string[]\n}\n\nexport const useTokenConfig = ({ assetFilters, tokens }: UseTokenConfig) => {\n  const { data: configs, ...rest } = useSWR(\n    [tokens, assetFilters, \"tokenConfig\"],\n    ([tokens, assetFilters]) =>\n      Promise.all(\n        tokens.map(async (token) => {\n          try {\n            return await fungibleAssetFactory.getTokenConfigs(\n              token,\n              assetFilters,\n            )\n          } catch (e) {\n            // FIXME: handle case when request fails\n            console.error(\"useTokenConfig\", e)\n            return []\n          }\n        }),\n      ),\n  )\n\n  return { configs: configs?.flat() || [], ...rest }\n}\n","import React from \"react\"\nimport { fungibleAssetFactory } from \"src/ui/connnector/fungible-asset-screen/fungible-asset-factory\"\nimport { useTokenConfig } from \"src/ui/connnector/fungible-asset-screen/hooks/use-token-config\"\nimport { useICTokens } from \"src/ui/connnector/fungible-asset-screen/ic/hooks/use-icp\"\nimport { AssetFilter, TokenConfig } from \"src/ui/connnector/types\"\n\nexport const useAllToken = (\n  assetFilters: AssetFilter[] = [],\n): { token: TokenConfig[] } => {\n  const tokens = fungibleAssetFactory.getKeys()\n  const { configs: tokenConfigs } = useTokenConfig({ tokens, assetFilters })\n\n  const icTokenConfigs = useICTokens(assetFilters)\n\n  const token: TokenConfig[] = React.useMemo(() => {\n    return [...tokenConfigs, ...icTokenConfigs].sort((a, b) =>\n      a.currency.localeCompare(b.currency),\n    )\n  }, [tokenConfigs, icTokenConfigs])\n\n  console.debug(\"useAllToken\", { token })\n  return { token }\n}\n","import React from \"react\"\nimport useSWRImmutable from \"swr/immutable\"\n\nimport {\n  RootWallet,\n  extendWithFixedAccounts,\n  fetchPrincipals,\n} from \"@nfid/integration\"\n\nimport {\n  useAccounts,\n  useApplicationsMeta,\n  useProfile,\n} from \"frontend/integration/identity-manager/queries\"\n\n/**\n * React hook to retrieve user principals.\n */\nexport const useAllPrincipals = () => {\n  const { profile } = useProfile()\n  const { accounts } = useAccounts()\n  const { applicationsMeta } = useApplicationsMeta()\n\n  const allAccounts = React.useMemo(() => {\n    return extendWithFixedAccounts(accounts, applicationsMeta)\n  }, [accounts, applicationsMeta])\n\n  const { data: principals } = useSWRImmutable(\n    profile?.anchor && allAccounts\n      ? [\n          BigInt(profile.anchor),\n          allAccounts,\n          profile.wallet === RootWallet.NFID,\n        ]\n      : null,\n    ([anchor, allAccounts, isNewUser]) =>\n      fetchPrincipals(anchor, allAccounts, isNewUser),\n    { dedupingInterval: 60_000, refreshInterval: 60_000 },\n  )\n\n  console.debug(\"useAllPrincipals\", { principals })\n\n  return { principals }\n}\n","import { StandardizedToken } from \"./types\"\n\nexport abstract class ConnectorFactory<N, T extends StandardizedToken<N>> {\n  connectors: any\n  connectorsStorage: Map<N, T>\n\n  constructor(connectors: any) {\n    this.connectors = connectors\n    this.connectorsStorage = this.toMap(this.connectors)\n  }\n\n  getKeys(): N[] {\n    return Array.from(this.connectorsStorage.keys())\n  }\n\n  async process(key: N, args: any[]) {\n    const connector = this.getConnector(key)\n    if (!connector) throw Error(key + \" not supported\")\n\n    return await this.getFunctionToCall(connector).apply(connector, args)\n  }\n\n  protected abstract getFunctionToCall(connector: T): Function\n\n  private toMap(connectors: T[]): Map<N, T> {\n    const connectorsMap = new Map<N, T>()\n    connectors.forEach((connector) => {\n      connectorsMap.set(connector.getTokenStandard(), connector)\n    })\n    return connectorsMap\n  }\n\n  private getConnector(key: N) {\n    return this.connectorsStorage.get(key)\n  }\n}\n","import { Chain, getGlobalKeys } from \"packages/integration/src/lib/lambda/ecdsa\"\nimport { useAllDip20Token } from \"src/features/fungable-token/dip-20/hooks/use-all-token-meta\"\nimport { useBalanceICPAll } from \"src/features/fungable-token/icp/hooks/use-balance-icp-all\"\nimport { stringICPtoE8s } from \"src/integration/wallet/utils\"\nimport { AssetFilter, Blockchain, TokenConfig } from \"src/ui/connnector/types\"\n\nimport { IconSvgDfinity } from \"@nfid-frontend/ui\"\nimport { accessList, authState } from \"@nfid/integration\"\nimport { toPresentation, WALLET_FEE_E8S } from \"@nfid/integration/token/icp\"\nimport { TokenStandards } from \"@nfid/integration/token/types\"\n\nexport const useICTokens = (assetFilter: AssetFilter[]): TokenConfig[] => {\n  const { appAccountBalance } = useBalanceICPAll(true, assetFilter)\n  const { token: dip20Token } = useAllDip20Token()\n\n  return [\n    {\n      icon: IconSvgDfinity,\n      tokenStandard: TokenStandards.ICP,\n      title: \"Internet Computer\",\n      currency: \"ICP\",\n      balance: appAccountBalance?.ICP.tokenBalance,\n      price: appAccountBalance?.ICP.usdBalance,\n      fee: BigInt(WALLET_FEE_E8S),\n      toPresentation,\n      transformAmount: stringICPtoE8s,\n      blockchain: Blockchain.IC,\n    },\n    ...(dip20Token\n      ? dip20Token.map(({ symbol, name, logo, ...rest }) => ({\n          tokenStandard: TokenStandards.DIP20,\n          icon: logo,\n          title: name,\n          currency: symbol,\n          balance: appAccountBalance?.[symbol].tokenBalance,\n          price: appAccountBalance?.[symbol].usdBalance,\n          blockchain: Blockchain.IC,\n          ...rest,\n        }))\n      : []\n    ).filter((token) => token.balance > 0),\n  ]\n}\n\nexport const getICPublicDelegation = async () => {\n  const { delegationIdentity } = authState.get()\n\n  const publicDelegation = await getGlobalKeys(\n    delegationIdentity!,\n    Chain.IC,\n    accessList,\n  )\n\n  return publicDelegation\n}\n","import { TokenBalanceSheet } from \"packages/integration/src/lib/asset/types\"\nimport React from \"react\"\n\nimport { toPresentation } from \"@nfid/integration/token/icp\"\n\nimport ICP from \"frontend/assets/dfinity.svg\"\nimport { useApplicationsMeta } from \"frontend/integration/identity-manager/queries\"\nimport { AssetFilter } from \"frontend/ui/connnector/types\"\n\nimport { accumulateAppAccountBalance } from \"../../accumulate-app-account-balances\"\nimport { useAllDip20Token } from \"../../dip-20/hooks/use-all-token-meta\"\nimport { useICPExchangeRate } from \"./use-icp-exchange-rate\"\nimport { useUserBalances } from \"./use-user-balances\"\n\ntype AppAccountBalanceByToken = {\n  [token: string]: TokenBalanceSheet\n}\n\ntype UseBalanceICPAllReturn = {\n  isLoading: boolean\n  appAccountBalance?: AppAccountBalanceByToken\n}\n\n/**\n * returns map of applications and there accumulated balance across all accounts\n *\n * @param excludeEmpty only include applications with non zero balance\n */\nexport const useBalanceICPAll = (\n  excludeEmpty: boolean = true,\n  assetFilters?: AssetFilter[],\n): UseBalanceICPAllReturn => {\n  const { applicationsMeta: applications } = useApplicationsMeta()\n  const { exchangeRate, isValidating: isLoadingICPExchangeRate } =\n    useICPExchangeRate()\n  const { token: dip20Token } = useAllDip20Token()\n\n  const { balances, isLoading: isLoadingBalances } = useUserBalances()\n\n  console.debug(\"useUserBalances\", { icpBalance: balances })\n\n  const appAccountBalance = React.useMemo(() => {\n    if (\n      isLoadingICPExchangeRate ||\n      isLoadingBalances ||\n      !exchangeRate ||\n      !balances\n    ) {\n      return\n    }\n\n    return {\n      ICP: accumulateAppAccountBalance({\n        balances: assetFilters?.length\n          ? balances.filter((b) =>\n              assetFilters?.find((f) => f.principal === b.principal.toString()),\n            )\n          : balances,\n        applications,\n        exchangeRate,\n        excludeEmpty,\n        includeEmptyApps: [\"nfid.one\", \"https://nns.ic0.app\"],\n        label: \"Internet Computer\",\n        token: \"ICP\",\n        icon: ICP,\n        toPresentation,\n      }),\n      ...(dip20Token\n        ? dip20Token.reduce(\n            (acc, { symbol, name, logo, toPresentation }) => ({\n              ...acc,\n              [symbol]: accumulateAppAccountBalance({\n                toPresentation,\n                balances: assetFilters?.length\n                  ? balances.filter((b) =>\n                      assetFilters?.find(\n                        (f) => f.principal === b.principal.toString(),\n                      ),\n                    )\n                  : balances,\n                applications,\n                icon: logo,\n                exchangeRate: symbol === \"WICP\" ? exchangeRate : 0,\n                excludeEmpty,\n                includeEmptyApps: [\"nfid.one\", \"https://nns.ic0.app\"],\n                label: name,\n                token: symbol,\n              }),\n            }),\n            {},\n          )\n        : {}),\n    }\n  }, [\n    isLoadingICPExchangeRate,\n    isLoadingBalances,\n    exchangeRate,\n    balances,\n    assetFilters,\n    applications,\n    excludeEmpty,\n    dip20Token,\n  ])\n\n  console.debug(\"useBalanceICPAll\", {\n    isLoadingICPExchangeRate,\n    isLoadingPrincipals: isLoadingBalances,\n    exchangeRate,\n    applicationsMeta: applications,\n    appAccountBalance,\n    balanceICPRaw: balances,\n  })\n\n  return {\n    isLoading: isLoadingBalances || isLoadingICPExchangeRate,\n    appAccountBalance,\n  }\n}\n"],"names":["useAllDip20Token","data","token","isValidating","useSWR","getAllToken","dedupingInterval","focusThrottleInterval","console","debug","useICPExchangeRate","exchangeRate","rest","getExchangeRate","refreshInterval","useUserBalances","principals","useAllPrincipals","dip20Token","balances","isLoading","mutate","refreshBalances","async","fetchBalances","FungibleAssetConnector","constructor","config","getIdentity","delegationIdentity","authState","rootDelegation","getICPublicDelegation","getPrincipal","toString","Error","filterPrincipals","length","includes","this","assetFilter","identity","map","filter","principal","getAccounts","getTokenStandard","tokenStandard","blockchain","getCacheTtl","toNativeTokenConfig","tokenSheet","icon","title","label","currency","feeCurrency","balance","tokenBalance","price","usdBalance","fee","BigInt","toPresentation","transformAmount","stringICPtoE8s","erc20ToTokenConfig","network","contract","btcAssetConnector","btcAsset","IconSvgBTC","then","TokenStandards","NativeToken","Blockchain","BTCNetwork","ethereumERC20AssetConnector","ethereumAsset","ts","l","IconERC20","ETHNetwork","ethAssetConnector","matic","IconPngEthereum","polygonERC20AssetConnector","polygonAsset","PolygonERC20Svg","PolygonNetwork","maticAssetConnector","MaticSvg","ethereumGoerliERC20AssetConnector","ethereumGoerliAsset","ethGoerliAssetConnector","polygonMumbaiERC20AssetConnector","polygonMumbaiAsset","maticMumbaiAssetConnector","FungibleAssetFactory","ConnectorFactory","getTokenConfigs","key","assetFilters","super","process","getCacheKey","functionToCall","args","name","reduce","acc","getFunctionToCall","connector","fungibleAssetFactory","useTokenConfig","tokens","configs","Promise","all","e","error","flat","useAllToken","getKeys","tokenConfigs","icTokenConfigs","useICTokens","React","sort","a","b","localeCompare","profile","useProfile","accounts","useAccounts","applicationsMeta","useApplicationsMeta","allAccounts","extendWithFixedAccounts","useSWRImmutable","anchor","wallet","RootWallet","isNewUser","fetchPrincipals","connectors","connectorsStorage","toMap","Array","from","keys","getConnector","apply","connectorsMap","Map","forEach","set","get","appAccountBalance","excludeEmpty","applications","isLoadingICPExchangeRate","isLoadingBalances","icpBalance","ICP","accumulateAppAccountBalance","find","f","includeEmptyApps","symbol","logo","isLoadingPrincipals","balanceICPRaw","useBalanceICPAll","IconSvgDfinity","WALLET_FEE_E8S","getGlobalKeys","Chain","accessList"],"sourceRoot":""}